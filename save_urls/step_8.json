"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_8.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-8 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-8 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-8 tutorial program\\n\\n\\nThis tutorial depends on step-6.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\n\\n The commented program\\n\\nInclude files\\nThe ElasticProblem class template\\nRight hand side values\\nThe ElasticProblem class implementation\\n\\nElasticProblem::ElasticProblem constructor\\nElasticProblem::setup_system\\nElasticProblem::assemble_system\\nElasticProblem::solve\\nElasticProblem::refine_grid\\nElasticProblem::output_results\\nElasticProblem::run\\n\\nThe main function\\n\\n\\n Results\\n\\n\\n The plain program\\n   \\n Introduction\\nIn real life, most partial differential equations are really systems of equations. Accordingly, the solutions are usually vector-valued. The deal.II library supports such problems (see the extensive documentation in the Handling vector valued problems topic), and we will show that that is mostly rather simple. The only more complicated problems are in assembling matrix and right hand side, but these are easily understood as well.\\nNoteThe material presented here is also discussed in video lecture 19. (All video lectures are also available here.)\\nIn this tutorial program we will want to solve the elastic equations. They are an extension to Laplace's equation with a vector-valued solution that describes the displacement in each space direction of a rigid body which is subject to a force. Of course, the force is also vector-valued, meaning that in each point it has a direction and an absolute value.\\nOne can write the elasticity equations in a number of ways. The one that shows the symmetry with the Laplace equation in the most obvious way is to write it as       \\n\\\\[\\n  -\\n  \\\\text{div}\\\\,\\n  ({\\\\mathbf C} \\\\nabla \\\\mathbf{u})\\n  =\\n  \\\\mathbf f,\\n\\\\]\\n\\n where \\\\(\\\\mathbf u\\\\) is the vector-valued displacement at each point, \\\\(\\\\mathbf f\\\\) the force, and \\\\({\\\\mathbf C}\\\\) is a rank-4 tensor (i.e., it has four indices) that encodes the stress-strain relationship \\u2013 in essence, it represents the \\\"spring constant\\\" in Hookes law that relates the displacement to the forces. \\\\({\\\\mathbf C}\\\\) will, in many cases, depend on \\\\(\\\\mathbf x\\\\) if the body whose deformation we want to simulate is composed of different materials.\\nWhile the form of the equations above is correct, it is not the way they are usually derived. In truth, the gradient of the displacement \\\\(\\\\nabla\\\\mathbf u\\\\) (a matrix) has no physical meaning whereas its symmetrized version,   \\n\\\\[\\n\\\\varepsilon(\\\\mathbf u)_{kl} =\\\\frac{1}{2}(\\\\partial_k u_l + \\\\partial_l u_k),\\n\\\\]\\n\\n does and is typically called the \\\"strain\\\". (Here and in the following, \\\\(\\\\partial_k=\\\\frac{\\\\partial}{\\\\partial x_k}\\\\). We will also use the Einstein summation convention that whenever the same index appears twice in an equation, summation over this index is implied; we will, however, not distinguish between upper and lower indices.) With this definition of the strain, the elasticity equations then read as       \\n\\\\[\\n  -\\n  \\\\text{div}\\\\,\\n  ({\\\\mathbf C} \\\\varepsilon(\\\\mathbf u))\\n  =\\n  \\\\mathbf f,\\n\\\\]\\n\\n which you can think of as the more natural generalization of the Laplace equation to vector-valued problems. (The form shown first is equivalent to this form because the tensor \\\\({\\\\mathbf C}\\\\) has certain symmetries, namely that \\\\(C_{ijkl}=C_{ijlk}\\\\), and consequently  \\\\({\\\\mathbf C} \\\\varepsilon(\\\\mathbf u)_{kl}\\n= {\\\\mathbf C} \\\\nabla\\\\mathbf u\\\\).)\\nOne can of course alternatively write these equations in component form:        \\n\\\\[\\n  -\\n  \\\\partial_j (c_{ijkl} \\\\varepsilon_{kl})\\n  =\\n  f_i,\\n  \\\\qquad\\n  i=1\\\\ldots d.\\n\\\\]\\n\\nIn many cases, one knows that the material under consideration is isotropic, in which case by introduction of the two coefficients \\\\(\\\\lambda\\\\) and \\\\(\\\\mu\\\\) the coefficient tensor reduces to      \\n\\\\[\\n  c_{ijkl}\\n  =\\n  \\\\lambda \\\\delta_{ij} \\\\delta_{kl} +\\n  \\\\mu (\\\\delta_{ik} \\\\delta_{jl} + \\\\delta_{il} \\\\delta_{jk}).\\n\\\\]\\n\\nThe elastic equations can then be rewritten in much simpler a form:          \\n\\\\[\\n   -\\n   \\\\nabla \\\\lambda (\\\\nabla\\\\cdot {\\\\mathbf u})\\n   -\\n   (\\\\nabla \\\\cdot \\\\mu \\\\nabla) {\\\\mathbf u}\\n   -\\n   \\\\nabla\\\\cdot \\\\mu (\\\\nabla {\\\\mathbf u})^T\\n   =\\n   {\\\\mathbf f},\\n\\\\]\\n\\n and the respective bilinear form is then                \\n\\\\[\\n  a({\\\\mathbf u}, {\\\\mathbf v}) =\\n  \\\\left(\\n    \\\\lambda \\\\nabla\\\\cdot {\\\\mathbf u}, \\\\nabla\\\\cdot {\\\\mathbf v}\\n  \\\\right)_\\\\Omega\\n  +\\n  \\\\sum_{k,l}\\n  \\\\left(\\n    \\\\mu \\\\partial_k u_l, \\\\partial_k v_l\\n  \\\\right)_\\\\Omega\\n  +\\n  \\\\sum_{k,l}\\n  \\\\left(\\n    \\\\mu \\\\partial_k u_l, \\\\partial_l v_k\\n  \\\\right)_\\\\Omega,\\n\\\\]\\n\\n or also writing the first term a sum over components:                 \\n\\\\[\\n  a({\\\\mathbf u}, {\\\\mathbf v}) =\\n  \\\\sum_{k,l}\\n  \\\\left(\\n    \\\\lambda \\\\partial_l u_l, \\\\partial_k v_k\\n  \\\\right)_\\\\Omega\\n  +\\n  \\\\sum_{k,l}\\n  \\\\left(\\n    \\\\mu \\\\partial_k u_l, \\\\partial_k v_l\\n  \\\\right)_\\\\Omega\\n  +\\n  \\\\sum_{k,l}\\n  \\\\left(\\n    \\\\mu \\\\partial_k u_l, \\\\partial_l v_k\\n  \\\\right)_\\\\Omega.\\n\\\\]\\n\\nNoteAs written, the equations above are generally considered to be the right description for the displacement of three-dimensional objects if the displacement is small and we can assume that Hooke's law is valid. In that case, the indices \\\\(i,j,k,l\\\\) above all run over the set \\\\(\\\\{1,2,3\\\\}\\\\) (or, in the C++ source, over \\\\(\\\\{0,1,2\\\\}\\\\)). However, as is, the program runs in 2d, and while the equations above also make mathematical sense in that case, they would only describe a truly two-dimensional solid. In particular, they are not the appropriate description of an \\\\(x-y\\\\) cross-section of a body infinite in the \\\\(z\\\\) direction; this is in contrast to many other two-dimensional equations that can be obtained by assuming that the body has infinite extent in \\\\(z\\\\)-direction and that the solution function does not depend on the \\\\(z\\\\) coordinate. On the other hand, there are equations for two-dimensional models of elasticity; see for example the Wikipedia article on plane strain, antiplane shear and plan stress.\\nBut let's get back to the original problem. How do we assemble the matrix for such an equation? A very long answer with a number of different alternatives is given in the documentation of the Handling vector valued problems topic. Historically, the solution shown below was the only one available in the early years of the library. It turns out to also be the fastest. On the other hand, if a few per cent of compute time do not matter, there are simpler and probably more intuitive ways to assemble the linear system than the one discussed below but that weren't available until several years after this tutorial program was first written; if you are interested in them, take a look at the Handling vector valued problems topic.\\nLet us go back to the question of how to assemble the linear system. The first thing we need is some knowledge about how the shape functions work in the case of vector-valued finite elements. Basically, this comes down to the following: let \\\\(n\\\\) be the number of shape functions for the scalar finite element of which we build the vector element (for example, we will use bilinear functions for each component of the vector-valued finite element, so the scalar finite element is the FE_Q(1) element which we have used in previous examples already, and \\\\(n=4\\\\) in two space dimensions). Further, let \\\\(N\\\\) be the number of shape functions for the vector element; in two space dimensions, we need \\\\(n\\\\) shape functions for each component of the vector, so \\\\(N=2n\\\\). Then, the \\\\(i\\\\)th shape function of the vector element has the form   \\n\\\\[\\n  \\\\Phi_i({\\\\mathbf x}) = \\\\varphi_{\\\\text{base}(i)}({\\\\mathbf x})\\\\ {\\\\mathbf e}_{\\\\text{comp}(i)},\\n\\\\]\\n\\n where \\\\(e_l\\\\) is the \\\\(l\\\\)th unit vector, \\\\(\\\\text{comp}(i)\\\\) is the function that tells us which component of \\\\(\\\\Phi_i\\\\) is the one that is nonzero (for each vector shape function, only one component is nonzero, and all others are zero). \\\\(\\\\varphi_{\\\\text{base}(i)}(x)\\\\) describes the space dependence of the shape function, which is taken to be the \\\\(\\\\text{base}(i)\\\\)-th shape function of the scalar element. Of course, while \\\\(i\\\\) is in the range \\\\(0,\\\\ldots,N-1\\\\), the functions \\\\(\\\\text{comp}(i)\\\\) and \\\\(\\\\text{base}(i)\\\\) have the ranges \\\\(0,1\\\\) (in 2D) and \\\\(0,\\\\ldots,n-1\\\\), respectively.\\nFor example (though this sequence of shape functions is not guaranteed, and you should not rely on it), the following layout could be used by the library:                      \\n\\\\begin{eqnarray*}\\n  \\\\Phi_0({\\\\mathbf x}) &=&\\n  \\\\left(\\\\begin{array}{c}\\n    \\\\varphi_0({\\\\mathbf x}) \\\\\\\\ 0\\n  \\\\end{array}\\\\right),\\n  \\\\\\\\\\n  \\\\Phi_1({\\\\mathbf x}) &=&\\n  \\\\left(\\\\begin{array}{c}\\n    0 \\\\\\\\ \\\\varphi_0({\\\\mathbf x})\\n  \\\\end{array}\\\\right),\\n  \\\\\\\\\\n  \\\\Phi_2({\\\\mathbf x}) &=&\\n  \\\\left(\\\\begin{array}{c}\\n    \\\\varphi_1({\\\\mathbf x}) \\\\\\\\ 0\\n  \\\\end{array}\\\\right),\\n  \\\\\\\\\\n  \\\\Phi_3({\\\\mathbf x}) &=&\\n  \\\\left(\\\\begin{array}{c}\\n    0 \\\\\\\\ \\\\varphi_1({\\\\mathbf x})\\n  \\\\end{array}\\\\right),\\n  \\\\ldots\\n\\\\end{eqnarray*}\\n\\n where here   \\n\\\\[\\n  \\\\text{comp}(0)=0, \\\\quad  \\\\text{comp}(1)=1, \\\\quad  \\\\text{comp}(2)=0, \\\\quad  \\\\text{comp}(3)=1, \\\\quad  \\\\ldots\\n\\\\]\\n\\n\\n\\\\[\\n  \\\\text{base}(0)=0, \\\\quad  \\\\text{base}(1)=0, \\\\quad  \\\\text{base}(2)=1, \\\\quad  \\\\text{base}(3)=1, \\\\quad  \\\\ldots\\n\\\\]\\n\\nIn all but very rare cases, you will not need to know which shape function \\\\(\\\\varphi_{\\\\text{base}(i)}\\\\) of the scalar element belongs to a shape function \\\\(\\\\Phi_i\\\\) of the vector element. Let us therefore define   \\n\\\\[\\n  \\\\phi_i = \\\\varphi_{\\\\text{base}(i)}\\n\\\\]\\n\\n by which we can write the vector shape function as   \\n\\\\[\\n  \\\\Phi_i({\\\\mathbf x}) = \\\\phi_{i}({\\\\mathbf x})\\\\ {\\\\mathbf e}_{\\\\text{comp}(i)}.\\n\\\\]\\n\\n You can now safely forget about the function \\\\(\\\\text{base}(i)\\\\), at least for the rest of this example program.\\nNow using this vector shape functions, we can write the discrete finite element solution as    \\n\\\\[\\n  {\\\\mathbf u}_h({\\\\mathbf x}) =\\n  \\\\sum_i \\\\Phi_i({\\\\mathbf x})\\\\ U_i\\n\\\\]\\n\\n with scalar coefficients \\\\(U_i\\\\). If we define an analog function \\\\({\\\\mathbf v}_h\\\\) as test function, we can write the discrete problem as follows: Find coefficients \\\\(U_i\\\\) such that     \\n\\\\[\\n  a({\\\\mathbf u}_h, {\\\\mathbf v}_h) = ({\\\\mathbf f}, {\\\\mathbf v}_h)\\n  \\\\qquad\\n  \\\\forall {\\\\mathbf v}_h.\\n\\\\]\\n\\nIf we insert the definition of the bilinear form and the representation of \\\\({\\\\mathbf u}_h\\\\) and \\\\({\\\\mathbf v}_h\\\\) into this formula:                          \\n\\\\begin{eqnarray*}\\n  \\\\sum_{i,j}\\n    U_i V_j\\n  \\\\sum_{k,l}\\n  \\\\left\\\\{\\n  \\\\left(\\n    \\\\lambda \\\\partial_l (\\\\Phi_i)_l, \\\\partial_k (\\\\Phi_j)_k\\n  \\\\right)_\\\\Omega\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_l (\\\\Phi_i)_k, \\\\partial_l (\\\\Phi_j)_k\\n  \\\\right)_\\\\Omega\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_l (\\\\Phi_i)_k, \\\\partial_k (\\\\Phi_j)_l\\n  \\\\right)_\\\\Omega\\n  \\\\right\\\\}\\n\\\\\\\\\\n=\\n  \\\\sum_j V_j\\n  \\\\sum_l\\n  \\\\left(\\n    f_l,\\n    (\\\\Phi_j)_l\\n  \\\\right)_\\\\Omega.\\n\\\\end{eqnarray*}\\n\\n We note that here and in the following, the indices \\\\(k,l\\\\) run over spatial directions, i.e. \\\\(0\\\\le k,l < d\\\\), and that indices \\\\(i,j\\\\) run over degrees of freedom.\\nThe local stiffness matrix on cell \\\\(K\\\\) therefore has the following entries:                  \\n\\\\[\\n  A^K_{ij}\\n  =\\n  \\\\sum_{k,l}\\n  \\\\left\\\\{\\n  \\\\left(\\n    \\\\lambda \\\\partial_l (\\\\Phi_i)_l, \\\\partial_k (\\\\Phi_j)_k\\n  \\\\right)_K\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_l (\\\\Phi_i)_k, \\\\partial_l (\\\\Phi_j)_k\\n  \\\\right)_K\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_l (\\\\Phi_i)_k, \\\\partial_k (\\\\Phi_j)_l\\n  \\\\right)_K\\n  \\\\right\\\\},\\n\\\\]\\n\\n where \\\\(i,j\\\\) now are local degrees of freedom and therefore \\\\(0\\\\le i,j < N\\\\). In these formulas, we always take some component of the vector shape functions \\\\(\\\\Phi_i\\\\), which are of course given as follows (see their definition):   \\n\\\\[\\n  (\\\\Phi_i)_l = \\\\phi_i \\\\delta_{l,\\\\text{comp}(i)},\\n\\\\]\\n\\n with the Kronecker symbol \\\\(\\\\delta_{nm}\\\\). Due to this, we can delete some of the sums over \\\\(k\\\\) and \\\\(l\\\\):                                                         \\n\\\\begin{eqnarray*}\\n  A^K_{ij}\\n  &=&\\n  \\\\sum_{k,l}\\n  \\\\Bigl\\\\{\\n  \\\\left(\\n    \\\\lambda \\\\partial_l \\\\phi_i\\\\ \\\\delta_{l,\\\\text{comp}(i)},\\n            \\\\partial_k \\\\phi_j\\\\ \\\\delta_{k,\\\\text{comp}(j)}\\n  \\\\right)_K\\n\\\\\\\\\\n  &\\\\qquad\\\\qquad& +\\n  \\\\left(\\n    \\\\mu \\\\partial_l \\\\phi_i\\\\ \\\\delta_{k,\\\\text{comp}(i)},\\n        \\\\partial_l \\\\phi_j\\\\ \\\\delta_{k,\\\\text{comp}(j)}\\n  \\\\right)_K\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_l \\\\phi_i\\\\ \\\\delta_{k,\\\\text{comp}(i)},\\n        \\\\partial_k \\\\phi_j\\\\ \\\\delta_{l,\\\\text{comp}(j)}\\n  \\\\right)_K\\n  \\\\Bigr\\\\}\\n\\\\\\\\\\n  &=&\\n  \\\\left(\\n    \\\\lambda \\\\partial_{\\\\text{comp}(i)} \\\\phi_i,\\n            \\\\partial_{\\\\text{comp}(j)} \\\\phi_j\\n  \\\\right)_K\\n  +\\n  \\\\sum_l\\n  \\\\left(\\n    \\\\mu \\\\partial_l \\\\phi_i,\\n        \\\\partial_l \\\\phi_j\\n  \\\\right)_K\\n  \\\\ \\\\delta_{\\\\text{comp}(i),\\\\text{comp}(j)}\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_{\\\\text{comp}(j)} \\\\phi_i,\\n        \\\\partial_{\\\\text{comp}(i)} \\\\phi_j\\n  \\\\right)_K\\n\\\\\\\\\\n  &=&\\n  \\\\left(\\n    \\\\lambda \\\\partial_{\\\\text{comp}(i)} \\\\phi_i,\\n            \\\\partial_{\\\\text{comp}(j)} \\\\phi_j\\n  \\\\right)_K\\n  +\\n  \\\\left(\\n    \\\\mu \\\\nabla \\\\phi_i,\\n        \\\\nabla \\\\phi_j\\n  \\\\right)_K\\n  \\\\ \\\\delta_{\\\\text{comp}(i),\\\\text{comp}(j)}\\n  +\\n  \\\\left(\\n    \\\\mu \\\\partial_{\\\\text{comp}(j)} \\\\phi_i,\\n        \\\\partial_{\\\\text{comp}(i)} \\\\phi_j\\n  \\\\right)_K.\\n\\\\end{eqnarray*}\\n\\nLikewise, the contribution of cell \\\\(K\\\\) to the right hand side vector is                      \\n\\\\begin{eqnarray*}\\n  f^K_j\\n  &=&\\n  \\\\sum_l\\n  \\\\left(\\n    f_l,\\n    (\\\\Phi_j)_l\\n  \\\\right)_K\\n\\\\\\\\\\n  &=&\\n  \\\\sum_l\\n  \\\\left(\\n    f_l,\\n    \\\\phi_j \\\\delta_{l,\\\\text{comp}(j)}\\n  \\\\right)_K\\n\\\\\\\\\\n  &=&\\n  \\\\left(\\n    f_{\\\\text{comp}(j)},\\n    \\\\phi_j\\n  \\\\right)_K.\\n\\\\end{eqnarray*}\\n\\nThis is the form in which we will implement the local stiffness matrix and right hand side vectors.\\nAs a final note: in the step-17 example program, we will revisit the elastic problem laid out here, and will show how to solve it in parallel on a cluster of computers. The resulting program will thus be able to solve this problem to significantly higher accuracy, and more efficiently if this is required. In addition, in step-20, step-21, as well as a few other of the later tutorial programs, we will revisit some vector-valued problems and show a few techniques that may make it simpler to actually go through all the stuff shown above, with FiniteElement::system_to_component_index etc.\\n The commented program\\n Include files\\nAs usual, the first few include files are already known, so we will not comment on them further.\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 #include <deal.II/base/tensor.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/dynamic_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/precondition.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 #include <deal.II/grid/grid_refinement.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 #include <deal.II/numerics/error_estimator.h>\\n\\u00a0 \\nIn this example, we need vector-valued finite elements. The support for these can be found in the following include file :\\n\\u00a0 #include <deal.II/fe/fe_system.h>\\nWe will compose the vector-valued finite elements from regular Q1 elements which can be found here, as usual:\\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 \\nThis again is C++:\\n\\u00a0 #include <fstream>\\n\\u00a0 #include <iostream>\\n\\u00a0 \\nThe last step is as in previous programs. In particular, just like in step-7, we pack everything that's specific to this program into a namespace of its own.\\n\\u00a0 namespace Step8\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n The ElasticProblem class template\\nThe main class is, except for its name, almost unchanged with respect to the step-6 example.\\nThe only change is the use of a different class for the fe variable: Instead of a concrete finite element class such as FE_Q, we now use a more generic one, FESystem. In fact, FESystem is not really a finite element itself in that it does not implement shape functions of its own. Rather, it is a class that can be used to stack several other elements together to form one vector-valued finite element. In our case, we will compose the vector-valued element of FE_Q(1) objects, as shown below in the constructor of this class.\\n\\u00a0   template <int dim>\\n\\u00a0   class ElasticProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     ElasticProblem();\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void setup_system();\\n\\u00a0     void assemble_system();\\n\\u00a0     void solve();\\n\\u00a0     void refine_grid();\\n\\u00a0     void output_results(const unsigned int cycle) const;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     DoFHandler<dim>    dof_handler;\\n\\u00a0 \\n\\u00a0     const FESystem<dim> fe;\\n\\u00a0 \\n\\u00a0     AffineConstraints<double> constraints;\\n\\u00a0 \\n\\u00a0     SparsityPattern      sparsity_pattern;\\n\\u00a0     SparseMatrix<double> system_matrix;\\n\\u00a0 \\n\\u00a0     Vector<double> solution;\\n\\u00a0     Vector<double> system_rhs;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nDoFHandlerDefinition dof_handler.h:317\\nFESystemDefinition fe_system.h:208\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nTriangulationDefinition tria.h:1323\\nVectorDefinition vector.h:120\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n Right hand side values\\nBefore going over to the implementation of the main class, we declare and define the function which describes the right hand side. This time, the right hand side is vector-valued, as is the solution, so we will describe the changes required for this in some more detail.\\nTo prevent cases where the return vector has not previously been set to the right size we test for this case and otherwise throw an exception at the beginning of the function. This could be done by writing Assert (values.size() == points.size(), some exception text), but because checking for the equality in the sizes of two objects is such a common operation, there is a short-cut: AssertDimension. The operation behind this command is that it compares the two given sizes and, if they are not equal, aborts the program with a suitable error message that we don't have to write from scratch in all of the places where we want to have this kind of check. (As for the other Assert variations, the check is removed in optimized mode.) Note that enforcing that output arguments already have the correct size is a convention in deal.II, and enforced almost everywhere. The reason is that we would otherwise have to check at the beginning of the function and possibly change the size of the output vector. This is expensive, and would almost always be unnecessary (the first call to the function would set the vector to the right size, and subsequent calls would only have to do redundant checks). In addition, checking and possibly resizing the vector is an operation that can not be removed if we can't rely on the assumption that the vector already has the correct size; this is in contrast to the call to Assert that is completely removed if the program is compiled in optimized mode.\\nLikewise, if by some accident someone tried to compile and run the program in only one space dimension (in which the elastic equations do not make much sense since they reduce to the ordinary Laplace equation), we terminate the program in the second assertion. The program will work just fine in 3d, however.\\n\\u00a0   template <int dim>\\n\\u00a0   void right_hand_side(const std::vector<Point<dim>> &points,\\n\\u00a0                        std::vector<Tensor<1, dim>>   &values)\\n\\u00a0   {\\n\\u00a0     AssertDimension(values.size(), points.size());\\n\\u00a0     Assert(dim >= 2, ExcNotImplemented());\\n\\u00a0 \\nPointDefinition point.h:111\\nTensorDefinition tensor.h:471\\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\nAssertDimension#define AssertDimension(dim1, dim2)Definition exceptions.h:1985\\nThe rest of the function implements computing force values. We will use a constant (unit) force in x-direction located in two little circles (or spheres, in 3d) around points (0.5,0) and (-0.5,0), and y-force in an area around the origin; in 3d, the z-component of these centers is zero as well.\\nFor this, let us first define two objects that denote the centers of these areas. Note that upon construction of the Point objects, all components are set to zero.\\n\\u00a0     Point<dim> point_1, point_2;\\n\\u00a0     point_1[0] = 0.5;\\n\\u00a0     point_2[0] = -0.5;\\n\\u00a0 \\n\\u00a0     for (unsigned int point_n = 0; point_n < points.size(); ++point_n)\\n\\u00a0       {\\nIf points[point_n] is in a circle (sphere) of radius 0.2 around one of these points, then set the force in x-direction to one, otherwise to zero:\\n\\u00a0         if (((points[point_n] - point_1).norm_square() < 0.2 * 0.2) ||\\n\\u00a0             ((points[point_n] - point_2).norm_square() < 0.2 * 0.2))\\n\\u00a0           values[point_n][0] = 1.0;\\n\\u00a0         else\\n\\u00a0           values[point_n][0] = 0.0;\\n\\u00a0 \\nLikewise, if points[point_n] is in the vicinity of the origin, then set the y-force to one, otherwise to zero:\\n\\u00a0         if (points[point_n].norm_square() < 0.2 * 0.2)\\n\\u00a0           values[point_n][1] = 1.0;\\n\\u00a0         else\\n\\u00a0           values[point_n][1] = 0.0;\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n The ElasticProblem class implementation\\n ElasticProblem::ElasticProblem constructor\\nFollowing is the constructor of the main class. As said before, we would like to construct a vector-valued finite element that is composed of several scalar finite elements (i.e., we want to build the vector-valued element so that each of its vector components consists of the shape functions of a scalar element). Of course, the number of scalar finite elements we would like to stack together equals the number of components the solution function has, which is dim since we consider displacement in each space direction. The FESystem class can handle this: we pass it the finite element of which we would like to compose the system of, and how often to repeat it. There are different ways to tell the FESystem constructor how to do this, but the one that is closest to mathematical notation is to write out what we want to do mathematically: We want to construct the finite element space \\\\(Q_1^d\\\\) where the index 1 corresponds to the polynomial degree and the exponent \\\\(d\\\\) to the space dimension \\u2013 because the displacement we try to simulate here is a vector with exactly \\\\(d\\\\) components. The FESystem class then lets us create this space by initialization with FE_Q<dim>(1)^dim, emulating the mathematical notation.\\n(We could also have written fe(FE_Q<dim>(1), dim), which would simply have called a different constructor of the FESystem class that first takes the \\\"base element\\\" and then a \\\"multiplicity\\\", i.e., a number that indicates how many times the base element is to be repeated. The two ways of writing things are entirely equivalent; we choose the one that is closer to mathematical notation.)\\n\\u00a0   template <int dim>\\n\\u00a0   ElasticProblem<dim>::ElasticProblem()\\n\\u00a0     : dof_handler(triangulation)\\n\\u00a0     , fe(FE_Q<dim>(1) ^ dim)\\n\\u00a0   {}\\nFE_QDefinition fe_q.h:554\\nIn fact, the FESystem class has several more constructors which can perform more complex operations than just stacking together several scalar finite elements of the same type into one; we will get to know these possibilities in later examples.\\n ElasticProblem::setup_system\\nSetting up the system of equations is identical to the function used in the step-6 example. The DoFHandler class and all other classes used here are fully aware that the finite element we want to use is vector-valued, and take care of the vector-valuedness of the finite element themselves. (In fact, they do not, but this does not need to bother you: since they only need to know how many degrees of freedom there are per vertex, line and cell, and they do not ask what they represent, i.e. whether the finite element under consideration is vector-valued or whether it is, for example, a scalar Hermite element with several degrees of freedom on each vertex).\\n\\u00a0   template <int dim>\\n\\u00a0   void ElasticProblem<dim>::setup_system()\\n\\u00a0   {\\n\\u00a0     dof_handler.distribute_dofs(fe);\\n\\u00a0     solution.reinit(dof_handler.n_dofs());\\n\\u00a0     system_rhs.reinit(dof_handler.n_dofs());\\n\\u00a0 \\n\\u00a0     constraints.clear();\\n\\u00a0     DoFTools::make_hanging_node_constraints(dof_handler, constraints);\\n\\u00a0     VectorTools::interpolate_boundary_values(dof_handler,\\n\\u00a0                                              types::boundary_id(0),\\n\\u00a0                                              Functions::ZeroFunction<dim>(dim),\\n\\u00a0                                              constraints);\\n\\u00a0     constraints.close();\\n\\u00a0 \\n\\u00a0     DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n\\u00a0     DoFTools::make_sparsity_pattern(dof_handler,\\n\\u00a0                                     dsp,\\n\\u00a0                                     constraints,\\n\\u00a0                                     /*keep_constrained_dofs = */ false);\\n\\u00a0     sparsity_pattern.copy_from(dsp);\\n\\u00a0 \\n\\u00a0     system_matrix.reinit(sparsity_pattern);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nFunctions::ZeroFunctionDefinition function.h:510\\nunsigned int\\nDoFTools::make_hanging_node_constraintsvoid make_hanging_node_constraints(const DoFHandler< dim, spacedim > &dof_handler, AffineConstraints< number > &constraints)Definition dof_tools_constraints.cc:3073\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nVectorTools::interpolate_boundary_valuesvoid interpolate_boundary_values(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const std::map< types::boundary_id, const Function< spacedim, number > * > &function_map, std::map< types::global_dof_index, number > &boundary_values, const ComponentMask &component_mask={})\\n ElasticProblem::assemble_system\\nThe big changes in this program are in the creation of matrix and right hand side, since they are problem-dependent. We will go through that process step-by-step, since it is a bit more complicated than in previous examples.\\nThe first parts of this function are the same as before, however: setting up a suitable quadrature formula, initializing an FEValues object for the (vector-valued) finite element we use as well as the quadrature object, and declaring a number of auxiliary arrays. In addition, we declare the ever same two abbreviations: n_q_points and dofs_per_cell. The number of degrees of freedom per cell we now obviously ask from the composed finite element rather than from the underlying scalar Q1 element. Here, it is dim times the number of degrees of freedom per cell of the Q1 element, though this is not explicit knowledge we need to care about:\\n\\u00a0   template <int dim>\\n\\u00a0   void ElasticProblem<dim>::assemble_system()\\n\\u00a0   {\\n\\u00a0     const QGauss<dim> quadrature_formula(fe.degree + 1);\\n\\u00a0 \\n\\u00a0     FEValues<dim> fe_values(fe,\\n\\u00a0                             quadrature_formula,\\n\\u00a0                             update_values | update_gradients |\\n\\u00a0                               update_quadrature_points | update_JxW_values);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0     Vector<double>     cell_rhs(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\nFEValuesDefinition fe_values.h:63\\nFullMatrixDefinition full_matrix.h:79\\nQGaussDefinition quadrature_lib.h:40\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nAs was shown in previous examples as well, we need a place where to store the values of the coefficients at all the quadrature points on a cell. In the present situation, we have two coefficients, lambda and mu.\\n\\u00a0     std::vector<double> lambda_values(n_q_points);\\n\\u00a0     std::vector<double> mu_values(n_q_points);\\n\\u00a0 \\nWell, we could as well have omitted the above two arrays since we will use constant coefficients for both lambda and mu, which can be declared like this. They both represent functions always returning the constant value 1.0. Although we could omit the respective factors in the assemblage of the matrix, we use them here for purpose of demonstration.\\n\\u00a0     Functions::ConstantFunction<dim> lambda(1.), mu(1.);\\n\\u00a0 \\nFunctions::ConstantFunctionDefinition function.h:410\\nLike the two constant functions above, we will call the function right_hand_side just once per cell to make things simpler.\\n\\u00a0     std::vector<Tensor<1, dim>> rhs_values(n_q_points);\\n\\u00a0 \\nNow we can begin with the loop over all cells:\\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0 \\n\\u00a0         cell_matrix = 0;\\n\\u00a0         cell_rhs    = 0;\\n\\u00a0 \\nNext we get the values of the coefficients at the quadrature points. Likewise for the right hand side:\\n\\u00a0         lambda.value_list(fe_values.get_quadrature_points(), lambda_values);\\n\\u00a0         mu.value_list(fe_values.get_quadrature_points(), mu_values);\\n\\u00a0         right_hand_side(fe_values.get_quadrature_points(), rhs_values);\\n\\u00a0 \\nThen assemble the entries of the local stiffness matrix and right hand side vector. This follows almost one-to-one the pattern described in the introduction of this example. One of the few comments in place is that we can compute the number comp(i), i.e. the index of the only nonzero vector component of shape function i using the fe.system_to_component_index(i).first function call below.\\n(By accessing the first variable of the return value of the system_to_component_index function, you might already have guessed that there is more in it. In fact, the function returns a std::pair<unsigned int, unsigned int>, of which the first element is comp(i) and the second is the value base(i) also noted in the introduction, i.e. the index of this shape function within all the shape functions that are nonzero in this component, i.e. base(i) in the diction of the introduction. This is not a number that we are usually interested in, however.)\\nWith this knowledge, we can assemble the local matrix contributions:\\n\\u00a0         for (const unsigned int i : fe_values.dof_indices())\\n\\u00a0           {\\n\\u00a0             const unsigned int component_i =\\n\\u00a0               fe.system_to_component_index(i).first;\\n\\u00a0 \\n\\u00a0             for (const unsigned int j : fe_values.dof_indices())\\n\\u00a0               {\\n\\u00a0                 const unsigned int component_j =\\n\\u00a0                   fe.system_to_component_index(j).first;\\n\\u00a0 \\n\\u00a0                 for (const unsigned int q_point :\\n\\u00a0                      fe_values.quadrature_point_indices())\\n\\u00a0                   {\\n\\u00a0                     cell_matrix(i, j) +=\\nint\\nfirstPoint< 2 > firstDefinition grid_out.cc:4623\\nThe first term is  \\\\((\\\\lambda \\\\partial_i u_i, \\\\partial_j\\n   v_j) + (\\\\mu \\\\partial_i u_j, \\\\partial_j v_i)\\\\). Note that shape_grad(i,q_point) returns the gradient of the only nonzero component of the i-th shape function at quadrature point q_point. The component comp(i) of the gradient, which is the derivative of this only nonzero vector component of the i-th shape function with respect to the comp(i)th coordinate is accessed by the appended brackets.\\n\\u00a0                       (                                                  \\n\\u00a0                         (fe_values.shape_grad(i, q_point)[component_i] * \\n\\u00a0                          fe_values.shape_grad(j, q_point)[component_j] * \\n\\u00a0                          lambda_values[q_point])                         \\n\\u00a0                         +                                                \\n\\u00a0                         (fe_values.shape_grad(i, q_point)[component_j] * \\n\\u00a0                          fe_values.shape_grad(j, q_point)[component_i] * \\n\\u00a0                          mu_values[q_point])                             \\n\\u00a0                         +                                                \\nThe second term is  \\\\((\\\\mu \\\\nabla u_i, \\\\nabla\\n   v_j)\\\\). We need not access a specific component of the gradient, since we only have to compute the scalar product of the two gradients, of which an overloaded version of operator* takes care, as in previous examples.\\nNote that by using the ?: operator, we only do this if component_i equals component_j, otherwise a zero is added (which will be optimized away by the compiler).\\n\\u00a0                         ((component_i == component_j) ?        \\n\\u00a0                            (fe_values.shape_grad(i, q_point) * \\n\\u00a0                             fe_values.shape_grad(j, q_point) * \\n\\u00a0                             mu_values[q_point]) :              \\n\\u00a0                            0)                                  \\n\\u00a0                         ) *                                    \\n\\u00a0                       fe_values.JxW(q_point);                  \\n\\u00a0                   }\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0 \\nAssembling the right hand side is also just as discussed in the introduction:\\n\\u00a0         for (const unsigned int i : fe_values.dof_indices())\\n\\u00a0           {\\n\\u00a0             const unsigned int component_i =\\n\\u00a0               fe.system_to_component_index(i).first;\\n\\u00a0 \\n\\u00a0             for (const unsigned int q_point :\\n\\u00a0                  fe_values.quadrature_point_indices())\\n\\u00a0               cell_rhs(i) += fe_values.shape_value(i, q_point) *\\n\\u00a0                              rhs_values[q_point][component_i] *\\n\\u00a0                              fe_values.JxW(q_point);\\n\\u00a0           }\\n\\u00a0 \\nThe transfer from local degrees of freedom into the global matrix and right hand side vector does not depend on the equation under consideration, and is thus the same as in all previous examples.\\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0         constraints.distribute_local_to_global(\\n\\u00a0           cell_matrix, cell_rhs, local_dof_indices, system_matrix, system_rhs);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n ElasticProblem::solve\\nThe solver does not care about where the system of equations comes from, as long as it is positive definite and symmetric (which are the requirements for the use of the CG solver), which the system indeed is. Therefore, we need not change anything.\\n\\u00a0   template <int dim>\\n\\u00a0   void ElasticProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     SolverControl            solver_control(1000, 1e-6 * system_rhs.l2_norm());\\n\\u00a0     SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0 \\n\\u00a0     PreconditionSSOR<SparseMatrix<double>> preconditioner;\\n\\u00a0     preconditioner.initialize(system_matrix, 1.2);\\n\\u00a0 \\n\\u00a0     cg.solve(system_matrix, solution, system_rhs, preconditioner);\\n\\u00a0 \\n\\u00a0     constraints.distribute(solution);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nPreconditionSSORDefinition precondition.h:1778\\nPreconditionSSOR::initializevoid initialize(const MatrixType &A, const AdditionalData &parameters=AdditionalData())\\nSolverCGDefinition solver_cg.h:179\\nSolverControlDefinition solver_control.h:67\\n ElasticProblem::refine_grid\\nThe function that does the refinement of the grid is the same as in the step-6 example. The quadrature formula is adapted to the linear elements again. Note that the error estimator by default adds up the estimated obtained from all components of the finite element solution, i.e., it uses the displacement in all directions with the same weight. If we would like the grid to be adapted to the x-displacement only, we could pass the function an additional parameter which tells it to do so and do not consider the displacements in all other directions for the error indicators. However, for the current problem, it seems appropriate to consider all displacement components with equal weight.\\n\\u00a0   template <int dim>\\n\\u00a0   void ElasticProblem<dim>::refine_grid()\\n\\u00a0   {\\n\\u00a0     Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n\\u00a0 \\n\\u00a0     KellyErrorEstimator<dim>::estimate(dof_handler,\\n\\u00a0                                        QGauss<dim - 1>(fe.degree + 1),\\n\\u00a0                                        {},\\n\\u00a0                                        solution,\\n\\u00a0                                        estimated_error_per_cell);\\n\\u00a0 \\n\\u00a0     GridRefinement::refine_and_coarsen_fixed_number(triangulation,\\n\\u00a0                                                     estimated_error_per_cell,\\n\\u00a0                                                     0.3,\\n\\u00a0                                                     0.03);\\n\\u00a0 \\n\\u00a0     triangulation.execute_coarsening_and_refinement();\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nKellyErrorEstimator::estimatestatic void estimate(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim - 1 > &quadrature, const std::map< types::boundary_id, const Function< spacedim, Number > * > &neumann_bc, const ReadVector< Number > &solution, Vector< float > &error, const ComponentMask &component_mask={}, const Function< spacedim > *coefficients=nullptr, const unsigned int n_threads=numbers::invalid_unsigned_int, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id, const types::material_id material_id=numbers::invalid_material_id, const Strategy strategy=cell_diameter_over_24)\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nparallel::distributed::Triangulation::execute_coarsening_and_refinementvirtual void execute_coarsening_and_refinement() overrideDefinition tria.cc:3320\\nGridRefinement::refine_and_coarsen_fixed_numbervoid refine_and_coarsen_fixed_number(Triangulation< dim, spacedim > &triangulation, const Vector< Number > &criteria, const double top_fraction_of_cells, const double bottom_fraction_of_cells, const unsigned int max_n_cells=std::numeric_limits< unsigned int >::max())Definition grid_refinement.cc:318\\n ElasticProblem::output_results\\nThe output happens mostly as has been shown in previous examples already. The only difference is that the solution function is vector valued. The DataOut class takes care of this automatically, but we have to give each component of the solution vector a different name.\\nTo do this, the DataOut::add_vector() function wants a vector of strings. Since the number of components is the same as the number of dimensions we are working in, we use the switch statement below.\\nWe note that some graphics programs have restriction on what characters are allowed in the names of variables. deal.II therefore supports only the minimal subset of these characters that is supported by all programs. Basically, these are letters, numbers, underscores, and some other characters, but in particular no whitespace and minus/hyphen. The library will throw an exception otherwise, at least if in debug mode.\\nAfter listing the 1d, 2d, and 3d case, it is good style to let the program die if we run into a case which we did not consider. You have previously already seen the use of the Assert macro that generates aborts the program with an error message if a condition is not satisfied (see step-5, for example). We could use this in the default case below, in the form Assert(false, ExcNotImplemented()) \\u2013 in other words, the \\\"condition\\\" here is always false, and so the assertion always fails and always aborts the program whenever it gets to the default statement. This is perhaps more difficult to read than necessary, and consequently there is a short-cut: DEAL_II_NOT_IMPLEMENTED(). It does the same as the form above (with the minor difference that it also aborts the program in release mode). It is written in all-caps because that makes it stand out visually (and also because it is not actually a function, but a macro).\\n\\u00a0   template <int dim>\\n\\u00a0   void ElasticProblem<dim>::output_results(const unsigned int cycle) const\\n\\u00a0   {\\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0     data_out.attach_dof_handler(dof_handler);\\n\\u00a0 \\n\\u00a0     std::vector<std::string> solution_names;\\n\\u00a0     switch (dim)\\n\\u00a0       {\\n\\u00a0         case 1:\\n\\u00a0           solution_names.emplace_back(\\\"displacement\\\");\\n\\u00a0           break;\\n\\u00a0         case 2:\\n\\u00a0           solution_names.emplace_back(\\\"x_displacement\\\");\\n\\u00a0           solution_names.emplace_back(\\\"y_displacement\\\");\\n\\u00a0           break;\\n\\u00a0         case 3:\\n\\u00a0           solution_names.emplace_back(\\\"x_displacement\\\");\\n\\u00a0           solution_names.emplace_back(\\\"y_displacement\\\");\\n\\u00a0           solution_names.emplace_back(\\\"z_displacement\\\");\\n\\u00a0           break;\\n\\u00a0         default:\\n\\u00a0           DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0       }\\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nDEAL_II_NOT_IMPLEMENTED#define DEAL_II_NOT_IMPLEMENTED()Definition exceptions.h:1814\\nAfter setting up the names for the different components of the solution vector, we can add the solution vector to the list of data vectors scheduled for output. Note that the following function takes a vector of strings as second argument, whereas the one which we have used in all previous examples accepted a string there. (In fact, the function we had used before would convert the single string into a vector with only one element and forwards that to the other function.)\\n\\u00a0     data_out.add_data_vector(solution, solution_names);\\n\\u00a0     data_out.build_patches();\\n\\u00a0 \\n\\u00a0     std::ofstream output(\\\"solution-\\\" + std::to_string(cycle) + \\\".vtk\\\");\\n\\u00a0     data_out.write_vtk(output);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n ElasticProblem::run\\nThe run function does the same things as in step-6, for example. This time, we use the square [-1,1]^d as domain, and we refine it globally four times before starting the first iteration.\\nThe reason for refining is a bit accidental: we use the QGauss quadrature formula with two points in each direction for integration of the right hand side; that means that there are four quadrature points on each cell (in 2d). If we only refine the initial grid once globally, then there will be only four quadrature points in each direction on the domain. However, the right hand side function was chosen to be rather localized and in that case, by pure chance, it happens that all quadrature points lie at points where the right hand side function is zero (in mathematical terms, the quadrature points happen to be at points outside the support of the right hand side function). The right hand side vector computed with quadrature will then contain only zeroes (even though it would of course be nonzero if we had computed the right hand side vector exactly using the integral) and the solution of the system of equations is the zero vector, i.e., a finite element function that is zero everywhere. In a sense, we should not be surprised that this is happening since we have chosen an initial grid that is totally unsuitable for the problem at hand.\\nThe unfortunate thing is that if the discrete solution is constant, then the error indicators computed by the KellyErrorEstimator class are zero for each cell as well, and the call to Triangulation::refine_and_coarsen_fixed_number() will not flag any cells for refinement (why should it if the indicated error is zero for each cell?). The grid in the next iteration will therefore consist of four cells only as well, and the same problem occurs again.\\nThe conclusion needs to be: while of course we will not choose the initial grid to be well-suited for the accurate solution of the problem, we must at least choose it such that it has the chance to capture the important features of the solution. In this case, it needs to be able to see the right hand side. Thus, we refine globally four times. (Any larger number of global refinement steps would of course also work.)\\n\\u00a0   template <int dim>\\n\\u00a0   void ElasticProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     for (unsigned int cycle = 0; cycle < 8; ++cycle)\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Cycle \\\" << cycle << ':' << std::endl;\\n\\u00a0 \\n\\u00a0         if (cycle == 0)\\n\\u00a0           {\\n\\u00a0             GridGenerator::hyper_cube(triangulation, -1, 1);\\n\\u00a0             triangulation.refine_global(4);\\n\\u00a0           }\\n\\u00a0         else\\n\\u00a0           refine_grid();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Number of active cells:       \\\"\\n\\u00a0                   << triangulation.n_active_cells() << std::endl;\\n\\u00a0 \\n\\u00a0         setup_system();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n\\u00a0                   << std::endl;\\n\\u00a0 \\n\\u00a0         assemble_system();\\n\\u00a0         solve();\\n\\u00a0         output_results(cycle);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 } // namespace Step8\\n\\u00a0 \\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\n The main function\\nAfter closing the Step8 namespace in the last line above, the following is the main function of the program and is again exactly like in step-6 (apart from the changed class names, of course).\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       Step8::ElasticProblem<2> elastic_problem_2d;\\n\\u00a0       elastic_problem_2d.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\n Results\\nThere is not much to be said about the results of this program, other than that they look nice. All images were made using VisIt from the output files that the program wrote to disk. The first two pictures show the \\\\(x\\\\)- and \\\\(y\\\\)-displacements as scalar components:\\n\\n\\n  \\n\\nYou can clearly see the sources of \\\\(x\\\\)-displacement around \\\\(x=0.5\\\\) and \\\\(x=-0.5\\\\), and of \\\\(y\\\\)-displacement at the origin.\\nWhat one frequently would like to do is to show the displacement as a vector field, i.e., vectors that for each point illustrate the direction and magnitude of displacement. Unfortunately, that's a bit more involved. To understand why this is so, remember that we have just defined our finite element as a collection of two components (in dim=2 dimensions). Nowhere have we said that this is not just a pressure and a concentration (two scalar quantities) but that the two components actually are the parts of a vector-valued quantity, namely the displacement. Absent this knowledge, the DataOut class assumes that all individual variables we print are separate scalars, and VisIt and Paraview then faithfully assume that this is indeed what it is. In other words, once we have written the data as scalars, there is nothing in these programs that allows us to paste these two scalar fields back together as a vector field. Where we would have to attack this problem is at the root, namely in ElasticProblem::output_results(). We won't do so here but instead refer the reader to the step-22 program where we show how to do this for a more general situation. That said, we couldn't help generating the data anyway that would show how this would look if implemented as discussed in step-22. The vector field then looks like this (VisIt and Paraview randomly select a few hundred vertices from which to draw the vectors; drawing them from each individual vertex would make the picture unreadable):\\n\\nWe note that one may have intuitively expected the solution to be symmetric about the \\\\(x\\\\)- and \\\\(y\\\\)-axes since the \\\\(x\\\\)- and \\\\(y\\\\)-forces are symmetric with respect to these axes. However, the force considered as a vector is not symmetric and consequently neither is the solution.\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2000 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n */\\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n#include <deal.II/base/tensor.h>\\n \\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/precondition.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n#include <deal.II/grid/grid_refinement.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/fe/fe_values.h>\\n \\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n#include <deal.II/numerics/error_estimator.h>\\n \\n#include <deal.II/fe/fe_system.h>\\n#include <deal.II/fe/fe_q.h>\\n \\n#include <fstream>\\n#include <iostream>\\n \\nnamespace Step8\\n{\\n using namespace dealii;\\n \\n \\n template <int dim>\\n class ElasticProblem\\n  {\\n public:\\n    ElasticProblem();\\n void run();\\n \\n private:\\n void setup_system();\\n void assemble_system();\\n void solve();\\n void refine_grid();\\n void output_results(const unsigned int cycle) const;\\n \\n Triangulation<dim> triangulation;\\n DoFHandler<dim>    dof_handler;\\n \\n const FESystem<dim> fe;\\n \\n AffineConstraints<double> constraints;\\n \\n SparsityPattern      sparsity_pattern;\\n SparseMatrix<double> system_matrix;\\n \\n Vector<double> solution;\\n Vector<double> system_rhs;\\n  };\\n \\n \\n \\n template <int dim>\\n void right_hand_side(const std::vector<Point<dim>> &points,\\n                       std::vector<Tensor<1, dim>>   &values)\\n  {\\n AssertDimension(values.size(), points.size());\\n Assert(dim >= 2, ExcNotImplemented());\\n \\n Point<dim> point_1, point_2;\\n    point_1[0] = 0.5;\\n    point_2[0] = -0.5;\\n \\n for (unsigned int point_n = 0; point_n < points.size(); ++point_n)\\n      {\\n if (((points[point_n] - point_1).norm_square() < 0.2 * 0.2) ||\\n            ((points[point_n] - point_2).norm_square() < 0.2 * 0.2))\\n          values[point_n][0] = 1.0;\\n else\\n          values[point_n][0] = 0.0;\\n \\n if (points[point_n].norm_square() < 0.2 * 0.2)\\n          values[point_n][1] = 1.0;\\n else\\n          values[point_n][1] = 0.0;\\n      }\\n  }\\n \\n \\n \\n \\n \\n template <int dim>\\n  ElasticProblem<dim>::ElasticProblem()\\n    : dof_handler(triangulation)\\n    , fe(FE_Q<dim>(1) ^ dim)\\n  {}\\n \\n \\n \\n template <int dim>\\n void ElasticProblem<dim>::setup_system()\\n  {\\n    dof_handler.distribute_dofs(fe);\\n    solution.reinit(dof_handler.n_dofs());\\n    system_rhs.reinit(dof_handler.n_dofs());\\n \\n    constraints.clear();\\n DoFTools::make_hanging_node_constraints(dof_handler, constraints);\\n VectorTools::interpolate_boundary_values(dof_handler,\\n types::boundary_id(0),\\n Functions::ZeroFunction<dim>(dim),\\n                                             constraints);\\n    constraints.close();\\n \\n DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler,\\n                                    dsp,\\n                                    constraints,\\n /*keep_constrained_dofs = */ false);\\n    sparsity_pattern.copy_from(dsp);\\n \\n    system_matrix.reinit(sparsity_pattern);\\n  }\\n \\n \\n \\n template <int dim>\\n void ElasticProblem<dim>::assemble_system()\\n  {\\n const QGauss<dim> quadrature_formula(fe.degree + 1);\\n \\n FEValues<dim> fe_values(fe,\\n                            quadrature_formula,\\n update_values | update_gradients |\\n update_quadrature_points | update_JxW_values);\\n \\n const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n FullMatrix<double> cell_matrix(dofs_per_cell, dofs_per_cell);\\n Vector<double>     cell_rhs(dofs_per_cell);\\n \\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n    std::vector<double> lambda_values(n_q_points);\\n    std::vector<double> mu_values(n_q_points);\\n \\n Functions::ConstantFunction<dim> lambda(1.), mu(1.);\\n \\n    std::vector<Tensor<1, dim>> rhs_values(n_q_points);\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        fe_values.reinit(cell);\\n \\n cell_matrix = 0;\\n        cell_rhs    = 0;\\n \\n lambda.value_list(fe_values.get_quadrature_points(), lambda_values);\\n        mu.value_list(fe_values.get_quadrature_points(), mu_values);\\n        right_hand_side(fe_values.get_quadrature_points(), rhs_values);\\n \\n for (const unsigned int i : fe_values.dof_indices())\\n          {\\n const unsigned int component_i =\\n              fe.system_to_component_index(i).first;\\n \\n for (const unsigned int j : fe_values.dof_indices())\\n              {\\n const unsigned int component_j =\\n                  fe.system_to_component_index(j).first;\\n \\n for (const unsigned int q_point :\\n                     fe_values.quadrature_point_indices())\\n                  {\\n cell_matrix(i, j) +=\\n                      (                                                  \\n                        (fe_values.shape_grad(i, q_point)[component_i] * \\n                         fe_values.shape_grad(j, q_point)[component_j] * \\n                         lambda_values[q_point])                         \\n                        +                                                \\n                        (fe_values.shape_grad(i, q_point)[component_j] * \\n                         fe_values.shape_grad(j, q_point)[component_i] * \\n                         mu_values[q_point])                             \\n                        +                                                \\n                        ((component_i == component_j) ?        \\n                           (fe_values.shape_grad(i, q_point) * \\n                            fe_values.shape_grad(j, q_point) * \\n                            mu_values[q_point]) :              \\n                           0)                                  \\n                        ) *                                    \\n                      fe_values.JxW(q_point);                  \\n                  }\\n              }\\n          }\\n \\n for (const unsigned int i : fe_values.dof_indices())\\n          {\\n const unsigned int component_i =\\n              fe.system_to_component_index(i).first;\\n \\n for (const unsigned int q_point :\\n                 fe_values.quadrature_point_indices())\\n              cell_rhs(i) += fe_values.shape_value(i, q_point) *\\n                             rhs_values[q_point][component_i] *\\n                             fe_values.JxW(q_point);\\n          }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n        constraints.distribute_local_to_global(\\n          cell_matrix, cell_rhs, local_dof_indices, system_matrix, system_rhs);\\n      }\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void ElasticProblem<dim>::solve()\\n  {\\n SolverControl            solver_control(1000, 1e-6 * system_rhs.l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n \\n PreconditionSSOR<SparseMatrix<double>> preconditioner;\\n    preconditioner.initialize(system_matrix, 1.2);\\n \\n    cg.solve(system_matrix, solution, system_rhs, preconditioner);\\n \\n    constraints.distribute(solution);\\n  }\\n \\n \\n \\n template <int dim>\\n void ElasticProblem<dim>::refine_grid()\\n  {\\n Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n \\n KellyErrorEstimator<dim>::estimate(dof_handler,\\n QGauss<dim - 1>(fe.degree + 1),\\n                                       {},\\n                                       solution,\\n                                       estimated_error_per_cell);\\n \\n GridRefinement::refine_and_coarsen_fixed_number(triangulation,\\n                                                    estimated_error_per_cell,\\n                                                    0.3,\\n                                                    0.03);\\n \\n triangulation.execute_coarsening_and_refinement();\\n  }\\n \\n \\n \\n template <int dim>\\n void ElasticProblem<dim>::output_results(const unsigned int cycle) const\\n {\\n DataOut<dim> data_out;\\n    data_out.attach_dof_handler(dof_handler);\\n \\n    std::vector<std::string> solution_names;\\n switch (dim)\\n      {\\n case 1:\\n          solution_names.emplace_back(\\\"displacement\\\");\\n break;\\n case 2:\\n          solution_names.emplace_back(\\\"x_displacement\\\");\\n          solution_names.emplace_back(\\\"y_displacement\\\");\\n break;\\n case 3:\\n          solution_names.emplace_back(\\\"x_displacement\\\");\\n          solution_names.emplace_back(\\\"y_displacement\\\");\\n          solution_names.emplace_back(\\\"z_displacement\\\");\\n break;\\n default:\\n DEAL_II_NOT_IMPLEMENTED();\\n      }\\n \\n    data_out.add_data_vector(solution, solution_names);\\n    data_out.build_patches();\\n \\n    std::ofstream output(\\\"solution-\\\" + std::to_string(cycle) + \\\".vtk\\\");\\n    data_out.write_vtk(output);\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void ElasticProblem<dim>::run()\\n  {\\n for (unsigned int cycle = 0; cycle < 8; ++cycle)\\n      {\\n        std::cout << \\\"Cycle \\\" << cycle << ':' << std::endl;\\n \\n if (cycle == 0)\\n          {\\n GridGenerator::hyper_cube(triangulation, -1, 1);\\n triangulation.refine_global(4);\\n          }\\n else\\n          refine_grid();\\n \\n        std::cout << \\\"   Number of active cells:       \\\"\\n                  << triangulation.n_active_cells() << std::endl;\\n \\n        setup_system();\\n \\n        std::cout << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n                  << std::endl;\\n \\n        assemble_system();\\n        solve();\\n        output_results(cycle);\\n      }\\n  }\\n} // namespace Step8\\n \\n \\nint main()\\n{\\n try\\n    {\\n      Step8::ElasticProblem<2> elastic_problem_2d;\\n      elastic_problem_2d.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nDataOutInterface::write_vtkvoid write_vtk(std::ostream &out) constDefinition data_out_base.cc:7681\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\ndof_handler.h\\ndof_tools.h\\ndynamic_sparsity_pattern.h\\nerror_estimator.h\\nfe_values.h\\nfe_q.h\\nfe_system.h\\nfull_matrix.h\\nfunction.h\\ngrid_refinement.h\\ntria.h\\ngrid_generator.h\\nDifferentiation::SD::OptimizerType::lambda@ lambda\\nLocalIntegrators::Advection::cell_matrixvoid cell_matrix(FullMatrix< double > &M, const FEValuesBase< dim > &fe, const FEValuesBase< dim > &fetest, const ArrayView< const std::vector< double > > &velocity, const double factor=1.)Definition advection.h:74\\ndata_out.h\\nprecondition.h\\nquadrature_lib.h\\nsolver_cg.h\\nsparse_matrix.h\\ntensor.h\\nvector.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"