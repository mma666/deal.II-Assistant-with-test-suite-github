"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_23.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-23 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-23 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-23 tutorial program\\n\\n\\nThis tutorial depends on step-4.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\nTime discretization\\n\\nMethod of lines or Rothe's method?\\nRothe's method!\\n\\nSpace discretization\\nEnergy conservation\\nWho are Courant, Friedrichs, and Lewy?\\nThe test case\\n\\n The commented program\\n\\nInclude files\\nThe WaveEquation class\\nEquation data\\nImplementation of the WaveEquation class\\n\\nWaveEquation::setup_system\\nWaveEquation::solve_u and WaveEquation::solve_v\\nWaveEquation::output_results\\nWaveEquation::run\\n\\nThe main function\\n\\n\\n Results\\n\\nPossibilities for extensions\\n\\n The plain program\\n   \\n Introduction\\nNoteThe material presented here is also discussed in video lecture 28. (All video lectures are also available here.)\\nThis is the first of a number of tutorial programs that will finally cover \\\"real\\\" time-dependent problems, not the slightly odd form of time dependence found in step-18 or the DAE model of step-21. In particular, this program introduces the wave equation in a bounded domain. Later, step-24 will consider an example of absorbing boundary conditions, and step-25 a kind of nonlinear wave equation producing solutions called solitons.\\nThe wave equation in its prototypical form reads as follows: find \\\\(u(x,t), x\\\\in\\\\Omega, t\\\\in[0,T]\\\\) that satisfies                   \\n\\\\begin{eqnarray*}\\n        \\\\frac{\\\\partial^2 u}{\\\\partial t^2}\\n        -\\n        \\\\Delta u &=& f\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega\\\\times [0,T],\\n\\\\\\\\\\n        u(x,t) &=& g\\n        \\\\qquad\\n        \\\\textrm{on}\\\\ \\\\partial\\\\Omega\\\\times [0,T],\\n\\\\\\\\\\n        u(x,0) &=& u_0(x)\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega,\\n\\\\\\\\\\n        \\\\frac{\\\\partial u(x,0)}{\\\\partial t} &=& u_1(x)\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega.\\n\\\\end{eqnarray*}\\n\\n Note that since this is an equation with second-order time derivatives, we need to pose two initial conditions, one for the value and one for the time derivative of the solution.\\nPhysically, the equation describes the motion of an elastic medium. In 2-d, one can think of how a membrane moves if subjected to a force. The Dirichlet boundary conditions above indicate that the membrane is clamped at the boundary at a height \\\\(g(x,t)\\\\) (this height might be moving as well \\u2014 think of people holding a blanket and shaking it up and down). The first initial condition equals the initial deflection of the membrane, whereas the second one gives its velocity. For example, one could think of pushing the membrane down with a finger and then letting it go at \\\\(t=0\\\\) (nonzero deflection but zero initial velocity), or hitting it with a hammer at \\\\(t=0\\\\) (zero deflection but nonzero velocity). Both cases would induce motion in the membrane.\\nTime discretization\\nMethod of lines or Rothe's method?\\nThere is a long-standing debate in the numerical analysis community over whether a discretization of time dependent equations should involve first discretizing the time variable leading to a stationary PDE at each time step that is then solved using standard finite element techniques (this is called the Rothe method), or whether one should first discretize the spatial variables, leading to a large system of ordinary differential equations that can then be handled by one of the usual ODE solvers (this is called the method of lines).\\nBoth of these methods have advantages and disadvantages. Traditionally, people have preferred the method of lines, since it allows to use the very well developed machinery of high-order ODE solvers available for the rather stiff ODEs resulting from this approach, including step length control and estimation of the temporal error.\\nOn the other hand, Rothe's method becomes awkward when using higher-order time stepping method, since one then has to write down a PDE that couples the solution of the present time step not only with that at the previous time step, but possibly also even earlier solutions, leading to a significant number of terms.\\nFor these reasons, the method of lines was the method of choice for a long time. However, it has one big drawback: if we discretize the spatial variable first, leading to a large ODE system, we have to choose a mesh once and for all. If we are willing to do this, then this is a legitimate and probably superior approach.\\nIf, on the other hand, we are looking at the wave equation and many other time dependent problems, we find that the character of a solution changes as time progresses. For example, for the wave equation, we may have a single wave travelling through the domain, where the solution is smooth or even constant in front of and behind the wave \\u2014 adaptivity would be really useful for such cases, but the key is that the area where we need to refine the mesh changes from time step to time step!\\nIf we intend to go that way, i.e. choose a different mesh for each time step (or set of time steps), then the method of lines is not appropriate any more: instead of getting one ODE system with a number of variables equal to the number of unknowns in the finite element mesh, our number of unknowns now changes all the time, a fact that standard ODE solvers are certainly not prepared to deal with at all. On the other hand, for the Rothe method, we just get a PDE for each time step that we may choose to discretize independently of the mesh used for the previous time step; this approach is not without perils and difficulties, but at least is a sensible and well-defined procedure.\\nFor all these reasons, for the present program, we choose to use the Rothe method for discretization, i.e. we first discretize in time and then in space. We will not actually use adaptive meshes at all, since this involves a large amount of additional code, but we will comment on this some more in the results section below.\\nRothe's method!\\nGiven these considerations, here is how we will proceed: let us first define a simple time stepping method for this second order problem, and then in a second step do the spatial discretization, i.e. we will follow Rothe's approach.\\nFor the first step, let us take a little detour first: in order to discretize a second time derivative, we can either discretize it directly, or we can introduce an additional variable and transform the system into a first order system. In many cases, this turns out to be equivalent, but dealing with first order systems is often simpler. To this end, let us introduce   \\n\\\\[\\n        v = \\\\frac{\\\\partial u}{\\\\partial t},\\n\\\\]\\n\\n and call this variable the velocity for obvious reasons. We can then reformulate the original wave equation as follows:                          \\n\\\\begin{eqnarray*}\\n        \\\\frac{\\\\partial u}{\\\\partial t}\\n        -\\n        v\\n        &=& 0\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega\\\\times [0,T],\\n\\\\\\\\\\n        \\\\frac{\\\\partial v}{\\\\partial t}\\n        -\\n        \\\\Delta u &=& f\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega\\\\times [0,T],\\n\\\\\\\\\\n        u(x,t) &=& g\\n        \\\\qquad\\n        \\\\textrm{on}\\\\ \\\\partial\\\\Omega\\\\times [0,T],\\n\\\\\\\\\\n        u(x,0) &=& u_0(x)\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega,\\n\\\\\\\\\\n        v(x,0) &=& u_1(x)\\n        \\\\qquad\\n        \\\\textrm{in}\\\\ \\\\Omega.\\n\\\\end{eqnarray*}\\n\\n The advantage of this formulation is that it now only contains first time derivatives for both variables, for which it is simple to write down time stepping schemes. Note that we do not have boundary conditions for \\\\(v\\\\) at first. However, we could enforce  \\\\(v=\\\\frac{\\\\partial\\ng}{\\\\partial t}\\\\) on the boundary. It turns out in numerical examples that this is actually necessary: without doing so the solution doesn't look particularly wrong, but the Crank-Nicolson scheme does not conserve energy if one doesn't enforce these boundary conditions.\\nWith this formulation, let us introduce the following time discretization where a superscript \\\\(n\\\\) indicates the number of a time step and \\\\(k=t_n-t_{n-1}\\\\) is the length of the present time step:        \\n\\\\begin{eqnarray*}\\n  \\\\frac{u^n - u^{n-1}}{k}\\n  - \\\\left[\\\\theta v^n + (1-\\\\theta) v^{n-1}\\\\right] &=& 0,\\n  \\\\\\\\\\n  \\\\frac{v^n - v^{n-1}}{k}\\n  - \\\\Delta\\\\left[\\\\theta u^n + (1-\\\\theta) u^{n-1}\\\\right]\\n  &=& \\\\theta f^n + (1-\\\\theta) f^{n-1}.\\n\\\\end{eqnarray*}\\n\\n Note how we introduced a parameter \\\\(\\\\theta\\\\) here. If we chose \\\\(\\\\theta=0\\\\), for example, the first equation would reduce to \\\\(\\\\frac{u^n - u^{n-1}}{k}  - v^{n-1} = 0\\\\), which is well-known as the forward or explicit Euler method. On the other hand, if we set \\\\(\\\\theta=1\\\\), then we would get \\\\(\\\\frac{u^n - u^{n-1}}{k}  - v^n = 0\\\\), which corresponds to the backward or implicit Euler method. Both these methods are first order accurate methods. They are simple to implement, but they are not really very accurate.\\nThe third case would be to choose \\\\(\\\\theta=\\\\frac 12\\\\). The first of the equations above would then read  \\\\(\\\\frac{u^n - u^{n-1}}{k}\\n- \\\\frac 12 \\\\left[v^n + v^{n-1}\\\\right] = 0\\\\). This method is known as the Crank-Nicolson method and has the advantage that it is second order accurate. In addition, it has the nice property that it preserves the energy in the solution (physically, the energy is the sum of the kinetic energy of the particles in the membrane plus the potential energy present due to the fact that it is locally stretched; this quantity is a conserved one in the continuous equation, but most time stepping schemes do not conserve it after time discretization). Since \\\\(v^n\\\\) also appears in the equation for \\\\(u^n\\\\), the Crank-Nicolson scheme is also implicit.\\nIn the program, we will leave \\\\(\\\\theta\\\\) as a parameter, so that it will be easy to play with it. The results section will show some numerical evidence comparing the different schemes.\\nThe equations above (called the semidiscretized equations because we have only discretized the time, but not space), can be simplified a bit by eliminating \\\\(v^n\\\\) from the first equation and rearranging terms. We then get       \\n\\\\begin{eqnarray*}\\n  \\\\left[ 1-k^2\\\\theta^2\\\\Delta \\\\right] u^n &=&\\n         \\\\left[ 1+k^2\\\\theta(1-\\\\theta)\\\\Delta\\\\right] u^{n-1} + k v^{n-1}\\n         + k^2\\\\theta\\\\left[\\\\theta f^n + (1-\\\\theta) f^{n-1}\\\\right],\\\\\\\\\\n   v^n &=& v^{n-1} + k\\\\Delta\\\\left[ \\\\theta u^n + (1-\\\\theta) u^{n-1}\\\\right]\\n   + k\\\\left[\\\\theta f^n + (1-\\\\theta) f^{n-1}\\\\right].\\n\\\\end{eqnarray*}\\n\\n In this form, we see that if we are given the solution \\\\(u^{n-1},v^{n-1}\\\\) of the previous timestep, that we can then solve for the variables \\\\(u^n,v^n\\\\) separately, i.e. one at a time. This is convenient. In addition, we recognize that the operator in the first equation is positive definite, and the second equation looks particularly simple.\\nSpace discretization\\nWe have now derived equations that relate the approximate (semi-discrete) solution \\\\(u^n(x)\\\\) and its time derivative \\\\(v^n(x)\\\\) at time \\\\(t_n\\\\) with the solutions \\\\(u^{n-1}(x),v^{n-1}(x)\\\\) of the previous time step at \\\\(t_{n-1}\\\\). The next step is to also discretize the spatial variable using the usual finite element methodology. To this end, we multiply each equation with a test function, integrate over the entire domain, and integrate by parts where necessary. This leads to                     \\n\\\\begin{eqnarray*}\\n  (u^n,\\\\varphi) + k^2\\\\theta^2(\\\\nabla u^n,\\\\nabla \\\\varphi) &=&\\n  (u^{n-1},\\\\varphi) - k^2\\\\theta(1-\\\\theta)(\\\\nabla u^{n-1},\\\\nabla \\\\varphi)\\n  +\\n  k(v^{n-1},\\\\varphi)\\n  + k^2\\\\theta\\n  \\\\left[\\n  \\\\theta (f^n,\\\\varphi) + (1-\\\\theta) (f^{n-1},\\\\varphi)\\n  \\\\right],\\n  \\\\\\\\\\n  (v^n,\\\\varphi)\\n   &=&\\n   (v^{n-1},\\\\varphi)\\n    -\\n    k\\\\left[ \\\\theta (\\\\nabla u^n,\\\\nabla\\\\varphi) +\\n    (1-\\\\theta) (\\\\nabla u^{n-1},\\\\nabla \\\\varphi)\\\\right]\\n  + k\\n  \\\\left[\\n  \\\\theta (f^n,\\\\varphi) + (1-\\\\theta) (f^{n-1},\\\\varphi)\\n  \\\\right].\\n\\\\end{eqnarray*}\\n\\nIt is then customary to approximate  \\\\(u^n(x) \\\\approx u^n_h(x) = \\\\sum_i\\nU_i^n\\\\phi_i^n(x)\\\\), where \\\\(\\\\phi_i^n(x)\\\\) are the shape functions used for the discretization of the \\\\(n\\\\)-th time step and \\\\(U_i^n\\\\) are the unknown nodal values of the solution. Similarly,  \\\\(v^n(x) \\\\approx\\nv^n_h(x) = \\\\sum_i V_i^n\\\\phi_i^n(x)\\\\). Finally, we have the solutions of the previous time step,  \\\\(u^{n-1}(x) \\\\approx u^{n-1}_h(x) = \\\\sum_i\\nU_i^{n-1}\\\\phi_i^{n-1}(x)\\\\) and  \\\\(v^{n-1}(x) \\\\approx v^{n-1}_h(x) = \\\\sum_i\\nV_i^{n-1}\\\\phi_i^{n-1}(x)\\\\). Note that since the solution of the previous time step has already been computed by the time we get to time step \\\\(n\\\\), \\\\(U^{n-1},V^{n-1}\\\\) are known. Furthermore, note that the solutions of the previous step may have been computed on a different mesh, so we have to use shape functions \\\\(\\\\phi^{n-1}_i(x)\\\\).\\nIf we plug these expansions into above equations and test with the test functions from the present mesh, we get the following linear system:                     \\n\\\\begin{eqnarray*}\\n  (M^n + k^2\\\\theta^2 A^n)U^n &=&\\n  M^{n,n-1}U^{n-1} - k^2\\\\theta(1-\\\\theta) A^{n,n-1}U^{n-1}\\n  +\\n  kM^{n,n-1}V^{n-1}\\n  + k^2\\\\theta\\n  \\\\left[\\n  \\\\theta F^n + (1-\\\\theta) F^{n-1}\\n  \\\\right],\\n  \\\\\\\\\\n  M^nV^n\\n   &=&\\n   M^{n,n-1}V^{n-1}\\n    -\\n    k\\\\left[ \\\\theta A^n U^n +\\n    (1-\\\\theta) A^{n,n-1} U^{n-1}\\\\right]\\n   + k\\n  \\\\left[\\n  \\\\theta F^n + (1-\\\\theta) F^{n-1}\\n  \\\\right],\\n\\\\end{eqnarray*}\\n\\n where             \\n\\\\begin{eqnarray*}\\n        M^n_{ij} &=& (\\\\phi_i^n, \\\\phi_j^n),\\n        \\\\\\\\\\n        A^n_{ij} &=& (\\\\nabla\\\\phi_i^n, \\\\nabla\\\\phi_j^n),\\n        \\\\\\\\\\n        M^{n,n-1}_{ij} &=& (\\\\phi_i^n, \\\\phi_j^{n-1}),\\n        \\\\\\\\\\n        A^{n,n-1}_{ij} &=& (\\\\nabla\\\\phi_i^n, \\\\nabla\\\\phi_j^{n-1}),\\n        \\\\\\\\\\n        F^n_{i} &=& (f^n,\\\\phi_i^n),\\n        \\\\\\\\\\n        F^{n-1}_{i} &=& (f^{n-1},\\\\phi_i^n).\\n\\\\end{eqnarray*}\\n\\nIf we solve these two equations, we can move the solution one step forward and go on to the next time step.\\nIt is worth noting that if we choose the same mesh on each time step (as we will in fact do in the program below), then we have the same shape functions on time step \\\\(n\\\\) and \\\\(n-1\\\\), i.e. \\\\(\\\\phi^n_i=\\\\phi_i^{n-1}=\\\\phi_i\\\\). Consequently, we get \\\\(M^n=M^{n,n-1}=M\\\\) and \\\\(A^n=A^{n,n-1}=A\\\\). On the other hand, if we had used different shape functions, then we would have to compute integrals that contain shape functions defined on two meshes. This is a somewhat messy process that we omit here, but that is treated in some detail in step-28.\\nUnder these conditions (i.e. a mesh that doesn't change), one can optimize the solution procedure a bit by basically eliminating the solution of the second linear system. We will discuss this in the introduction of the step-25 program.\\nEnergy conservation\\nOne way to compare the quality of a time stepping scheme is to see whether the numerical approximation preserves conservation properties of the continuous equation. For the wave equation, the natural quantity to look at is the energy. By multiplying the wave equation by \\\\(u_t\\\\), integrating over \\\\(\\\\Omega\\\\), and integrating by parts where necessary, we find that          \\n\\\\[\\n        \\\\frac{d}{d t}\\n        \\\\left[\\\\frac 12 \\\\int_\\\\Omega \\\\left(\\\\frac{\\\\partial u}{\\\\partial\\n        t}\\\\right)^2 + (\\\\nabla u)^2 \\\\; dx\\\\right]\\n        =\\n        \\\\int_\\\\Omega f \\\\frac{\\\\partial u}{\\\\partial t} \\\\; dx\\n        +\\n        \\\\int_{\\\\partial\\\\Omega} n\\\\cdot\\\\nabla u\\n        \\\\frac{\\\\partial g}{\\\\partial t} \\\\; dx.\\n\\\\]\\n\\n By consequence, in absence of body forces and constant boundary values, we get that    \\n\\\\[\\n        E(t) = \\\\frac 12 \\\\int_\\\\Omega \\\\left(\\\\frac{\\\\partial u}{\\\\partial\\n        t}\\\\right)^2 + (\\\\nabla u)^2 \\\\; dx\\n\\\\]\\n\\n is a conserved quantity, i.e. one that doesn't change with time. We will compute this quantity after each time step. It is straightforward to see that if we replace \\\\(u\\\\) by its finite element approximation, and \\\\(\\\\frac{\\\\partial u}{\\\\partial t}\\\\) by the finite element approximation of the velocity \\\\(v\\\\), then     \\n\\\\[\\n        E(t_n) = \\\\frac 12 \\\\left<V^n, M^n V^n\\\\right>\\n        +\\n        \\\\frac 12 \\\\left<U^n, A^n U^n\\\\right>.\\n\\\\]\\n\\n As we will see in the results section, the Crank-Nicolson scheme does indeed conserve the energy, whereas neither the forward nor the backward Euler scheme do.\\nWho are Courant, Friedrichs, and Lewy?\\nOne of the reasons why the wave equation is not easy to solve numerically is that explicit time discretizations are only stable if the time step is small enough. In particular, it is coupled to the spatial mesh width \\\\(h\\\\). For the lowest order discretization we use here, the relationship reads   \\n\\\\[\\n        k\\\\le \\\\frac hc\\n\\\\]\\n\\n where \\\\(c\\\\) is the wave speed, which in our formulation of the wave equation has been normalized to one. Consequently, unless we use the implicit schemes with \\\\(\\\\theta>0\\\\), our solutions will not be numerically stable if we violate this restriction. Implicit schemes do not have this restriction for stability, but they become inaccurate if the time step is too large.\\nThis condition was first recognized by Courant, Friedrichs, and Lewy \\u2014 in 1928, long before computers became available for numerical computations! (This result appeared in the German language article R. Courant, K. Friedrichs and H. Lewy: \\u00dcber die partiellen Differenzengleichungen der mathematischen Physik, Mathematische Annalen, vol. 100, no. 1, pages 32-74, 1928.) This condition on the time step is most frequently just referred to as the CFL condition. Intuitively, the CFL condition says that the time step must not be larger than the time it takes a wave to cross a single cell.\\nIn the program, we will refine the square \\\\([-1,1]^2\\\\) seven times uniformly, giving a mesh size of \\\\(h=\\\\frac 1{64}\\\\), which is what we set the time step to. The fact that we set the time step and mesh size individually in two different places is error prone: it is too easy to refine the mesh once more but forget to also adjust the time step. step-24 shows a better way how to keep these things in sync.\\nThe test case\\nAlthough the program has all the hooks to deal with nonzero initial and boundary conditions and body forces, we take a simple case where the domain is a square \\\\([-1,1]^2\\\\) and               \\n\\\\begin{eqnarray*}\\n        f &=& 0,\\n        \\\\\\\\\\n        u_0 &=& 0,\\n        \\\\\\\\\\n        u_1 &=& 0,\\n        \\\\\\\\\\n        g &=& \\\\left\\\\{\\\\begin{matrix}\\\\sin (4\\\\pi t)\\n        &\\\\qquad& \\\\text{for }\\\\ t\\\\le \\\\frac 12, x=-1, -\\\\frac 13<y<\\\\frac 13\\n        \\\\\\\\\\n         0\\n        &&\\\\text{otherwise}\\n        \\\\end{matrix}\\n        \\\\right.\\n\\\\end{eqnarray*}\\n\\n This corresponds to a membrane initially at rest and clamped all around, where someone is waving a part of the clamped boundary once up and down, thereby shooting a wave into the domain.\\n The commented program\\n Include files\\nWe start with the usual assortment of include files that we've seen in so many of the previous tests:\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/dynamic_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/precondition.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 \\n\\u00a0 #include <fstream>\\n\\u00a0 #include <iostream>\\n\\u00a0 \\nHere are the only three include files of some new interest: The first one is already used, for example, for the VectorTools::interpolate_boundary_values and MatrixTools::apply_boundary_values functions. However, we here use another function in that class, VectorTools::project to compute our initial values as the \\\\(L^2\\\\) projection of the continuous initial values. Furthermore, we use VectorTools::create_right_hand_side to generate the integrals \\\\((f^n,\\\\phi^n_i)\\\\). These were previously always generated by hand in assemble_system or similar functions in application code. However, we're too lazy to do that here, so simply use a library function:\\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 \\nIn a very similar vein, we are also too lazy to write the code to assemble mass and Laplace matrices, although it would have only taken copying the relevant code from any number of previous tutorial programs. Rather, we want to focus on the things that are truly new to this program and therefore use the MatrixCreator::create_mass_matrix() and MatrixCreator::create_laplace_matrix() functions. They are declared here:\\n\\u00a0 #include <deal.II/numerics/matrix_creator.h>\\n\\u00a0 #include <deal.II/numerics/matrix_tools.h>\\n\\u00a0 \\nFinally, here is an include file that contains all sorts of tool functions that one sometimes needs. In particular, we need the Utilities::int_to_string class that, given an integer argument, returns a string representation of it. It is particularly useful since it allows for a second parameter indicating the number of digits to which we want the result padded with leading zeros. We will use this to write output files that have the form solution-XXX.vtu where XXX denotes the number of the time step and always consists of three digits even if we are still in the single or double digit time steps.\\n\\u00a0 #include <deal.II/base/utilities.h>\\n\\u00a0 \\nThe last step is as in all previous programs:\\n\\u00a0 namespace Step23\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n The WaveEquation class\\nNext comes the declaration of the main class. It's public interface of functions is like in most of the other tutorial programs. Worth mentioning is that we now have to store four matrices instead of one: the mass matrix \\\\(M\\\\), the Laplace matrix \\\\(A\\\\), the matrix \\\\(M+k^2\\\\theta^2A\\\\) used for solving for \\\\(U^n\\\\), and a copy of the mass matrix with boundary conditions applied used for solving for \\\\(V^n\\\\). Note that it is a bit wasteful to have an additional copy of the mass matrix around. We will discuss strategies for how to avoid this in the section on possible improvements.\\nLikewise, we need solution vectors for \\\\(U^n,V^n\\\\) as well as for the corresponding vectors at the previous time step, \\\\(U^{n-1},V^{n-1}\\\\). The system_rhs will be used for whatever right hand side vector we have when solving one of the two linear systems in each time step. These will be solved in the two functions solve_u and solve_v.\\nFinally, the variable theta is used to indicate the parameter \\\\(\\\\theta\\\\) that is used to define which time stepping scheme to use, as explained in the introduction. The rest is self-explanatory.\\n\\u00a0   template <int dim>\\n\\u00a0   class WaveEquation\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     WaveEquation();\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void setup_system();\\n\\u00a0     void solve_u();\\n\\u00a0     void solve_v();\\n\\u00a0     void output_results() const;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     const FE_Q<dim>    fe;\\n\\u00a0     DoFHandler<dim>    dof_handler;\\n\\u00a0 \\n\\u00a0     AffineConstraints<double> constraints;\\n\\u00a0 \\n\\u00a0     SparsityPattern      sparsity_pattern;\\n\\u00a0     SparseMatrix<double> mass_matrix;\\n\\u00a0     SparseMatrix<double> laplace_matrix;\\n\\u00a0     SparseMatrix<double> matrix_u;\\n\\u00a0     SparseMatrix<double> matrix_v;\\n\\u00a0 \\n\\u00a0     Vector<double> solution_u, solution_v;\\n\\u00a0     Vector<double> old_solution_u, old_solution_v;\\n\\u00a0     Vector<double> system_rhs;\\n\\u00a0 \\n\\u00a0     double       time_step;\\n\\u00a0     double       time;\\n\\u00a0     unsigned int timestep_number;\\n\\u00a0     const double theta;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nDoFHandlerDefinition dof_handler.h:317\\nFE_QDefinition fe_q.h:554\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nTriangulationDefinition tria.h:1323\\nVectorDefinition vector.h:120\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n Equation data\\nBefore we go on filling in the details of the main class, let us define the equation data corresponding to the problem, i.e. initial and boundary values for both the solution \\\\(u\\\\) and its time derivative \\\\(v\\\\), as well as a right hand side class. We do so using classes derived from the Function class template that has been used many times before, so the following should not be a surprise.\\nLet's start with initial values and choose zero for both the value \\\\(u\\\\) as well as its time derivative, the velocity \\\\(v\\\\):\\n\\u00a0   template <int dim>\\n\\u00a0   class InitialValuesU : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim> & /*p*/,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0       return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   class InitialValuesV : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim> & /*p*/,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0       return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunctionDefinition function.h:152\\nFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const\\nPointDefinition point.h:111\\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\nStandardExceptions::ExcIndexRangestatic ::ExceptionBase & ExcIndexRange(std::size_t arg1, std::size_t arg2, std::size_t arg3)\\nSecondly, we have the right hand side forcing term. Boring as we are, we choose zero here as well:\\n\\u00a0   template <int dim>\\n\\u00a0   class RightHandSide : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim> & /*p*/,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0       return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFinally, we have boundary values for \\\\(u\\\\) and \\\\(v\\\\). They are as described in the introduction, one being the time derivative of the other:\\n\\u00a0   template <int dim>\\n\\u00a0   class BoundaryValuesU : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0 \\n\\u00a0       if ((this->get_time() <= 0.5) && (p[0] < 0) && (p[1] < 1. / 3) &&\\n\\u00a0           (p[1] > -1. / 3))\\n\\u00a0         return std::sin(this->get_time() * 4 * numbers::PI);\\n\\u00a0       else\\n\\u00a0         return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   class BoundaryValuesV : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0 \\n\\u00a0       if ((this->get_time() <= 0.5) && (p[0] < 0) && (p[1] < 1. / 3) &&\\n\\u00a0           (p[1] > -1. / 3))\\n\\u00a0         return (std::cos(this->get_time() * 4 * numbers::PI) * 4 * numbers::PI);\\n\\u00a0       else\\n\\u00a0         return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunctionTime< numbers::NumberTraits< double >::real_type >::get_timenumbers::NumberTraits< double >::real_type get_time() const\\nnumbers::PIstatic constexpr double PIDefinition numbers.h:259\\nstd::cos::VectorizedArray< Number, width > cos(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6609\\nstd::sin::VectorizedArray< Number, width > sin(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6589\\n Implementation of the WaveEquation class\\nThe implementation of the actual logic is actually fairly short, since we relegate things like assembling the matrices and right hand side vectors to the library. The rest boils down to not much more than 130 lines of actual code, a significant fraction of which is boilerplate code that can be taken from previous example programs (e.g. the functions that solve linear systems, or that generate output).\\nLet's start with the constructor (for an explanation of the choice of time step, see the section on Courant, Friedrichs, and Lewy in the introduction):\\n\\u00a0   template <int dim>\\n\\u00a0   WaveEquation<dim>::WaveEquation()\\n\\u00a0     : fe(1)\\n\\u00a0     , dof_handler(triangulation)\\n\\u00a0     , time_step(1. / 64)\\n\\u00a0     , time(time_step)\\n\\u00a0     , timestep_number(1)\\n\\u00a0     , theta(0.5)\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n WaveEquation::setup_system\\nThe next function is the one that sets up the mesh, DoFHandler, and matrices and vectors at the beginning of the program, i.e. before the first time step. The first few lines are pretty much standard if you've read through the tutorial programs at least up to step-6:\\n\\u00a0   template <int dim>\\n\\u00a0   void WaveEquation<dim>::setup_system()\\n\\u00a0   {\\n\\u00a0     GridGenerator::hyper_cube(triangulation, -1, 1);\\n\\u00a0     triangulation.refine_global(7);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     dof_handler.distribute_dofs(fe);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n\\u00a0               << std::endl\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n\\u00a0     DoFTools::make_sparsity_pattern(dof_handler, dsp);\\n\\u00a0     sparsity_pattern.copy_from(dsp);\\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\nThen comes a block where we have to initialize the 3 matrices we need in the course of the program: the mass matrix, the Laplace matrix, and the matrix \\\\(M+k^2\\\\theta^2A\\\\) used when solving for \\\\(U^n\\\\) in each time step.\\nWhen setting up these matrices, note that they all make use of the same sparsity pattern object. Finally, the reason why matrices and sparsity patterns are separate objects in deal.II (unlike in many other finite element or linear algebra classes) becomes clear: in a significant fraction of applications, one has to hold several matrices that happen to have the same sparsity pattern, and there is no reason for them not to share this information, rather than re-building and wasting memory on it several times.\\nAfter initializing all of these matrices, we call library functions that build the Laplace and mass matrices. All they need is a DoFHandler object and a quadrature formula object that is to be used for numerical integration. Note that in many respects these functions are better than what we would usually do in application programs, for example because they automatically parallelize building the matrices if multiple processors are available in a machine: for more information see the documentation of WorkStream or the Parallel computing with multiple processors topic. The matrices for solving linear systems will be filled in the run() method because we need to re-apply boundary conditions every time step.\\n\\u00a0     mass_matrix.reinit(sparsity_pattern);\\n\\u00a0     laplace_matrix.reinit(sparsity_pattern);\\n\\u00a0     matrix_u.reinit(sparsity_pattern);\\n\\u00a0     matrix_v.reinit(sparsity_pattern);\\n\\u00a0 \\n\\u00a0     MatrixCreator::create_mass_matrix(dof_handler,\\n\\u00a0                                       QGauss<dim>(fe.degree + 1),\\n\\u00a0                                       mass_matrix);\\n\\u00a0     MatrixCreator::create_laplace_matrix(dof_handler,\\n\\u00a0                                          QGauss<dim>(fe.degree + 1),\\n\\u00a0                                          laplace_matrix);\\n\\u00a0 \\nQGaussDefinition quadrature_lib.h:40\\nMatrixCreator::create_mass_matrixvoid create_mass_matrix(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, MatrixType &matrix, const Function< spacedim, typename MatrixType::value_type > *const a=nullptr, const AffineConstraints< typename MatrixType::value_type > &constraints=AffineConstraints< typename MatrixType::value_type >())\\nMatrixCreator::create_laplace_matrixvoid create_laplace_matrix(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, MatrixType &matrix, const Function< spacedim, typename MatrixType::value_type > *const a=nullptr, const AffineConstraints< typename MatrixType::value_type > &constraints=AffineConstraints< typename MatrixType::value_type >())\\nThe rest of the function is spent on setting vector sizes to the correct value. The final line closes the hanging node constraints object. Since we work on a uniformly refined mesh, no constraints exist or have been computed (i.e. there was no need to call DoFTools::make_hanging_node_constraints as in other programs), but we need a constraints object in one place further down below anyway.\\n\\u00a0     solution_u.reinit(dof_handler.n_dofs());\\n\\u00a0     solution_v.reinit(dof_handler.n_dofs());\\n\\u00a0     old_solution_u.reinit(dof_handler.n_dofs());\\n\\u00a0     old_solution_v.reinit(dof_handler.n_dofs());\\n\\u00a0     system_rhs.reinit(dof_handler.n_dofs());\\n\\u00a0 \\n\\u00a0     constraints.close();\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n WaveEquation::solve_u and WaveEquation::solve_v\\nThe next two functions deal with solving the linear systems associated with the equations for \\\\(U^n\\\\) and \\\\(V^n\\\\). Both are not particularly interesting as they pretty much follow the scheme used in all the previous tutorial programs.\\nOne can make little experiments with preconditioners for the two matrices we have to invert. As it turns out, however, for the matrices at hand here, using Jacobi or SSOR preconditioners reduces the number of iterations necessary to solve the linear system slightly, but due to the cost of applying the preconditioner it is no win in terms of run-time. It is not much of a loss either, but let's keep it simple and just do without:\\n\\u00a0   template <int dim>\\n\\u00a0   void WaveEquation<dim>::solve_u()\\n\\u00a0   {\\n\\u00a0     SolverControl            solver_control(1000, 1e-8 * system_rhs.l2_norm());\\n\\u00a0     SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0 \\n\\u00a0     cg.solve(matrix_u, solution_u, system_rhs, PreconditionIdentity());\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   u-equation: \\\" << solver_control.last_step()\\n\\u00a0               << \\\" CG iterations.\\\" << std::endl;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void WaveEquation<dim>::solve_v()\\n\\u00a0   {\\n\\u00a0     SolverControl            solver_control(1000, 1e-8 * system_rhs.l2_norm());\\n\\u00a0     SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0 \\n\\u00a0     cg.solve(matrix_v, solution_v, system_rhs, PreconditionIdentity());\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   v-equation: \\\" << solver_control.last_step()\\n\\u00a0               << \\\" CG iterations.\\\" << std::endl;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nPreconditionIdentityDefinition precondition.h:220\\nSolverCGDefinition solver_cg.h:179\\nSolverControlDefinition solver_control.h:67\\n WaveEquation::output_results\\nLikewise, the following function is pretty much what we've done before. The only thing worth mentioning is how here we generate a string representation of the time step number padded with leading zeros to 3 character length using the Utilities::int_to_string function's second argument.\\n\\u00a0   template <int dim>\\n\\u00a0   void WaveEquation<dim>::output_results() const\\n\\u00a0   {\\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0 \\n\\u00a0     data_out.attach_dof_handler(dof_handler);\\n\\u00a0     data_out.add_data_vector(solution_u, \\\"U\\\");\\n\\u00a0     data_out.add_data_vector(solution_v, \\\"V\\\");\\n\\u00a0 \\n\\u00a0     data_out.build_patches();\\n\\u00a0 \\n\\u00a0     const std::string filename =\\n\\u00a0       \\\"solution-\\\" + Utilities::int_to_string(timestep_number, 3) + \\\".vtu\\\";\\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\nLike step-15, since we write output at every time step (and the system we have to solve is relatively easy), we instruct DataOut to use the zlib compression algorithm that is optimized for speed instead of disk usage since otherwise plotting the output becomes a bottleneck:\\n\\u00a0     DataOutBase::VtkFlags vtk_flags;\\n\\u00a0     vtk_flags.compression_level = DataOutBase::CompressionLevel::best_speed;\\n\\u00a0     data_out.set_flags(vtk_flags);\\n\\u00a0     std::ofstream output(filename);\\n\\u00a0     data_out.write_vtu(output);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDataOutBase::CompressionLevel::best_speed@ best_speed\\nDataOutBase::VtkFlagsDefinition data_out_base.h:1127\\nDataOutBase::VtkFlags::compression_levelDataOutBase::CompressionLevel compression_levelDefinition data_out_base.h:1182\\n WaveEquation::run\\nThe following is really the only interesting function of the program. It contains the loop over all time steps, but before we get to that we have to set up the grid, DoFHandler, and matrices. In addition, we have to somehow get started with initial values. To this end, we use the VectorTools::project function that takes an object that describes a continuous function and computes the \\\\(L^2\\\\) projection of this function onto the finite element space described by the DoFHandler object. Can't be any simpler than that:\\n\\u00a0   template <int dim>\\n\\u00a0   void WaveEquation<dim>::run()\\n\\u00a0   {\\n\\u00a0     setup_system();\\n\\u00a0 \\n\\u00a0     VectorTools::project(dof_handler,\\n\\u00a0                          constraints,\\n\\u00a0                          QGauss<dim>(fe.degree + 1),\\n\\u00a0                          InitialValuesU<dim>(),\\n\\u00a0                          old_solution_u);\\n\\u00a0     VectorTools::project(dof_handler,\\n\\u00a0                          constraints,\\n\\u00a0                          QGauss<dim>(fe.degree + 1),\\n\\u00a0                          InitialValuesV<dim>(),\\n\\u00a0                          old_solution_v);\\n\\u00a0 \\nVectorTools::projectvoid project(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const AffineConstraints< typename VectorType::value_type > &constraints, const Quadrature< dim > &quadrature, const Function< spacedim, typename VectorType::value_type > &function, VectorType &vec, const bool enforce_zero_boundary=false, const Quadrature< dim - 1 > &q_boundary=(dim > 1 ? QGauss< dim - 1 >(2) :Quadrature< dim - 1 >()), const bool project_to_boundary_first=false)\\nThe next thing is to loop over all the time steps until we reach the end time ( \\\\(T=5\\\\) in this case). In each time step, we first have to solve for \\\\(U^n\\\\), using the equation \\\\((M^n + k^2\\\\theta^2 A^n)U^n =\\\\)  \\\\((M^{n,n-1} - k^2\\\\theta(1-\\\\theta) A^{n,n-1})U^{n-1} + kM^{n,n-1}V^{n-1}\\n   +\\\\) \\\\(k\\\\theta \\\\left[k \\\\theta F^n + k(1-\\\\theta) F^{n-1} \\\\right]\\\\). Note that we use the same mesh for all time steps, so that \\\\(M^n=M^{n,n-1}=M\\\\) and \\\\(A^n=A^{n,n-1}=A\\\\). What we therefore have to do first is to add up \\\\(MU^{n-1} - k^2\\\\theta(1-\\\\theta) AU^{n-1} + kMV^{n-1}\\\\) and the forcing terms, and put the result into the system_rhs vector. (For these additions, we need a temporary vector that we declare before the loop to avoid repeated memory allocations in each time step.)\\nThe one thing to realize here is how we communicate the time variable to the object describing the right hand side: each object derived from the Function class has a time field that can be set using the Function::set_time and read by Function::get_time. In essence, using this mechanism, all functions of space and time are therefore considered functions of space evaluated at a particular time. This matches well what we typically need in finite element programs, where we almost always work on a single time step at a time, and where it never happens that, for example, one would like to evaluate a space-time function for all times at any given spatial location.\\n\\u00a0     Vector<double> tmp(solution_u.size());\\n\\u00a0     Vector<double> forcing_terms(solution_u.size());\\n\\u00a0 \\n\\u00a0     for (; time <= 5; time += time_step, ++timestep_number)\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Time step \\\" << timestep_number << \\\" at t=\\\" << time\\n\\u00a0                   << std::endl;\\n\\u00a0 \\n\\u00a0         mass_matrix.vmult(system_rhs, old_solution_u);\\n\\u00a0 \\n\\u00a0         mass_matrix.vmult(tmp, old_solution_v);\\n\\u00a0         system_rhs.add(time_step, tmp);\\n\\u00a0 \\n\\u00a0         laplace_matrix.vmult(tmp, old_solution_u);\\n\\u00a0         system_rhs.add(-theta * (1 - theta) * time_step * time_step, tmp);\\n\\u00a0 \\n\\u00a0         RightHandSide<dim> rhs_function;\\n\\u00a0         rhs_function.set_time(time);\\n\\u00a0         VectorTools::create_right_hand_side(dof_handler,\\n\\u00a0                                             QGauss<dim>(fe.degree + 1),\\n\\u00a0                                             rhs_function,\\n\\u00a0                                             tmp);\\n\\u00a0         forcing_terms = tmp;\\n\\u00a0         forcing_terms *= theta * time_step;\\n\\u00a0 \\n\\u00a0         rhs_function.set_time(time - time_step);\\n\\u00a0         VectorTools::create_right_hand_side(dof_handler,\\n\\u00a0                                             QGauss<dim>(fe.degree + 1),\\n\\u00a0                                             rhs_function,\\n\\u00a0                                             tmp);\\n\\u00a0 \\n\\u00a0         forcing_terms.add((1 - theta) * time_step, tmp);\\n\\u00a0 \\n\\u00a0         system_rhs.add(theta * time_step, forcing_terms);\\n\\u00a0 \\nVectorTools::create_right_hand_sidevoid create_right_hand_side(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, const Function< spacedim, typename VectorType::value_type > &rhs, VectorType &rhs_vector, const AffineConstraints< typename VectorType::value_type > &constraints=AffineConstraints< typename VectorType::value_type >())\\nAfter so constructing the right hand side vector of the first equation, all we have to do is apply the correct boundary values. As for the right hand side, this is a space-time function evaluated at a particular time, which we interpolate at boundary nodes and then use the result to apply boundary values as we usually do. The result is then handed off to the solve_u() function:\\n\\u00a0         {\\n\\u00a0           BoundaryValuesU<dim> boundary_values_u_function;\\n\\u00a0           boundary_values_u_function.set_time(time);\\n\\u00a0 \\n\\u00a0           std::map<types::global_dof_index, double> boundary_values;\\n\\u00a0           VectorTools::interpolate_boundary_values(dof_handler,\\n\\u00a0                                                    0,\\n\\u00a0                                                    boundary_values_u_function,\\n\\u00a0                                                    boundary_values);\\n\\u00a0 \\nVectorTools::interpolate_boundary_valuesvoid interpolate_boundary_values(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const std::map< types::boundary_id, const Function< spacedim, number > * > &function_map, std::map< types::global_dof_index, number > &boundary_values, const ComponentMask &component_mask={})\\nThe matrix for solve_u() is the same in every time steps, so one could think that it is enough to do this only once at the beginning of the simulation. However, since we need to apply boundary values to the linear system (which eliminate some matrix rows and columns and give contributions to the right hand side), we have to refill the matrix in every time steps before we actually apply boundary data. The actual content is very simple: it is the sum of the mass matrix and a weighted Laplace matrix:\\n\\u00a0           matrix_u.copy_from(mass_matrix);\\n\\u00a0           matrix_u.add(theta * theta * time_step * time_step, laplace_matrix);\\n\\u00a0           MatrixTools::apply_boundary_values(boundary_values,\\n\\u00a0                                              matrix_u,\\n\\u00a0                                              solution_u,\\n\\u00a0                                              system_rhs);\\n\\u00a0         }\\n\\u00a0         solve_u();\\n\\u00a0 \\n\\u00a0 \\nMatrixTools::apply_boundary_valuesvoid apply_boundary_values(const std::map< types::global_dof_index, number > &boundary_values, SparseMatrix< number > &matrix, Vector< number > &solution, Vector< number > &right_hand_side, const bool eliminate_columns=true)Definition matrix_tools.cc:75\\nThe second step, i.e. solving for \\\\(V^n\\\\), works similarly, except that this time the matrix on the left is the mass matrix (which we copy again in order to be able to apply boundary conditions, and the right hand side is  \\\\(MV^{n-1} - k\\\\left[ \\\\theta A U^n +\\n   (1-\\\\theta) AU^{n-1}\\\\right]\\\\) plus forcing terms. Boundary values are applied in the same way as before, except that now we have to use the BoundaryValuesV class:\\n\\u00a0         laplace_matrix.vmult(system_rhs, solution_u);\\n\\u00a0         system_rhs *= -theta * time_step;\\n\\u00a0 \\n\\u00a0         mass_matrix.vmult(tmp, old_solution_v);\\n\\u00a0         system_rhs += tmp;\\n\\u00a0 \\n\\u00a0         laplace_matrix.vmult(tmp, old_solution_u);\\n\\u00a0         system_rhs.add(-time_step * (1 - theta), tmp);\\n\\u00a0 \\n\\u00a0         system_rhs += forcing_terms;\\n\\u00a0 \\n\\u00a0         {\\n\\u00a0           BoundaryValuesV<dim> boundary_values_v_function;\\n\\u00a0           boundary_values_v_function.set_time(time);\\n\\u00a0 \\n\\u00a0           std::map<types::global_dof_index, double> boundary_values;\\n\\u00a0           VectorTools::interpolate_boundary_values(dof_handler,\\n\\u00a0                                                    0,\\n\\u00a0                                                    boundary_values_v_function,\\n\\u00a0                                                    boundary_values);\\n\\u00a0           matrix_v.copy_from(mass_matrix);\\n\\u00a0           MatrixTools::apply_boundary_values(boundary_values,\\n\\u00a0                                              matrix_v,\\n\\u00a0                                              solution_v,\\n\\u00a0                                              system_rhs);\\n\\u00a0         }\\n\\u00a0         solve_v();\\n\\u00a0 \\nFinally, after both solution components have been computed, we output the result, compute the energy in the solution, and go on to the next time step after shifting the present solution into the vectors that hold the solution at the previous time step. Note the function SparseMatrix::matrix_norm_square that can compute \\\\(\\\\left<V^n,MV^n\\\\right>\\\\) and \\\\(\\\\left<U^n,AU^n\\\\right>\\\\) in one step, saving us the expense of a temporary vector and several lines of code:\\n\\u00a0         output_results();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Total energy: \\\"\\n\\u00a0                   << (mass_matrix.matrix_norm_square(solution_v) +\\n\\u00a0                       laplace_matrix.matrix_norm_square(solution_u)) /\\n\\u00a0                        2\\n\\u00a0                   << std::endl;\\n\\u00a0 \\n\\u00a0         old_solution_u = solution_u;\\n\\u00a0         old_solution_v = solution_v;\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 } // namespace Step23\\n\\u00a0 \\n\\u00a0 \\n The main function\\nWhat remains is the main function of the program. There is nothing here that hasn't been shown in several of the previous programs:\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace Step23;\\n\\u00a0 \\n\\u00a0       WaveEquation<2> wave_equation_solver;\\n\\u00a0       wave_equation_solver.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\n Results\\nWhen the program is run, it produces the following output: Number of active cells: 16384\\nNumber of degrees of freedom: 16641\\n \\nTime step 1 at t=0.015625\\n   u-equation: 8 CG iterations.\\n   v-equation: 22 CG iterations.\\n   Total energy: 1.17887\\nTime step 2 at t=0.03125\\n   u-equation: 8 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 2.9655\\nTime step 3 at t=0.046875\\n   u-equation: 8 CG iterations.\\n   v-equation: 21 CG iterations.\\n   Total energy: 4.33761\\nTime step 4 at t=0.0625\\n   u-equation: 7 CG iterations.\\n   v-equation: 21 CG iterations.\\n   Total energy: 5.35499\\nTime step 5 at t=0.078125\\n   u-equation: 7 CG iterations.\\n   v-equation: 21 CG iterations.\\n   Total energy: 6.18652\\nTime step 6 at t=0.09375\\n   u-equation: 7 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 6.6799\\n \\n...\\n \\nTime step 31 at t=0.484375\\n   u-equation: 7 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 21.9068\\nTime step 32 at t=0.5\\n   u-equation: 7 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 23.3394\\nTime step 33 at t=0.515625\\n   u-equation: 7 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 23.1019\\n \\n...\\n \\nTime step 319 at t=4.98438\\n   u-equation: 7 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 23.1019\\nTime step 320 at t=5\\n   u-equation: 7 CG iterations.\\n   v-equation: 20 CG iterations.\\n   Total energy: 23.1019\\nWhat we see immediately is that the energy is a constant at least after \\\\(t=\\\\frac 12\\\\) (until which the boundary source term \\\\(g\\\\) is nonzero, injecting energy into the system).\\nIn addition to the screen output, the program writes the solution of each time step to an output file. If we process them adequately and paste them into a movie, we get the following:\\n\\nThe movie shows the generated wave nice traveling through the domain and back, being reflected at the clamped boundary. Some numerical noise is trailing the wave, an artifact of a too-large mesh size that can be reduced by reducing the mesh width and the time step.\\n Possibilities for extensions\\nIf you want to explore a bit, try out some of the following things: \\n\\nVarying \\\\(\\\\theta\\\\). This gives different time stepping schemes, some of which are stable while others are not. Take a look at how the energy evolves.\\n\\n\\n\\nDifferent initial and boundary conditions, right hand sides.\\n\\n\\n\\nMore complicated domains or more refined meshes. Remember that the time step needs to be bounded by the mesh width, so changing the mesh should always involve also changing the time step. We will come back to this issue in step-24.\\n\\n\\n\\nVariable coefficients: In real media, the wave speed is often variable. In particular, the \\\"real\\\" wave equation in realistic media would read      \\n\\\\[\\n     \\\\rho(x) \\\\frac{\\\\partial^2 u}{\\\\partial t^2}\\n     -\\n     \\\\nabla \\\\cdot\\n     a(x) \\\\nabla u = f,\\n  \\\\]\\n\\n where \\\\(\\\\rho(x)\\\\) is the density of the material, and \\\\(a(x)\\\\) is related to the stiffness coefficient. The wave speed is then \\\\(c=\\\\sqrt{a/\\\\rho}\\\\).\\nTo make such a change, we would have to compute the mass and Laplace matrices with a variable coefficient. Fortunately, this isn't too hard: the functions MatrixCreator::create_laplace_matrix and MatrixCreator::create_mass_matrix have additional default parameters that can be used to pass non-constant coefficient functions to them. The required changes are therefore relatively small. On the other hand, care must be taken again to make sure the time step is within the allowed range.\\n\\n\\n\\nIn the in-code comments, we discussed the fact that the matrices for solving for \\\\(U^n\\\\) and \\\\(V^n\\\\) need to be reset in every time because of boundary conditions, even though the actual content does not change. It is possible to avoid copying by not eliminating columns in the linear systems, which is implemented by appending a false argument to the call: MatrixTools::apply_boundary_values(boundary_values,\\n                                   matrix_u,\\n                                   solution_u,\\n                                   system_rhs,\\n false);\\n\\n\\n\\ndeal.II being a library that supports adaptive meshes it would of course be nice if this program supported change the mesh every few time steps. Given the structure of the solution \\u2014 a wave that travels through the domain \\u2014 it would seem appropriate if we only refined the mesh where the wave currently is, and not simply everywhere. It is intuitively clear that we should be able to save a significant amount of cells this way. (Though upon further thought one realizes that this is really only the case in the initial stages of the simulation. After some time, for wave phenomena, the domain is filled with reflections of the initial wave going in every direction and filling every corner of the domain. At this point, there is in general little one can gain using local mesh refinement.)\\nTo make adaptively changing meshes possible, there are basically two routes. The \\\"correct\\\" way would be to go back to the weak form we get using Rothe's method. For example, the first of the two equations to be solved in each time step looked like this:          \\n\\\\begin{eqnarray*}\\n  (u^n,\\\\varphi) + k^2\\\\theta^2(\\\\nabla u^n,\\\\nabla \\\\varphi) &=&\\n  (u^{n-1},\\\\varphi) - k^2\\\\theta(1-\\\\theta)(\\\\nabla u^{n-1},\\\\nabla \\\\varphi)\\n  +\\n  k(v^{n-1},\\\\varphi)\\n  + k^2\\\\theta\\n  \\\\left[\\n  \\\\theta (f^n,\\\\varphi) + (1-\\\\theta) (f^{n-1},\\\\varphi)\\n  \\\\right].\\n  \\\\end{eqnarray*}\\n\\n Now, note that we solve for \\\\(u^n\\\\) on mesh \\\\({\\\\mathbb T}^n\\\\), and consequently the test functions \\\\(\\\\varphi\\\\) have to be from the space \\\\(V_h^n\\\\) as well. As discussed in the introduction, terms like \\\\((u^{n-1},\\\\varphi)\\\\) then require us to integrate the solution of the previous step (which may have been computed on a different mesh \\\\({\\\\mathbb T}^{n-1}\\\\)) against the test functions of the current mesh, leading to a matrix \\\\(M^{n,n-1}\\\\). This process of integrating shape functions from different meshes is, at best, awkward. It can be done but because it is difficult to ensure that \\\\({\\\\mathbb T}^{n-1}\\\\) and \\\\({\\\\mathbb T}^{n}\\\\) differ by at most one level of refinement, one has to recursively match cells from both meshes. It is feasible to do this, but it leads to lengthy and not entirely obvious code.\\nThe second approach is the following: whenever we change the mesh, we simply interpolate the solution from the last time step on the old mesh to the new mesh, using the SolutionTransfer class. In other words, instead of the equation above, we would solve          \\n\\\\begin{eqnarray*}\\n  (u^n,\\\\varphi) + k^2\\\\theta^2(\\\\nabla u^n,\\\\nabla \\\\varphi) &=&\\n  (I^n u^{n-1},\\\\varphi) - k^2\\\\theta(1-\\\\theta)(\\\\nabla I^n u^{n-1},\\\\nabla \\\\varphi)\\n  +\\n  k(I^n v^{n-1},\\\\varphi)\\n  + k^2\\\\theta\\n  \\\\left[\\n  \\\\theta (f^n,\\\\varphi) + (1-\\\\theta) (f^{n-1},\\\\varphi)\\n  \\\\right],\\n  \\\\end{eqnarray*}\\n\\n where \\\\(I^n\\\\) interpolates a given function onto mesh \\\\({\\\\mathbb T}^n\\\\). This is a much simpler approach because, in each time step, we no longer have to worry whether \\\\(u^{n-1},v^{n-1}\\\\) were computed on the same mesh as we are using now or on a different mesh. Consequently, the only changes to the code necessary are the addition of a function that computes the error, marks cells for refinement, sets up a SolutionTransfer object, transfers the solution to the new mesh, and rebuilds matrices and right hand side vectors on the new mesh. Neither the functions building the matrices and right hand sides, nor the solvers need to be changed.\\nWhile this second approach is, strictly speaking, not quite correct in the Rothe framework (it introduces an addition source of error, namely the interpolation), it is nevertheless what almost everyone solving time dependent equations does. We will use this method in step-31, for example. \\n\\n\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2006 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Author: Wolfgang Bangerth, Texas A&M University, 2006\\n */\\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n \\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/precondition.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/fe/fe_q.h>\\n \\n#include <deal.II/numerics/data_out.h>\\n \\n#include <fstream>\\n#include <iostream>\\n \\n#include <deal.II/numerics/vector_tools.h>\\n \\n#include <deal.II/numerics/matrix_creator.h>\\n#include <deal.II/numerics/matrix_tools.h>\\n \\n#include <deal.II/base/utilities.h>\\n \\nnamespace Step23\\n{\\n using namespace dealii;\\n \\n \\n \\n template <int dim>\\n class WaveEquation\\n  {\\n public:\\n    WaveEquation();\\n void run();\\n \\n private:\\n void setup_system();\\n void solve_u();\\n void solve_v();\\n void output_results() const;\\n \\n Triangulation<dim> triangulation;\\n const FE_Q<dim>    fe;\\n DoFHandler<dim>    dof_handler;\\n \\n AffineConstraints<double> constraints;\\n \\n SparsityPattern      sparsity_pattern;\\n SparseMatrix<double> mass_matrix;\\n SparseMatrix<double> laplace_matrix;\\n SparseMatrix<double> matrix_u;\\n SparseMatrix<double> matrix_v;\\n \\n Vector<double> solution_u, solution_v;\\n Vector<double> old_solution_u, old_solution_v;\\n Vector<double> system_rhs;\\n \\n double       time_step;\\n double       time;\\n unsigned int timestep_number;\\n const double theta;\\n  };\\n \\n \\n \\n \\n template <int dim>\\n class InitialValuesU : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim> & /*p*/,\\n const unsigned int component = 0) const override\\n {\\n      (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n return 0;\\n    }\\n  };\\n \\n \\n \\n template <int dim>\\n class InitialValuesV : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim> & /*p*/,\\n const unsigned int component = 0) const override\\n {\\n      (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n return 0;\\n    }\\n  };\\n \\n \\n \\n template <int dim>\\n class RightHandSide : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim> & /*p*/,\\n const unsigned int component = 0) const override\\n {\\n      (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n return 0;\\n    }\\n  };\\n \\n \\n \\n template <int dim>\\n class BoundaryValuesU : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override\\n {\\n      (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n \\n if ((this->get_time() <= 0.5) && (p[0] < 0) && (p[1] < 1. / 3) &&\\n          (p[1] > -1. / 3))\\n return std::sin(this->get_time() * 4 * numbers::PI);\\n else\\n return 0;\\n    }\\n  };\\n \\n \\n \\n template <int dim>\\n class BoundaryValuesV : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override\\n {\\n      (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n \\n if ((this->get_time() <= 0.5) && (p[0] < 0) && (p[1] < 1. / 3) &&\\n          (p[1] > -1. / 3))\\n return (std::cos(this->get_time() * 4 * numbers::PI) * 4 * numbers::PI);\\n else\\n return 0;\\n    }\\n  };\\n \\n \\n \\n \\n template <int dim>\\n  WaveEquation<dim>::WaveEquation()\\n    : fe(1)\\n    , dof_handler(triangulation)\\n    , time_step(1. / 64)\\n    , time(time_step)\\n    , timestep_number(1)\\n    , theta(0.5)\\n  {}\\n \\n \\n \\n template <int dim>\\n void WaveEquation<dim>::setup_system()\\n  {\\n GridGenerator::hyper_cube(triangulation, -1, 1);\\n triangulation.refine_global(7);\\n \\n    std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n              << std::endl;\\n \\n    dof_handler.distribute_dofs(fe);\\n \\n    std::cout << \\\"Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n              << std::endl\\n              << std::endl;\\n \\n DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler, dsp);\\n    sparsity_pattern.copy_from(dsp);\\n \\n mass_matrix.reinit(sparsity_pattern);\\n    laplace_matrix.reinit(sparsity_pattern);\\n    matrix_u.reinit(sparsity_pattern);\\n    matrix_v.reinit(sparsity_pattern);\\n \\n MatrixCreator::create_mass_matrix(dof_handler,\\n QGauss<dim>(fe.degree + 1),\\n                                      mass_matrix);\\n MatrixCreator::create_laplace_matrix(dof_handler,\\n QGauss<dim>(fe.degree + 1),\\n                                         laplace_matrix);\\n \\n    solution_u.reinit(dof_handler.n_dofs());\\n    solution_v.reinit(dof_handler.n_dofs());\\n    old_solution_u.reinit(dof_handler.n_dofs());\\n    old_solution_v.reinit(dof_handler.n_dofs());\\n    system_rhs.reinit(dof_handler.n_dofs());\\n \\n    constraints.close();\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void WaveEquation<dim>::solve_u()\\n  {\\n SolverControl            solver_control(1000, 1e-8 * system_rhs.l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n \\n    cg.solve(matrix_u, solution_u, system_rhs, PreconditionIdentity());\\n \\n    std::cout << \\\"   u-equation: \\\" << solver_control.last_step()\\n              << \\\" CG iterations.\\\" << std::endl;\\n  }\\n \\n \\n \\n template <int dim>\\n void WaveEquation<dim>::solve_v()\\n  {\\n SolverControl            solver_control(1000, 1e-8 * system_rhs.l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n \\n    cg.solve(matrix_v, solution_v, system_rhs, PreconditionIdentity());\\n \\n    std::cout << \\\"   v-equation: \\\" << solver_control.last_step()\\n              << \\\" CG iterations.\\\" << std::endl;\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void WaveEquation<dim>::output_results() const\\n {\\n DataOut<dim> data_out;\\n \\n    data_out.attach_dof_handler(dof_handler);\\n    data_out.add_data_vector(solution_u, \\\"U\\\");\\n    data_out.add_data_vector(solution_v, \\\"V\\\");\\n \\n    data_out.build_patches();\\n \\n const std::string filename =\\n \\\"solution-\\\" + Utilities::int_to_string(timestep_number, 3) + \\\".vtu\\\";\\n DataOutBase::VtkFlags vtk_flags;\\n    vtk_flags.compression_level = DataOutBase::CompressionLevel::best_speed;\\n    data_out.set_flags(vtk_flags);\\n    std::ofstream output(filename);\\n    data_out.write_vtu(output);\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void WaveEquation<dim>::run()\\n  {\\n    setup_system();\\n \\n VectorTools::project(dof_handler,\\n                         constraints,\\n QGauss<dim>(fe.degree + 1),\\n                         InitialValuesU<dim>(),\\n                         old_solution_u);\\n VectorTools::project(dof_handler,\\n                         constraints,\\n QGauss<dim>(fe.degree + 1),\\n                         InitialValuesV<dim>(),\\n                         old_solution_v);\\n \\n Vector<double> tmp(solution_u.size());\\n Vector<double> forcing_terms(solution_u.size());\\n \\n for (; time <= 5; time += time_step, ++timestep_number)\\n      {\\n        std::cout << \\\"Time step \\\" << timestep_number << \\\" at t=\\\" << time\\n                  << std::endl;\\n \\n mass_matrix.vmult(system_rhs, old_solution_u);\\n \\n mass_matrix.vmult(tmp, old_solution_v);\\n        system_rhs.add(time_step, tmp);\\n \\n        laplace_matrix.vmult(tmp, old_solution_u);\\n        system_rhs.add(-theta * (1 - theta) * time_step * time_step, tmp);\\n \\n        RightHandSide<dim> rhs_function;\\n        rhs_function.set_time(time);\\n VectorTools::create_right_hand_side(dof_handler,\\n QGauss<dim>(fe.degree + 1),\\n                                            rhs_function,\\n                                            tmp);\\n        forcing_terms = tmp;\\n        forcing_terms *= theta * time_step;\\n \\n        rhs_function.set_time(time - time_step);\\n VectorTools::create_right_hand_side(dof_handler,\\n QGauss<dim>(fe.degree + 1),\\n                                            rhs_function,\\n                                            tmp);\\n \\n        forcing_terms.add((1 - theta) * time_step, tmp);\\n \\n        system_rhs.add(theta * time_step, forcing_terms);\\n \\n        {\\n          BoundaryValuesU<dim> boundary_values_u_function;\\n          boundary_values_u_function.set_time(time);\\n \\n          std::map<types::global_dof_index, double> boundary_values;\\n VectorTools::interpolate_boundary_values(dof_handler,\\n                                                   0,\\n                                                   boundary_values_u_function,\\n                                                   boundary_values);\\n \\n          matrix_u.copy_from(mass_matrix);\\n          matrix_u.add(theta * theta * time_step * time_step, laplace_matrix);\\n MatrixTools::apply_boundary_values(boundary_values,\\n                                             matrix_u,\\n                                             solution_u,\\n                                             system_rhs);\\n        }\\n        solve_u();\\n \\n \\n        laplace_matrix.vmult(system_rhs, solution_u);\\n        system_rhs *= -theta * time_step;\\n \\n mass_matrix.vmult(tmp, old_solution_v);\\n        system_rhs += tmp;\\n \\n        laplace_matrix.vmult(tmp, old_solution_u);\\n        system_rhs.add(-time_step * (1 - theta), tmp);\\n \\n        system_rhs += forcing_terms;\\n \\n        {\\n          BoundaryValuesV<dim> boundary_values_v_function;\\n          boundary_values_v_function.set_time(time);\\n \\n          std::map<types::global_dof_index, double> boundary_values;\\n VectorTools::interpolate_boundary_values(dof_handler,\\n                                                   0,\\n                                                   boundary_values_v_function,\\n                                                   boundary_values);\\n          matrix_v.copy_from(mass_matrix);\\n MatrixTools::apply_boundary_values(boundary_values,\\n                                             matrix_v,\\n                                             solution_v,\\n                                             system_rhs);\\n        }\\n        solve_v();\\n \\n        output_results();\\n \\n        std::cout << \\\"   Total energy: \\\"\\n                  << (mass_matrix.matrix_norm_square(solution_v) +\\n                      laplace_matrix.matrix_norm_square(solution_u)) /\\n                       2\\n                  << std::endl;\\n \\n        old_solution_u = solution_u;\\n        old_solution_v = solution_v;\\n      }\\n  }\\n} // namespace Step23\\n \\n \\n \\nint main()\\n{\\n try\\n    {\\n using namespace Step23;\\n \\n      WaveEquation<2> wave_equation_solver;\\n      wave_equation_solver.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nDataOutInterface::write_vtuvoid write_vtu(std::ostream &out) constDefinition data_out_base.cc:7692\\nDataOutInterface::set_flagsvoid set_flags(const FlagType &flags)Definition data_out_base.cc:8863\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\ndof_handler.h\\ndof_tools.h\\ndynamic_sparsity_pattern.h\\nfe_q.h\\nfunction.h\\ntria.h\\ngrid_generator.h\\nutilities.h\\nmatrix_creator.h\\nmatrix_tools.h\\nLocalIntegrators::L2::mass_matrixvoid mass_matrix(FullMatrix< double > &M, const FEValuesBase< dim > &fe, const double factor=1.)Definition l2.h:57\\nUtilities::System::get_timestd::string get_time()Definition utilities.cc:1013\\ninternal::EvaluatorQuantity::value@ value\\ndata_out.h\\nprecondition.h\\nquadrature_lib.h\\nsolver_cg.h\\nsparse_matrix.h\\nvector.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"