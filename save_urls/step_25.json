"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_25.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-25 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-25 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-25 tutorial program\\n\\n\\nThis tutorial depends on step-24.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\nStatement of the problem\\nDiscretization of the equations in time\\nWeak formulation of the time-discretized equations\\nDiscretization of the weak formulation in space\\nThe test case\\n\\n The commented program\\n\\nInclude files and global variables\\nThe SineGordonProblem class template\\nInitial conditions\\nImplementation of the SineGordonProblem class\\n\\nSineGordonProblem::SineGordonProblem\\nSineGordonProblem::make_grid_and_dofs\\nSineGordonProblem::assemble_system\\nSineGordonProblem::compute_nl_term\\nSineGordonProblem::compute_nl_matrix\\nSineGordonProblem::solve\\nSineGordonProblem::output_results\\nSineGordonProblem::run\\n\\nThe main function\\n\\n\\n Results\\n\\nAn (1+1)-d Solution\\nA few (2+1)D Solutions\\nPossibilities for extensions\\n\\n The plain program\\n   \\n Introduction\\nThis program grew out of a student project by Ivan Christov at Texas A&M University. Most of the work for this program is by him.\\nThe goal of this program is to solve the sine-Gordon soliton equation in 1, 2 or 3 spatial dimensions. The motivation for solving this equation is that very little is known about the nature of the solutions in 2D and 3D, even though the 1D case has been studied extensively.\\nRather facetiously, the sine-Gordon equation's moniker is a pun on the so-called Klein-Gordon equation, which is a relativistic version of the Schr\\u00f6dinger equation for particles with non-zero mass. The resemblance is not just superficial, the sine-Gordon equation has been shown to model some unified-field phenomena such as interaction of subatomic particles (see, e.g., Perring & Skyrme in Nuclear Physics 31) and the Josephson (quantum) effect in superconductor junctions (see, e.g., http://en.wikipedia.org/wiki/Long_Josephson_junction). Furthermore, from the mathematical standpoint, since the sine-Gordon equation is \\\"completely integrable,\\\" it is a candidate for study using the usual methods such as the inverse scattering transform. Consequently, over the years, many interesting solitary-wave, and even stationary, solutions to the sine-Gordon equation have been found. In these solutions, particles correspond to localized features. For more on the sine-Gordon equation, the inverse scattering transform and other methods for finding analytical soliton equations, the reader should consult the following \\\"classical\\\" references on the subject: G. L. Lamb's Elements of Soliton Theory (Chapter 5, Section 2) and G. B. Whitham's Linear and Nonlinear Waves (Chapter 17, Sections 10-13).\\nNoteWe will cover a separate nonlinear equation from quantum mechanics, the Nonlinear Schr\\u00f6dinger Equation, in step-58.\\nStatement of the problem\\nThe sine-Gordon initial-boundary-value problem (IBVP) we wish to solve consists of the following equations:      \\n\\\\begin{eqnarray*}\\n  u_{tt}-\\\\Delta u &=& -\\\\sin(u) \\\\quad\\\\mbox{for}\\\\quad (x,t) \\\\in \\\\Omega \\\\times (t_0,t_f],\\\\\\\\\\n  {\\\\mathbf n} \\\\cdot \\\\nabla u &=& 0 \\\\quad\\\\mbox{for}\\\\quad (x,t) \\\\in \\\\partial\\\\Omega\\n           \\\\times (t_0,t_f],\\\\\\\\\\n  u(x,t_0) &=& u_0(x).\\n\\\\end{eqnarray*}\\n\\n It is a nonlinear equation similar to the wave equation we discussed in step-23 and step-24. We have chosen to enforce zero Neumann boundary conditions in order for waves to reflect off the boundaries of our domain. It should be noted, however, that Dirichlet boundary conditions are not appropriate for this problem. Even though the solutions to the sine-Gordon equation are localized, it only makes sense to specify (Dirichlet) boundary conditions at \\\\(x=\\\\pm\\\\infty\\\\), otherwise either a solution does not exist or only the trivial solution \\\\(u=0\\\\) exists.\\nHowever, the form of the equation above is not ideal for numerical discretization. If we were to discretize the second-order time derivative directly and accurately, then we would need a large stencil (i.e., several time steps would need to be kept in the memory), which could become expensive. Therefore, in complete analogy to what we did in step-23 and step-24, we split the second-order (in time) sine-Gordon equation into a system of two first-order (in time) equations, which we call the split, or velocity, formulation. To this end, by setting \\\\(v = u_t\\\\), it is easy to see that the sine-Gordon equation is equivalent to    \\n\\\\begin{eqnarray*}\\n  u_t - v &=& 0,\\\\\\\\\\n  v_t - \\\\Delta u &=& -\\\\sin(u).\\n\\\\end{eqnarray*}\\n\\nDiscretization of the equations in time\\nNow, we can discretize the split formulation in time using the \\\\(\\\\theta\\\\)-method, which has a stencil of only two time steps. By choosing a \\\\(\\\\theta\\\\in [0,1]\\\\), the latter discretization allows us to choose from a continuum of schemes. In particular, if we pick \\\\(\\\\theta=0\\\\) or \\\\(\\\\theta=1\\\\), we obtain the first-order accurate explicit or implicit Euler method, respectively. Another important choice is \\\\(\\\\theta=\\\\frac{1}{2}\\\\), which gives the second-order accurate Crank-Nicolson scheme. Henceforth, a superscript \\\\(n\\\\) denotes the values of the variables at the \\\\(n^{\\\\mathrm{th}}\\\\) time step, i.e. at \\\\(t=t_n \\\\dealcoloneq n k\\\\), where \\\\(k\\\\) is the (fixed) time step size. Thus, the split formulation of the time-discretized sine-Gordon equation becomes     \\n\\\\begin{eqnarray*}\\n  \\\\frac{u^n - u^{n-1}}{k} - \\\\left[\\\\theta v^n + (1-\\\\theta) v^{n-1}\\\\right] &=& 0,\\\\\\\\\\n  \\\\frac{v^n - v^{n-1}}{k} - \\\\Delta\\\\left[\\\\theta u^n + (1-\\\\theta) u^{n-1}\\\\right]\\n  &=& -\\\\sin\\\\left[\\\\theta u^n + (1-\\\\theta) u^{n-1}\\\\right].\\n\\\\end{eqnarray*}\\n\\nWe can simplify the latter via a bit of algebra. Eliminating \\\\(v^n\\\\) from the first equation and rearranging, we obtain       \\n\\\\begin{eqnarray*}\\n  \\\\left[ 1-k^2\\\\theta^2\\\\Delta \\\\right] u^n &=&\\n         \\\\left[ 1+k^2\\\\theta(1-\\\\theta)\\\\Delta\\\\right] u^{n-1} + k v^{n-1}\\n         - k^2\\\\theta\\\\sin\\\\left[\\\\theta u^n + (1-\\\\theta) u^{n-1}\\\\right],\\\\\\\\\\n   v^n &=& v^{n-1} + k\\\\Delta\\\\left[ \\\\theta u^n + (1-\\\\theta) u^{n-1}\\\\right]\\n         - k\\\\sin\\\\left[ \\\\theta u^n + (1-\\\\theta) u^{n-1} \\\\right].\\n\\\\end{eqnarray*}\\n\\nIt may seem as though we can just proceed to discretize the equations in space at this point. While this is true for the second equation (which is linear in \\\\(v^n\\\\)), this would not work for all \\\\(\\\\theta\\\\) since the first equation above is nonlinear. Therefore, a nonlinear solver must be implemented, then the equations can be discretized in space and solved.\\nTo this end, we can use Newton's method. Given the nonlinear equation \\\\(F(u^n) = 0\\\\), we produce successive approximations to \\\\(u^n\\\\) as follows:    \\n\\\\begin{eqnarray*}\\n  \\\\mbox{ Find } \\\\delta u^n_l \\\\mbox{ s.t. } F'(u^n_l)\\\\delta u^n_l = -F(u^n_l)\\n  \\\\mbox{, set }  u^n_{l+1} = u^n_l + \\\\delta u^n_l.\\n\\\\end{eqnarray*}\\n\\n The iteration can be initialized with the old time step, i.e. \\\\(u^n_0 = u^{n-1}\\\\), and eventually it will produce a solution to the first equation of the split formulation (see above). For the time discretization of the sine-Gordon equation under consideration here, we have that       \\n\\\\begin{eqnarray*}\\n  F(u^n_l) &=&  \\\\left[ 1-k^2\\\\theta^2\\\\Delta \\\\right] u^n_l -\\n                 \\\\left[ 1+k^2\\\\theta(1-\\\\theta)\\\\Delta\\\\right] u^{n-1} - k v^{n-1}\\n                 + k^2\\\\theta\\\\sin\\\\left[\\\\theta u^n_l + (1-\\\\theta) u^{n-1}\\\\right],\\\\\\\\\\n  F'(u^n_l) &=& 1-k^2\\\\theta^2\\\\Delta + k^2\\\\theta^2\\\\cos\\\\left[\\\\theta u^n_l\\n                        + (1-\\\\theta) u^{n-1}\\\\right].\\n\\\\end{eqnarray*}\\n\\n Notice that while \\\\(F(u^n_l)\\\\) is a function, \\\\(F'(u^n_l)\\\\) is an operator.\\nWeak formulation of the time-discretized equations\\nWith hindsight, we choose both the solution and the test space to be \\\\(H^1(\\\\Omega)\\\\). Hence, multiplying by a test function \\\\(\\\\varphi\\\\) and integrating, we obtain the following variational (or weak) formulation of the split formulation (including the nonlinear solver for the first equation) at each time step:            \\n\\\\begin{eqnarray*}\\n  &\\\\mbox{ Find}& \\\\delta u^n_l \\\\in H^1(\\\\Omega) \\\\mbox{ s.t. }\\n  \\\\left( F'(u^n_l)\\\\delta u^n_l, \\\\varphi \\\\right)_{\\\\Omega}\\n  = -\\\\left(F(u^n_l), \\\\varphi \\\\right)_{\\\\Omega} \\\\;\\\\forall\\\\varphi\\\\in H^1(\\\\Omega),\\n  \\\\mbox{ set } u^n_{l+1} = u^n_l + \\\\delta u^n_l,\\\\; u^n_0 = u^{n-1}.\\\\\\\\\\n  &\\\\mbox{ Find}& v^n \\\\in H^1(\\\\Omega) \\\\mbox{ s.t. }\\n  \\\\left( v^n, \\\\varphi \\\\right)_{\\\\Omega} = \\\\left( v^{n-1}, \\\\varphi \\\\right)_{\\\\Omega}\\n         - k\\\\theta\\\\left( \\\\nabla u^n, \\\\nabla\\\\varphi \\\\right)_{\\\\Omega}\\n         - k (1-\\\\theta)\\\\left( \\\\nabla u^{n-1}, \\\\nabla\\\\varphi \\\\right)_{\\\\Omega}\\n         - k\\\\left(\\\\sin\\\\left[ \\\\theta u^n + (1-\\\\theta) u^{n-1} \\\\right],\\n         \\\\varphi \\\\right)_{\\\\Omega} \\\\;\\\\forall\\\\varphi\\\\in H^1(\\\\Omega).\\n\\\\end{eqnarray*}\\n\\n Note that the we have used integration by parts and the zero Neumann boundary conditions on all terms involving the Laplacian operator. Moreover, \\\\(F(\\\\cdot)\\\\) and \\\\(F'(\\\\cdot)\\\\) are as defined above, and \\\\((\\\\cdot,\\\\cdot)_{\\\\Omega}\\\\) denotes the usual \\\\(L^2\\\\) inner product over the domain \\\\(\\\\Omega\\\\), i.e.  \\\\((f,g)_{\\\\Omega} = \\\\int_\\\\Omega fg\\n\\\\,\\\\mathrm{d}x\\\\). Finally, notice that the first equation is, in fact, the definition of an iterative procedure, so it is solved multiple times during each time step until a stopping criterion is met.\\nDiscretization of the weak formulation in space\\nUsing the Finite Element Method, we discretize the variational formulation in space. To this end, let \\\\(V_h\\\\) be a finite-dimensional \\\\(H^1(\\\\Omega)\\\\)-conforming finite element space (  \\\\(\\\\mathrm{dim}\\\\, V_h = N\\n< \\\\infty\\\\)) with nodal basis \\\\(\\\\{\\\\varphi_1,\\\\ldots,\\\\varphi_N\\\\}\\\\). Now, we can expand all functions in the weak formulation (see above) in terms of the nodal basis. Henceforth, we shall denote by a capital letter the vector of coefficients (in the nodal basis) of a function denoted by the same letter in lower case; e.g.,  \\\\(u^n = \\\\sum_{i=1}^N\\nU^n_i \\\\varphi_i\\\\) where \\\\(U^n \\\\in {R}^N\\\\) and  \\\\(u^n \\\\in\\nH^1(\\\\Omega)\\\\). Thus, the finite-dimensional version of the variational formulation requires that we solve the following matrix equations at each time step:     \\n\\\\begin{eqnarray*}\\n  F_h'(U^{n,l})\\\\delta U^{n,l} &=& -F_h(U^{n,l}), \\\\qquad\\n        U^{n,l+1} = U^{n,l} + \\\\delta U^{n,l}, \\\\qquad U^{n,0} = U^{n-1}; \\\\\\\\\\n  MV^n &=& MV^{n-1} - k \\\\theta AU^n -k (1-\\\\theta) AU^{n-1} - k S(u^n,u^{n-1}).\\n\\\\end{eqnarray*}\\n\\n Above, the matrix \\\\(F_h'(\\\\cdot)\\\\) and the vector \\\\(F_h(\\\\cdot)\\\\) denote the discrete versions of the gadgets discussed above, i.e.,       \\n\\\\begin{eqnarray*}\\n  F_h(U^{n,l}) &=&  \\\\left[ M+k^2\\\\theta^2A \\\\right] U^{n,l} -\\n                \\\\left[ M-k^2\\\\theta(1-\\\\theta)A \\\\right] U^{n-1} - k MV^{n-1}\\n                + k^2\\\\theta S(u^n_l, u^{n-1}),\\\\\\\\\\n  F_h'(U^{n,l}) &=& M+k^2\\\\theta^2A\\n                                + k^2\\\\theta^2N(u^n_l,u^{n-1})\\n\\\\end{eqnarray*}\\n\\n Again, note that the first matrix equation above is, in fact, the definition of an iterative procedure, so it is solved multiple times until a stopping criterion is met. Moreover, \\\\(M\\\\) is the mass matrix, i.e. \\\\(M_{ij} = \\\\left( \\\\varphi_i,\\\\varphi_j \\\\right)_{\\\\Omega}\\\\), \\\\(A\\\\) is the Laplace matrix, i.e.  \\\\(A_{ij} = \\\\left( \\\\nabla \\\\varphi_i, \\\\nabla\\n\\\\varphi_j \\\\right)_{\\\\Omega}\\\\), \\\\(S\\\\) is the nonlinear term in the equation that defines our auxiliary velocity variable, i.e.  \\\\(S_j(f,g) = \\\\left(\\n  \\\\sin\\\\left[ \\\\theta f + (1-\\\\theta) g\\\\right], \\\\varphi_j \\\\right)_{\\\\Omega}\\\\), and \\\\(N\\\\) is the nonlinear term in the Jacobian matrix of \\\\(F(\\\\cdot)\\\\), i.e.  \\\\(N_{ij}(f,g) = \\\\left( \\\\cos\\\\left[ \\\\theta f + (1-\\\\theta) g\\\\right]\\\\varphi_i,\\n  \\\\varphi_j \\\\right)_{\\\\Omega}\\\\).\\nWhat solvers can we use for the first equation? Let's look at the matrix we have to invert:      \\n\\\\[\\n  (M+k^2\\\\theta^2(A + N))_{ij} =\\n  \\\\int_\\\\Omega (1+k^2\\\\theta^2 \\\\cos \\\\alpha)\\n  \\\\varphi_i\\\\varphi_j \\\\; dx\\n  + k^2 \\\\theta^2 \\\\int_\\\\Omega \\\\nabla\\\\varphi_i\\\\nabla\\\\varphi_j \\\\; dx,\\n\\\\]\\n\\n for some \\\\(\\\\alpha\\\\) that depends on the present and previous solution. First, note that the matrix is symmetric. In addition, if the time step \\\\(k\\\\) is small enough, i.e. if \\\\(k\\\\theta<1\\\\), then the matrix is also going to be positive definite. In the program below, this will always be the case, so we will use the Conjugate Gradient method together with the SSOR method as preconditioner. We should keep in mind, however, that this will fail if we happen to use a bigger time step. Fortunately, in that case the solver will just throw an exception indicating a failure to converge, rather than silently producing a wrong result. If that happens, then we can simply replace the CG method by something that can handle indefinite symmetric systems. The GMRES solver is typically the standard method for all \\\"bad\\\" linear systems, but it is also a slow one. Possibly better would be a solver that utilizes the symmetry, such as, for example, SymmLQ, which is also implemented in deal.II.\\nThis program uses a clever optimization over step-23 and step-24: If you read the above formulas closely, it becomes clear that the velocity \\\\(V\\\\) only ever appears in products with the mass matrix. In step-23 and step-24, we were, therefore, a bit wasteful: in each time step, we would solve a linear system with the mass matrix, only to multiply the solution of that system by \\\\(M\\\\) again in the next time step. This can, of course, be avoided, and we do so in this program.\\nThe test case\\nThere are a few analytical solutions for the sine-Gordon equation, both in 1D and 2D. In particular, the program as is computes the solution to a problem with a single kink-like solitary wave initial condition. This solution is given by Leibbrandt in Phys. Rev. Lett. 41(7), and is implemented in the ExactSolution class.\\nIt should be noted that this closed-form solution, strictly speaking, only holds for the infinite-space initial-value problem (not the Neumann initial-boundary-value problem under consideration here). However, given that we impose zero Neumann boundary conditions, we expect that the solution to our initial-boundary-value problem would be close to the solution of the infinite-space initial-value problem, if reflections of waves off the boundaries of our domain do not occur. In practice, this is of course not the case, but we can at least assume that this were so.\\nThe constants \\\\(\\\\vartheta\\\\) and \\\\(\\\\lambda\\\\) in the 2D solution and \\\\(\\\\vartheta\\\\), \\\\(\\\\phi\\\\) and \\\\(\\\\tau\\\\) in the 3D solution are called the B\\u00e4cklund transformation parameters. They control such things as the orientation and steepness of the kink. For the purposes of testing the code against the exact solution, one should choose the parameters so that the kink is aligned with the grid.\\nThe solutions that we implement in the ExactSolution class are these: \\n\\nIn 1D:        \\n\\\\[\\n  u(x,t) =\\n  -4 \\\\arctan\\\\left[\\n     \\\\frac{m}{\\\\sqrt{1-m^2}}\\n     \\\\frac{\\\\sin\\\\left(\\\\sqrt{1-m^2}t+c_2\\\\right)}\\n     {\\\\cosh\\\\left(mx+c_1\\\\right)}\\n     \\\\right],\\n  \\\\]\\n\\n where we choose \\\\(m=\\\\frac 12, c_1=c_2=0\\\\).\\nIn 1D, more interesting analytical solutions are known. Many of them are listed on http://mathworld.wolfram.com/Sine-GordonEquation.html .\\n\\n\\n\\nIn 2D:   \\n\\\\[\\n    u(x,y,t) = 4 \\\\arctan \\\\left[a_0 e^{s\\\\xi}\\\\right],\\n  \\\\]\\n\\n where \\\\(\\\\xi\\\\) is defined as   \\n\\\\[\\n    \\\\xi = x \\\\cos\\\\vartheta + \\\\sin(\\\\vartheta) (y\\\\cosh\\\\lambda + t\\\\sinh \\\\lambda),\\n  \\\\]\\n\\n and where we choose \\\\(\\\\vartheta=\\\\frac \\\\pi 4, \\\\lambda=a_0=s=1\\\\).\\n\\n\\n\\nIn 3D:   \\n\\\\[\\n    u(x,y,z,t) = 4 \\\\arctan \\\\left[c_0 e^{s\\\\xi}\\\\right],\\n  \\\\]\\n\\n where \\\\(\\\\xi\\\\) is defined as    \\n\\\\[\\n    \\\\xi = x \\\\cos\\\\vartheta + y \\\\sin \\\\vartheta \\\\cos\\\\phi +\\n          \\\\sin \\\\vartheta \\\\sin\\\\phi (z\\\\cosh\\\\tau + t\\\\sinh \\\\tau),\\n  \\\\]\\n\\n and where we choose \\\\(\\\\vartheta=\\\\phi=\\\\frac{\\\\pi}{4}, \\\\tau=c_1=s=1\\\\). \\n\\nSince it makes it easier to play around, the InitialValues class that is used to set \\u2014 surprise! \\u2014 the initial values of our simulation simply queries the class that describes the exact solution for the value at the initial time, rather than duplicating the effort to implement a solution function.\\n The commented program\\n Include files and global variables\\nFor an explanation of the include files, the reader should refer to the example programs step-1 through step-4. They are in the standard order, which is base \\u2013 lac \\u2013 grid \\u2013 dofs \\u2013 fe \\u2013 numerics (since each of these categories roughly builds upon previous ones), then a few C++ headers for file input/output and string streams.\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 #include <deal.II/base/utilities.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/dynamic_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/precondition.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/matrix_creator.h>\\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 \\n\\u00a0 #include <fstream>\\n\\u00a0 #include <iostream>\\n\\u00a0 \\n\\u00a0 \\nThe last step is as in all previous programs:\\n\\u00a0 namespace Step25\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n The SineGordonProblem class template\\nThe entire algorithm for solving the problem is encapsulated in this class. As in previous example programs, the class is declared with a template parameter, which is the spatial dimension, so that we can solve the sine-Gordon equation in one, two or three spatial dimensions. For more on the dimension-independent class-encapsulation of the problem, the reader should consult step-3 and step-4.\\nCompared to step-23 and step-24, there isn't anything newsworthy in the general structure of the program (though there is of course in the inner workings of the various functions!). The most notable difference is the presence of the two new functions compute_nl_term and compute_nl_matrix that compute the nonlinear contributions to the system matrix and right-hand side of the first equation, as discussed in the Introduction. In addition, we have to have a vector solution_update that contains the nonlinear update to the solution vector in each Newton step.\\nAs also mentioned in the introduction, we do not store the velocity variable in this program, but the mass matrix times the velocity. This is done in the M_x_velocity variable (the \\\"x\\\" is intended to stand for \\\"times\\\").\\nFinally, the output_timestep_skip variable stores the number of time steps to be taken each time before graphical output is to be generated. This is of importance when using fine meshes (and consequently small time steps) where we would run lots of time steps and create lots of output files of solutions that look almost the same in subsequent files. This only clogs up our visualization procedures and we should avoid creating more output than we are really interested in. Therefore, if this variable is set to a value \\\\(n\\\\) bigger than one, output is generated only every \\\\(n\\\\)th time step.\\n\\u00a0   template <int dim>\\n\\u00a0   class SineGordonProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     SineGordonProblem();\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void         make_grid_and_dofs();\\n\\u00a0     void         assemble_system();\\n\\u00a0     void         compute_nl_term(const Vector<double> &old_data,\\n\\u00a0                                  const Vector<double> &new_data,\\n\\u00a0                                  Vector<double>       &nl_term) const;\\n\\u00a0     void         compute_nl_matrix(const Vector<double> &old_data,\\n\\u00a0                                    const Vector<double> &new_data,\\n\\u00a0                                    SparseMatrix<double> &nl_matrix) const;\\n\\u00a0     unsigned int solve();\\n\\u00a0     void         output_results(const unsigned int timestep_number) const;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     const FE_Q<dim>    fe;\\n\\u00a0     DoFHandler<dim>    dof_handler;\\n\\u00a0 \\n\\u00a0     SparsityPattern      sparsity_pattern;\\n\\u00a0     SparseMatrix<double> system_matrix;\\n\\u00a0     SparseMatrix<double> mass_matrix;\\n\\u00a0     SparseMatrix<double> laplace_matrix;\\n\\u00a0 \\n\\u00a0     const unsigned int n_global_refinements;\\n\\u00a0 \\n\\u00a0     double       time;\\n\\u00a0     const double final_time, time_step;\\n\\u00a0     const double theta;\\n\\u00a0 \\n\\u00a0     Vector<double> solution, solution_update, old_solution;\\n\\u00a0     Vector<double> M_x_velocity;\\n\\u00a0     Vector<double> system_rhs;\\n\\u00a0 \\n\\u00a0     const unsigned int output_timestep_skip;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\nDoFHandlerDefinition dof_handler.h:317\\nFE_QDefinition fe_q.h:554\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nTriangulationDefinition tria.h:1323\\nVectorDefinition vector.h:120\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n Initial conditions\\nIn the following two classes, we first implement the exact solution for 1D, 2d, and 3d mentioned in the introduction to this program. This space-time solution may be of independent interest if one wanted to test the accuracy of the program by comparing the numerical against the analytic solution (note however that the program uses a finite domain, whereas these are analytic solutions for an unbounded domain). This may, for example, be done using the VectorTools::integrate_difference function. Note, again (as was already discussed in step-23), how we describe space-time functions as spatial functions that depend on a time variable that can be set and queried using the FunctionTime::set_time() and FunctionTime::get_time() member functions of the FunctionTime base class of the Function class.\\n\\u00a0   template <int dim>\\n\\u00a0   class ExactSolution : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     ExactSolution(const unsigned int n_components = 1, const double time = 0.)\\n\\u00a0       : Function<dim>(n_components, time)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim> &p,\\n\\u00a0                          const unsigned int /*component*/ = 0) const override\\n\\u00a0     {\\n\\u00a0       const double t = this->get_time();\\n\\u00a0 \\n\\u00a0       switch (dim)\\n\\u00a0         {\\n\\u00a0           case 1:\\n\\u00a0             {\\n\\u00a0               const double m  = 0.5;\\n\\u00a0               const double c1 = 0.;\\n\\u00a0               const double c2 = 0.;\\n\\u00a0               return -4. * std::atan(m / std::sqrt(1. - m * m) *\\n\\u00a0                                      std::sin(std::sqrt(1. - m * m) * t + c2) /\\n\\u00a0                                      std::cosh(m * p[0] + c1));\\n\\u00a0             }\\n\\u00a0 \\n\\u00a0           case 2:\\n\\u00a0             {\\n\\u00a0               const double theta  = numbers::PI / 4.;\\n\\u00a0               const double lambda = 1.;\\n\\u00a0               const double a0     = 1.;\\n\\u00a0               const double s      = 1.;\\n\\u00a0               const double arg    = p[0] * std::cos(theta) +\\n\\u00a0                                  std::sin(theta) * (p[1] * std::cosh(lambda) +\\n\\u00a0                                                     t * std::sinh(lambda));\\n\\u00a0               return 4. * std::atan(a0 * std::exp(s * arg));\\n\\u00a0             }\\n\\u00a0 \\n\\u00a0           case 3:\\n\\u00a0             {\\n\\u00a0               const double theta = numbers::PI / 4;\\n\\u00a0               const double phi   = numbers::PI / 4;\\n\\u00a0               const double tau   = 1.;\\n\\u00a0               const double c0    = 1.;\\n\\u00a0               const double s     = 1.;\\n\\u00a0               const double arg   = p[0] * std::cos(theta) +\\n\\u00a0                                  p[1] * std::sin(theta) * std::cos(phi) +\\n\\u00a0                                  std::sin(theta) * std::sin(phi) *\\n\\u00a0                                    (p[2] * std::cosh(tau) + t * std::sinh(tau));\\n\\u00a0               return 4. * std::atan(c0 * std::exp(s * arg));\\n\\u00a0             }\\n\\u00a0 \\n\\u00a0           default:\\n\\u00a0             DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0             return -1e8;\\n\\u00a0         }\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\nFunctionTime< numbers::NumberTraits< double >::real_type >::get_timenumbers::NumberTraits< double >::real_type get_time() const\\nFunctionDefinition function.h:152\\nFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const\\nPointDefinition point.h:111\\nDEAL_II_NOT_IMPLEMENTED#define DEAL_II_NOT_IMPLEMENTED()Definition exceptions.h:1814\\nDifferentiation::SD::OptimizerType::lambda@ lambda\\nnumbers::PIstatic constexpr double PIDefinition numbers.h:259\\nstd::exp::VectorizedArray< Number, width > exp(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6829\\nstd::sinhinline ::VectorizedArray< Number, width > sinh(const ::VectorizedArray< Number, width > &x)Definition vectorization.h:6729\\nstd::cos::VectorizedArray< Number, width > cos(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6609\\nstd::sin::VectorizedArray< Number, width > sin(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6589\\nstd::coshinline ::VectorizedArray< Number, width > cosh(const ::VectorizedArray< Number, width > &x)Definition vectorization.h:6709\\nstd::sqrt::VectorizedArray< Number, width > sqrt(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6869\\nstd::ataninline ::VectorizedArray< Number, width > atan(const ::VectorizedArray< Number, width > &x)Definition vectorization.h:6689\\nIn the second part of this section, we provide the initial conditions. We are lazy (and cautious) and don't want to implement the same functions as above a second time. Rather, if we are queried for initial conditions, we create an object ExactSolution, set it to the correct time, and let it compute whatever values the exact solution has at that time:\\n\\u00a0   template <int dim>\\n\\u00a0   class InitialValues : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     InitialValues(const unsigned int n_components = 1, const double time = 0.)\\n\\u00a0       : Function<dim>(n_components, time)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       return ExactSolution<dim>(1, this->get_time()).value(p, component);\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n Implementation of the SineGordonProblem class\\nLet's move on to the implementation of the main class, as it implements the algorithm outlined in the introduction.\\n SineGordonProblem::SineGordonProblem\\nThis is the constructor of the SineGordonProblem class. It specifies the desired polynomial degree of the finite elements, associates a DoFHandler to the triangulation object (just as in the example programs step-3 and step-4), initializes the current or initial time, the final time, the time step size, and the value of \\\\(\\\\theta\\\\) for the time stepping scheme. Since the solutions we compute here are time-periodic, the actual value of the start-time doesn't matter, and we choose it so that we start at an interesting time.\\nNote that if we were to chose the explicit Euler time stepping scheme ( \\\\(\\\\theta = 0\\\\)), then we must pick a time step \\\\(k \\\\le h\\\\), otherwise the scheme is not stable and oscillations might arise in the solution. The Crank-Nicolson scheme ( \\\\(\\\\theta = \\\\frac{1}{2}\\\\)) and the implicit Euler scheme ( \\\\(\\\\theta=1\\\\)) do not suffer from this deficiency, since they are unconditionally stable. However, even then the time step should be chosen to be on the order of \\\\(h\\\\) in order to obtain a good solution. Since we know that our mesh results from the uniform subdivision of a rectangle, we can compute that time step easily; if we had a different domain, the technique in step-24 using GridTools::minimal_cell_diameter would work as well.\\n\\u00a0   template <int dim>\\n\\u00a0   SineGordonProblem<dim>::SineGordonProblem()\\n\\u00a0     : fe(1)\\n\\u00a0     , dof_handler(triangulation)\\n\\u00a0     , n_global_refinements(6)\\n\\u00a0     , time(-5.4414)\\n\\u00a0     , final_time(2.7207)\\n\\u00a0     , time_step(10 * 1. / std::pow(2., 1. * n_global_refinements))\\n\\u00a0     , theta(0.5)\\n\\u00a0     , output_timestep_skip(1)\\n\\u00a0   {}\\n\\u00a0 \\nstdSTL namespace.\\n SineGordonProblem::make_grid_and_dofs\\nThis function creates a rectangular grid in dim dimensions and refines it several times. Also, all matrix and vector members of the SineGordonProblem class are initialized to their appropriate sizes once the degrees of freedom have been assembled. Like step-24, we use MatrixCreator functions to generate a mass matrix \\\\(M\\\\) and a Laplace matrix \\\\(A\\\\) and store them in the appropriate variables for the remainder of the program's life.\\n\\u00a0   template <int dim>\\n\\u00a0   void SineGordonProblem<dim>::make_grid_and_dofs()\\n\\u00a0   {\\n\\u00a0     GridGenerator::hyper_cube(triangulation, -10, 10);\\n\\u00a0     triangulation.refine_global(n_global_refinements);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << std::endl\\n\\u00a0               << \\\"   Total number of cells: \\\" << triangulation.n_cells()\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     dof_handler.distribute_dofs(fe);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n\\u00a0     DoFTools::make_sparsity_pattern(dof_handler, dsp);\\n\\u00a0     sparsity_pattern.copy_from(dsp);\\n\\u00a0 \\n\\u00a0     system_matrix.reinit(sparsity_pattern);\\n\\u00a0     mass_matrix.reinit(sparsity_pattern);\\n\\u00a0     laplace_matrix.reinit(sparsity_pattern);\\n\\u00a0 \\n\\u00a0     MatrixCreator::create_mass_matrix(dof_handler,\\n\\u00a0                                       QGauss<dim>(fe.degree + 1),\\n\\u00a0                                       mass_matrix);\\n\\u00a0     MatrixCreator::create_laplace_matrix(dof_handler,\\n\\u00a0                                          QGauss<dim>(fe.degree + 1),\\n\\u00a0                                          laplace_matrix);\\n\\u00a0 \\n\\u00a0     solution.reinit(dof_handler.n_dofs());\\n\\u00a0     solution_update.reinit(dof_handler.n_dofs());\\n\\u00a0     old_solution.reinit(dof_handler.n_dofs());\\n\\u00a0     M_x_velocity.reinit(dof_handler.n_dofs());\\n\\u00a0     system_rhs.reinit(dof_handler.n_dofs());\\n\\u00a0   }\\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nQGaussDefinition quadrature_lib.h:40\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nTriangulation::n_cellsunsigned int n_cells() const\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\nMatrixCreator::create_mass_matrixvoid create_mass_matrix(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, MatrixType &matrix, const Function< spacedim, typename MatrixType::value_type > *const a=nullptr, const AffineConstraints< typename MatrixType::value_type > &constraints=AffineConstraints< typename MatrixType::value_type >())\\nMatrixCreator::create_laplace_matrixvoid create_laplace_matrix(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, MatrixType &matrix, const Function< spacedim, typename MatrixType::value_type > *const a=nullptr, const AffineConstraints< typename MatrixType::value_type > &constraints=AffineConstraints< typename MatrixType::value_type >())\\n SineGordonProblem::assemble_system\\nThis function assembles the system matrix and right-hand side vector for each iteration of Newton's method. The reader should refer to the Introduction for the explicit formulas for the system matrix and right-hand side.\\nNote that during each time step, we have to add up the various contributions to the matrix and right hand sides. In contrast to step-23 and step-24, this requires assembling a few more terms, since they depend on the solution of the previous time step or previous nonlinear step. We use the functions compute_nl_matrix and compute_nl_term to do this, while the present function provides the top-level logic.\\n\\u00a0   template <int dim>\\n\\u00a0   void SineGordonProblem<dim>::assemble_system()\\n\\u00a0   {\\nFirst we assemble the Jacobian matrix \\\\(F'_h(U^{n,l})\\\\), where \\\\(U^{n,l}\\\\) is stored in the vector solution for convenience.\\n\\u00a0     system_matrix.copy_from(mass_matrix);\\n\\u00a0     system_matrix.add(Utilities::fixed_power<2>(time_step * theta),\\n\\u00a0                       laplace_matrix);\\n\\u00a0 \\n\\u00a0     SparseMatrix<double> tmp_matrix(sparsity_pattern);\\n\\u00a0     compute_nl_matrix(old_solution, solution, tmp_matrix);\\n\\u00a0     system_matrix.add(Utilities::fixed_power<2>(time_step * theta), tmp_matrix);\\n\\u00a0 \\nUtilities::fixed_powerconstexpr T fixed_power(const T t)Definition utilities.h:942\\nNext we compute the right-hand side vector. This is just the combination of matrix-vector products implied by the description of \\\\(-F_h(U^{n,l})\\\\) in the introduction.\\n\\u00a0     system_rhs = 0.;\\n\\u00a0 \\n\\u00a0     Vector<double> tmp_vector(solution.size());\\n\\u00a0 \\n\\u00a0     mass_matrix.vmult(system_rhs, solution);\\n\\u00a0     laplace_matrix.vmult(tmp_vector, solution);\\n\\u00a0     system_rhs.add(Utilities::fixed_power<2>(time_step * theta), tmp_vector);\\n\\u00a0 \\n\\u00a0     mass_matrix.vmult(tmp_vector, old_solution);\\n\\u00a0     system_rhs.add(-1.0, tmp_vector);\\n\\u00a0     laplace_matrix.vmult(tmp_vector, old_solution);\\n\\u00a0     system_rhs.add(Utilities::fixed_power<2>(time_step) * theta * (1 - theta),\\n\\u00a0                    tmp_vector);\\n\\u00a0 \\n\\u00a0     system_rhs.add(-time_step, M_x_velocity);\\n\\u00a0 \\n\\u00a0     compute_nl_term(old_solution, solution, tmp_vector);\\n\\u00a0     system_rhs.add(Utilities::fixed_power<2>(time_step) * theta, tmp_vector);\\n\\u00a0 \\n\\u00a0     system_rhs *= -1.;\\n\\u00a0   }\\n\\u00a0 \\n SineGordonProblem::compute_nl_term\\nThis function computes the vector \\\\(S(\\\\cdot,\\\\cdot)\\\\), which appears in the nonlinear term in both equations of the split formulation. This function not only simplifies the repeated computation of this term, but it is also a fundamental part of the nonlinear iterative solver that we use when the time stepping is implicit (i.e. \\\\(\\\\theta\\\\ne 0\\\\)). Moreover, we must allow the function to receive as input an \\\"old\\\" and a \\\"new\\\" solution. These may not be the actual solutions of the problem stored in old_solution and solution, but are simply the two functions we linearize about. For the purposes of this function, let us call the first two arguments \\\\(w_{\\\\mathrm{old}}\\\\) and \\\\(w_{\\\\mathrm{new}}\\\\) in the documentation of this class below, respectively.\\nAs a side-note, it is perhaps worth investigating what order quadrature formula is best suited for this type of integration. Since \\\\(\\\\sin(\\\\cdot)\\\\) is not a polynomial, there are probably no quadrature formulas that can integrate these terms exactly. It is usually sufficient to just make sure that the right hand side is integrated up to the same order of accuracy as the discretization scheme is, but it may be possible to improve on the constant in the asymptotic statement of convergence by choosing a more accurate quadrature formula.\\n\\u00a0   template <int dim>\\n\\u00a0   void SineGordonProblem<dim>::compute_nl_term(const Vector<double> &old_data,\\n\\u00a0                                                const Vector<double> &new_data,\\n\\u00a0                                                Vector<double> &nl_term) const\\n\\u00a0   {\\n\\u00a0     nl_term = 0;\\n\\u00a0     const QGauss<dim> quadrature_formula(fe.degree + 1);\\n\\u00a0     FEValues<dim>     fe_values(fe,\\n\\u00a0                             quadrature_formula,\\n\\u00a0                             update_values | update_JxW_values |\\n\\u00a0                               update_quadrature_points);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     Vector<double>                       local_nl_term(dofs_per_cell);\\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0     std::vector<double>                  old_data_values(n_q_points);\\n\\u00a0     std::vector<double>                  new_data_values(n_q_points);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         local_nl_term = 0;\\nFEValuesDefinition fe_values.h:63\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nOnce we re-initialize our FEValues instantiation to the current cell, we make use of the get_function_values routine to get the values of the \\\"old\\\" data (presumably at \\\\(t=t_{n-1}\\\\)) and the \\\"new\\\" data (presumably at \\\\(t=t_n\\\\)) at the nodes of the chosen quadrature formula.\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0         fe_values.get_function_values(old_data, old_data_values);\\n\\u00a0         fe_values.get_function_values(new_data, new_data_values);\\n\\u00a0 \\nNow, we can evaluate  \\\\(\\\\int_K \\\\sin\\\\left[\\\\theta w_{\\\\mathrm{new}} +\\n   (1-\\\\theta) w_{\\\\mathrm{old}}\\\\right] \\\\,\\\\varphi_j\\\\,\\\\mathrm{d}x\\\\) using the desired quadrature formula.\\n\\u00a0         for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n\\u00a0           for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0             local_nl_term(i) +=\\n\\u00a0               (std::sin(theta * new_data_values[q_point] +\\n\\u00a0                         (1 - theta) * old_data_values[q_point]) *\\n\\u00a0                fe_values.shape_value(i, q_point) * fe_values.JxW(q_point));\\n\\u00a0 \\nWe conclude by adding up the contributions of the integrals over the cells to the global integral.\\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0 \\n\\u00a0         for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0           nl_term(local_dof_indices[i]) += local_nl_term(i);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n SineGordonProblem::compute_nl_matrix\\nThis is the second function dealing with the nonlinear scheme. It computes the matrix \\\\(N(\\\\cdot,\\\\cdot)\\\\), which appears in the nonlinear term in the Jacobian of \\\\(F(\\\\cdot)\\\\). Just as compute_nl_term, we must allow this function to receive as input an \\\"old\\\" and a \\\"new\\\" solution, which we again call \\\\(w_{\\\\mathrm{old}}\\\\) and \\\\(w_{\\\\mathrm{new}}\\\\) below, respectively.\\n\\u00a0   template <int dim>\\n\\u00a0   void SineGordonProblem<dim>::compute_nl_matrix(\\n\\u00a0     const Vector<double> &old_data,\\n\\u00a0     const Vector<double> &new_data,\\n\\u00a0     SparseMatrix<double> &nl_matrix) const\\n\\u00a0   {\\n\\u00a0     const QGauss<dim> quadrature_formula(fe.degree + 1);\\n\\u00a0     FEValues<dim>     fe_values(fe,\\n\\u00a0                             quadrature_formula,\\n\\u00a0                             update_values | update_JxW_values |\\n\\u00a0                               update_quadrature_points);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> local_nl_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0     std::vector<double>                  old_data_values(n_q_points);\\n\\u00a0     std::vector<double>                  new_data_values(n_q_points);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         local_nl_matrix = 0;\\nFullMatrixDefinition full_matrix.h:79\\nAgain, first we re-initialize our FEValues instantiation to the current cell.\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0         fe_values.get_function_values(old_data, old_data_values);\\n\\u00a0         fe_values.get_function_values(new_data, new_data_values);\\n\\u00a0 \\nThen, we evaluate   \\\\(\\\\int_K \\\\cos\\\\left[\\\\theta w_{\\\\mathrm{new}} +\\n   (1-\\\\theta) w_{\\\\mathrm{old}}\\\\right]\\\\, \\\\varphi_i\\\\,\\n   \\\\varphi_j\\\\,\\\\mathrm{d}x\\\\) using the desired quadrature formula.\\n\\u00a0         for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n\\u00a0           for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0             for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0               local_nl_matrix(i, j) +=\\n\\u00a0                 (std::cos(theta * new_data_values[q_point] +\\n\\u00a0                           (1 - theta) * old_data_values[q_point]) *\\n\\u00a0                  fe_values.shape_value(i, q_point) *\\n\\u00a0                  fe_values.shape_value(j, q_point) * fe_values.JxW(q_point));\\n\\u00a0 \\nFinally, we add up the contributions of the integrals over the cells to the global integral.\\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0 \\n\\u00a0         for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0           for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0             nl_matrix.add(local_dof_indices[i],\\n\\u00a0                           local_dof_indices[j],\\n\\u00a0                           local_nl_matrix(i, j));\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n SineGordonProblem::solve\\nAs discussed in the Introduction, this function uses the CG iterative solver on the linear system of equations resulting from the finite element spatial discretization of each iteration of Newton's method for the (nonlinear) first equation of the split formulation. The solution to the system is, in fact, \\\\(\\\\delta U^{n,l}\\\\) so it is stored in solution_update and used to update solution in the run function.\\nNote that we re-set the solution update to zero before solving for it. This is not necessary: iterative solvers can start from any point and converge to the correct solution. If one has a good estimate about the solution of a linear system, it may be worthwhile to start from that vector, but as a general observation it is a fact that the starting point doesn't matter very much: it has to be a very, very good guess to reduce the number of iterations by more than a few. It turns out that for this problem, using the previous nonlinear update as a starting point actually hurts convergence and increases the number of iterations needed, so we simply set it to zero.\\nThe function returns the number of iterations it took to converge to a solution. This number will later be used to generate output on the screen showing how many iterations were needed in each nonlinear iteration.\\n\\u00a0   template <int dim>\\n\\u00a0   unsigned int SineGordonProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     SolverControl            solver_control(1000, 1e-12 * system_rhs.l2_norm());\\n\\u00a0     SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0 \\n\\u00a0     PreconditionSSOR<SparseMatrix<double>> preconditioner;\\n\\u00a0     preconditioner.initialize(system_matrix, 1.2);\\n\\u00a0 \\n\\u00a0     cg.solve(system_matrix, solution_update, system_rhs, preconditioner);\\n\\u00a0 \\n\\u00a0     return solver_control.last_step();\\n\\u00a0   }\\n\\u00a0 \\nPreconditionSSORDefinition precondition.h:1778\\nPreconditionSSOR::initializevoid initialize(const MatrixType &A, const AdditionalData &parameters=AdditionalData())\\nSolverCGDefinition solver_cg.h:179\\nSolverControlDefinition solver_control.h:67\\n SineGordonProblem::output_results\\nThis function outputs the results to a file. It is pretty much identical to the respective functions in step-23 and step-24:\\n\\u00a0   template <int dim>\\n\\u00a0   void SineGordonProblem<dim>::output_results(\\n\\u00a0     const unsigned int timestep_number) const\\n\\u00a0   {\\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0 \\n\\u00a0     data_out.attach_dof_handler(dof_handler);\\n\\u00a0     data_out.add_data_vector(solution, \\\"u\\\");\\n\\u00a0     data_out.build_patches();\\n\\u00a0 \\n\\u00a0     const std::string filename =\\n\\u00a0       \\\"solution-\\\" + Utilities::int_to_string(timestep_number, 3) + \\\".vtu\\\";\\n\\u00a0     DataOutBase::VtkFlags vtk_flags;\\n\\u00a0     vtk_flags.compression_level = DataOutBase::CompressionLevel::best_speed;\\n\\u00a0     data_out.set_flags(vtk_flags);\\n\\u00a0     std::ofstream output(filename);\\n\\u00a0     data_out.write_vtu(output);\\n\\u00a0   }\\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nDataOutBase::CompressionLevel::best_speed@ best_speed\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\nDataOutBase::VtkFlagsDefinition data_out_base.h:1127\\nDataOutBase::VtkFlags::compression_levelDataOutBase::CompressionLevel compression_levelDefinition data_out_base.h:1182\\n SineGordonProblem::run\\nThis function has the top-level control over everything: it runs the (outer) time-stepping loop, the (inner) nonlinear-solver loop, and outputs the solution after each time step.\\n\\u00a0   template <int dim>\\n\\u00a0   void SineGordonProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     make_grid_and_dofs();\\n\\u00a0 \\nTo acknowledge the initial condition, we must use the function \\\\(u_0(x)\\\\) to compute \\\\(U^0\\\\). To this end, below we will create an object of type InitialValues; note that when we create this object (which is derived from the Function class), we set its internal time variable to \\\\(t_0\\\\), to indicate that the initial condition is a function of space and time evaluated at \\\\(t=t_0\\\\).\\nThen we produce \\\\(U^0\\\\) by projecting \\\\(u_0(x)\\\\) onto the grid using VectorTools::project. We have to use the same construct using hanging node constraints as in step-21: the VectorTools::project function requires a hanging node constraints object, but to be used we first need to close it:\\n\\u00a0     {\\n\\u00a0       AffineConstraints<double> constraints;\\n\\u00a0       constraints.close();\\n\\u00a0       VectorTools::project(dof_handler,\\n\\u00a0                            constraints,\\n\\u00a0                            QGauss<dim>(fe.degree + 1),\\n\\u00a0                            InitialValues<dim>(1, time),\\n\\u00a0                            solution);\\n\\u00a0     }\\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nAffineConstraints::closevoid close()\\nVectorTools::projectvoid project(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const AffineConstraints< typename VectorType::value_type > &constraints, const Quadrature< dim > &quadrature, const Function< spacedim, typename VectorType::value_type > &function, VectorType &vec, const bool enforce_zero_boundary=false, const Quadrature< dim - 1 > &q_boundary=(dim > 1 ? QGauss< dim - 1 >(2) :Quadrature< dim - 1 >()), const bool project_to_boundary_first=false)\\nFor completeness, we output the zeroth time step to a file just like any other time step.\\n\\u00a0     output_results(0);\\n\\u00a0 \\nNow we perform the time stepping: at every time step we solve the matrix equation(s) corresponding to the finite element discretization of the problem, and then advance our solution according to the time stepping formulas we discussed in the Introduction.\\n\\u00a0     unsigned int timestep_number = 1;\\n\\u00a0     for (time += time_step; time <= final_time;\\n\\u00a0          time += time_step, ++timestep_number)\\n\\u00a0       {\\n\\u00a0         old_solution = solution;\\n\\u00a0 \\n\\u00a0         std::cout << std::endl\\n\\u00a0                   << \\\"Time step #\\\" << timestep_number << \\\"; \\\"\\n\\u00a0                   << \\\"advancing to t = \\\" << time << '.' << std::endl;\\n\\u00a0 \\nAt the beginning of each time step we must solve the nonlinear equation in the split formulation via Newton's method \\u2014 i.e. solve for \\\\(\\\\delta U^{n,l}\\\\) then compute \\\\(U^{n,l+1}\\\\) and so on. The stopping criterion for this nonlinear iteration is that \\\\(\\\\|F_h(U^{n,l})\\\\|_2 \\\\le 10^{-6} \\\\|F_h(U^{n,0})\\\\|_2\\\\). Consequently, we need to record the norm of the residual in the first iteration.\\nAt the end of each iteration, we output to the console how many linear solver iterations it took us. When the loop below is done, we have (an approximation of) \\\\(U^n\\\\).\\n\\u00a0         double initial_rhs_norm = 0.;\\n\\u00a0         bool   first_iteration  = true;\\n\\u00a0         do\\n\\u00a0           {\\n\\u00a0             assemble_system();\\n\\u00a0 \\n\\u00a0             if (first_iteration == true)\\n\\u00a0               initial_rhs_norm = system_rhs.l2_norm();\\n\\u00a0 \\n\\u00a0             const unsigned int n_iterations = solve();\\n\\u00a0 \\n\\u00a0             solution += solution_update;\\n\\u00a0 \\n\\u00a0             if (first_iteration == true)\\n\\u00a0               std::cout << \\\"    \\\" << n_iterations;\\n\\u00a0             else\\n\\u00a0               std::cout << '+' << n_iterations;\\n\\u00a0             first_iteration = false;\\n\\u00a0           }\\n\\u00a0         while (system_rhs.l2_norm() > 1e-6 * initial_rhs_norm);\\n\\u00a0 \\n\\u00a0         std::cout << \\\" CG iterations per nonlinear step.\\\" << std::endl;\\n\\u00a0 \\nUpon obtaining the solution to the first equation of the problem at \\\\(t=t_n\\\\), we must update the auxiliary velocity variable \\\\(V^n\\\\). However, we do not compute and store \\\\(V^n\\\\) since it is not a quantity we use directly in the problem. Hence, for simplicity, we update \\\\(MV^n\\\\) directly:\\n\\u00a0         Vector<double> tmp_vector(solution.size());\\n\\u00a0         laplace_matrix.vmult(tmp_vector, solution);\\n\\u00a0         M_x_velocity.add(-time_step * theta, tmp_vector);\\n\\u00a0 \\n\\u00a0         laplace_matrix.vmult(tmp_vector, old_solution);\\n\\u00a0         M_x_velocity.add(-time_step * (1 - theta), tmp_vector);\\n\\u00a0 \\n\\u00a0         compute_nl_term(old_solution, solution, tmp_vector);\\n\\u00a0         M_x_velocity.add(-time_step, tmp_vector);\\n\\u00a0 \\nOftentimes, in particular for fine meshes, we must pick the time step to be quite small in order for the scheme to be stable. Therefore, there are a lot of time steps during which \\\"nothing interesting happens\\\" in the solution. To improve overall efficiency \\u2013 in particular, speed up the program and save disk space \\u2013 we only output the solution every output_timestep_skip time steps:\\n\\u00a0         if (timestep_number % output_timestep_skip == 0)\\n\\u00a0           output_results(timestep_number);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 } // namespace Step25\\n\\u00a0 \\n The main function\\nThis is the main function of the program. It creates an object of top-level class and calls its principal function. If exceptions are thrown during the execution of the run method of the SineGordonProblem class, we catch and report them here. For more information about exceptions the reader should consult step-6.\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace Step25;\\n\\u00a0 \\n\\u00a0       SineGordonProblem<1> sg_problem;\\n\\u00a0       sg_problem.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\n Results\\nThe explicit Euler time stepping scheme ( \\\\(\\\\theta=0\\\\)) performs adequately for the problems we wish to solve. Unfortunately, a rather small time step has to be chosen due to stability issues \\u2014 \\\\(k\\\\sim h/10\\\\) appears to work for most the simulations we performed. On the other hand, the Crank-Nicolson scheme ( \\\\(\\\\theta=\\\\frac{1}{2}\\\\)) is unconditionally stable, and (at least for the case of the 1D breather) we can pick the time step to be as large as \\\\(25h\\\\) without any ill effects on the solution. The implicit Euler scheme ( \\\\(\\\\theta=1\\\\)) is \\\"exponentially damped,\\\" so it is not a good choice for solving the sine-Gordon equation, which is conservative. However, some of the damped schemes in the continuum that is offered by the \\\\(\\\\theta\\\\)-method were useful for eliminating spurious oscillations due to boundary effects.\\nIn the simulations below, we solve the sine-Gordon equation on the interval  \\\\(\\\\Omega =\\n[-10,10]\\\\) in 1D and on the square \\\\(\\\\Omega = [-10,10]\\\\times [-10,10]\\\\) in 2D. In each case, the respective grid is refined uniformly 6 times, i.e.  \\\\(h\\\\sim\\n2^{-6}\\\\).\\nAn (1+1)-d Solution\\nThe first example we discuss is the so-called 1D (stationary) breather solution of the sine-Gordon equation. The breather has the following closed-form expression, as mentioned in the Introduction:   \\n\\\\[\\nu_{\\\\mathrm{breather}}(x,t) = -4\\\\arctan \\\\left(\\\\frac{m}{\\\\sqrt{1-m^2}} \\\\frac{\\\\sin\\\\left(\\\\sqrt{1-m^2}t +c_2\\\\right)}{\\\\cosh(mx+c_1)} \\\\right),\\n\\\\]\\n\\n where \\\\(c_1\\\\), \\\\(c_2\\\\) and \\\\(m<1\\\\) are constants. In the simulation below, we have chosen \\\\(c_1=0\\\\), \\\\(c_2=0\\\\), \\\\(m=0.5\\\\). Moreover, it is know that the period of oscillation of the breather is \\\\(2\\\\pi\\\\sqrt{1-m^2}\\\\), hence we have chosen \\\\(t_0=-5.4414\\\\) and \\\\(t_f=2.7207\\\\) so that we can observe three oscillations of the solution. Then, taking \\\\(u_0(x) = u_{\\\\mathrm{breather}}(x,t_0)\\\\), \\\\(\\\\theta=0\\\\) and \\\\(k=h/10\\\\), the program computed the following solution.\\n\\nThough not shown how to do this in the program, another way to visualize the (1+1)-d solution is to use output generated by the DataOutStack class; it allows to \\\"stack\\\" the solutions of individual time steps, so that we get 2D space-time graphs from 1D time-dependent solutions. This produces the space-time plot below instead of the animation above.\\n\\nFurthermore, since the breather is an analytical solution of the sine-Gordon equation, we can use it to validate our code, although we have to assume that the error introduced by our choice of Neumann boundary conditions is small compared to the numerical error. Under this assumption, one could use the VectorTools::integrate_difference function to compute the difference between the numerical solution and the function described by the ExactSolution class of this program. For the simulation shown in the two images above, the \\\\(L^2\\\\) norm of the error in the finite element solution at each time step remained on the order of \\\\(10^{-2}\\\\). Hence, we can conclude that the numerical method has been implemented correctly in the program.\\nA few (2+1)D Solutions\\nThe only analytical solution to the sine-Gordon equation in (2+1)D that can be found in the literature is the so-called kink solitary wave. It has the following closed-form expression:   \\n\\\\[\\n    u(x,y,t) = 4 \\\\arctan \\\\left[a_0 e^{s\\\\xi}\\\\right]\\n  \\\\]\\n\\n with   \\n\\\\[\\n    \\\\xi = x \\\\cos\\\\vartheta + \\\\sin(\\\\vartheta) (y\\\\cosh\\\\lambda + t\\\\sinh \\\\lambda)\\n  \\\\]\\n\\n where \\\\(a_0\\\\), \\\\(\\\\vartheta\\\\) and \\\\(\\\\lambda\\\\) are constants. In the simulation below we have chosen \\\\(a_0=\\\\lambda=1\\\\). Notice that if \\\\(\\\\vartheta=\\\\pi\\\\) the kink is stationary, hence it would make a good solution against which we can validate the program in 2D because no reflections off the boundary of the domain occur.\\nThe simulation shown below was performed with \\\\(u_0(x) = u_{\\\\mathrm{kink}}(x,t_0)\\\\), \\\\(\\\\theta=\\\\frac{1}{2}\\\\), \\\\(k=20h\\\\), \\\\(t_0=1\\\\) and \\\\(t_f=500\\\\). The \\\\(L^2\\\\) norm of the error of the finite element solution at each time step remained on the order of \\\\(10^{-2}\\\\), showing that the program is working correctly in 2D, as well as 1D. Unfortunately, the solution is not very interesting, nonetheless we have included a snapshot of it below for completeness.\\n\\nNow that we have validated the code in 1D and 2D, we move to a problem where the analytical solution is unknown.\\nTo this end, we rotate the kink solution discussed above about the \\\\(z\\\\) axis: we let \\\\(\\\\vartheta=\\\\frac{\\\\pi}{4}\\\\). The latter results in a solitary wave that is not aligned with the grid, so reflections occur at the boundaries of the domain immediately. For the simulation shown below, we have taken \\\\(u_0(x)=u_{\\\\mathrm{kink}}(x,t_0)\\\\), \\\\(\\\\theta=\\\\frac{2}{3}\\\\), \\\\(k=20h\\\\), \\\\(t_0=0\\\\) and \\\\(t_f=20\\\\). Moreover, we had to pick \\\\(\\\\theta=\\\\frac{2}{3}\\\\) because for any \\\\(\\\\theta\\\\le\\\\frac{1}{2}\\\\) oscillations arose at the boundary, which are likely due to the scheme and not the equation, thus picking a value of \\\\(\\\\theta\\\\) a good bit into the \\\"exponentially damped\\\" spectrum of the time stepping schemes assures these oscillations are not created.\\n\\nAnother interesting solution to the sine-Gordon equation (which cannot be obtained analytically) can be produced by using two 1D breathers to construct the following separable 2D initial condition:          \\n\\\\[\\n  u_0(x) =\\n  u_{\\\\mathrm{pseudobreather}}(x,t_0) =\\n  16\\\\arctan \\\\left(\\n    \\\\frac{m}{\\\\sqrt{1-m^2}}\\n    \\\\frac{\\\\sin\\\\left(\\\\sqrt{1-m^2}t_0\\\\right)}{\\\\cosh(mx_1)} \\\\right)\\n  \\\\arctan \\\\left(\\n    \\\\frac{m}{\\\\sqrt{1-m^2}}\\n    \\\\frac{\\\\sin\\\\left(\\\\sqrt{1-m^2}t_0\\\\right)}{\\\\cosh(mx_2)} \\\\right),\\n\\\\]\\n\\n where \\\\(x=(x_1,x_2)\\\\in{R}^2\\\\), \\\\(m=0.5<1\\\\) as in the 1D case we discussed above. For the simulation shown below, we have chosen \\\\(\\\\theta=\\\\frac{1}{2}\\\\), \\\\(k=10h\\\\), \\\\(t_0=-5.4414\\\\) and \\\\(t_f=2.7207\\\\). The solution is pretty interesting \\u2014 it acts like a breather (as far as the pictures are concerned); however, it appears to break up and reassemble, rather than just oscillate.\\n\\n Possibilities for extensions\\nIt is instructive to change the initial conditions. Most choices will not lead to solutions that stay localized (in the soliton community, such solutions are called \\\"stationary\\\", though the solution does change with time), but lead to solutions where the wave-like character of the equation dominates and a wave travels away from the location of a localized initial condition. For example, it is worth playing around with the InitialValues class, by replacing the call to the ExactSolution class by something like this function:   \\n\\\\[\\n  u_0(x,y) = \\\\cos\\\\left(\\\\frac x2\\\\right)\\\\cos\\\\left(\\\\frac y2\\\\right)\\n\\\\]\\n\\n if \\\\(|x|,|y|\\\\le \\\\frac\\\\pi 2\\\\), and \\\\(u_0(x,y)=0\\\\) outside this region.\\nA second area would be to investigate whether the scheme is energy-preserving. For the pure wave equation, discussed in step-23, this is the case if we choose the time stepping parameter such that we get the Crank-Nicolson scheme. One could do a similar thing here, noting that the energy in the sine-Gordon solution is defined as     \\n\\\\[\\n  E(t) = \\\\frac 12 \\\\int_\\\\Omega \\\\left(\\\\frac{\\\\partial u}{\\\\partial\\n  t}\\\\right)^2\\n  + \\\\left(\\\\nabla u\\\\right)^2 + 2 (1-\\\\cos u) \\\\; dx.\\n\\\\]\\n\\n (We use \\\\(1-\\\\cos u\\\\) instead of \\\\(-\\\\cos u\\\\) in the formula to ensure that all contributions to the energy are positive, and so that decaying solutions have finite energy on unbounded domains.)\\nBeyond this, there are two obvious areas:\\n\\nClearly, adaptivity (i.e. time-adaptive grids) would be of interest to problems like these. Their complexity leads us to leave this out of this program again, though the general comments in the introduction of step-23 remain true.\\nFaster schemes to solve this problem. While computers today are plenty fast enough to solve 2d and, frequently, even 3d stationary problems within not too much time, time dependent problems present an entirely different class of problems. We address this topic in step-48 where we show how to solve this problem in parallel and without assembling or inverting any matrix at all.\\n\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2006 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Authors: Ivan Christov, Wolfgang Bangerth, Texas A&M University, 2006\\n */\\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n#include <deal.II/base/utilities.h>\\n \\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/precondition.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/fe/fe_q.h>\\n#include <deal.II/fe/fe_values.h>\\n \\n#include <deal.II/numerics/matrix_creator.h>\\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n \\n#include <fstream>\\n#include <iostream>\\n \\n \\nnamespace Step25\\n{\\n using namespace dealii;\\n \\n \\n \\n template <int dim>\\n class SineGordonProblem\\n  {\\n public:\\n    SineGordonProblem();\\n void run();\\n \\n private:\\n void         make_grid_and_dofs();\\n void         assemble_system();\\n void         compute_nl_term(const Vector<double> &old_data,\\n const Vector<double> &new_data,\\n Vector<double>       &nl_term) const;\\n void         compute_nl_matrix(const Vector<double> &old_data,\\n const Vector<double> &new_data,\\n SparseMatrix<double> &nl_matrix) const;\\n unsigned int solve();\\n void         output_results(const unsigned int timestep_number) const;\\n \\n Triangulation<dim> triangulation;\\n const FE_Q<dim>    fe;\\n DoFHandler<dim>    dof_handler;\\n \\n SparsityPattern      sparsity_pattern;\\n SparseMatrix<double> system_matrix;\\n SparseMatrix<double> mass_matrix;\\n SparseMatrix<double> laplace_matrix;\\n \\n const unsigned int n_global_refinements;\\n \\n double       time;\\n const double final_time, time_step;\\n const double theta;\\n \\n Vector<double> solution, solution_update, old_solution;\\n Vector<double> M_x_velocity;\\n Vector<double> system_rhs;\\n \\n const unsigned int output_timestep_skip;\\n  };\\n \\n \\n \\n template <int dim>\\n class ExactSolution : public Function<dim>\\n  {\\n public:\\n    ExactSolution(const unsigned int n_components = 1, const double time = 0.)\\n      : Function<dim>(n_components, time)\\n    {}\\n \\n \\n \\n virtual double value(const Point<dim> &p,\\n const unsigned int /*component*/ = 0) const override\\n {\\n const double t = this->get_time();\\n \\n switch (dim)\\n        {\\n case 1:\\n            {\\n const double m  = 0.5;\\n const double c1 = 0.;\\n const double c2 = 0.;\\n return -4. * std::atan(m / std::sqrt(1. - m * m) *\\n std::sin(std::sqrt(1. - m * m) * t + c2) /\\n std::cosh(m * p[0] + c1));\\n            }\\n \\n case 2:\\n            {\\n const double theta  = numbers::PI / 4.;\\n const double lambda = 1.;\\n const double a0     = 1.;\\n const double s      = 1.;\\n const double arg    = p[0] * std::cos(theta) +\\n std::sin(theta) * (p[1] * std::cosh(lambda) +\\n                                                    t * std::sinh(lambda));\\n return 4. * std::atan(a0 * std::exp(s * arg));\\n            }\\n \\n case 3:\\n            {\\n const double theta = numbers::PI / 4;\\n const double phi   = numbers::PI / 4;\\n const double tau   = 1.;\\n const double c0    = 1.;\\n const double s     = 1.;\\n const double arg   = p[0] * std::cos(theta) +\\n                                 p[1] * std::sin(theta) * std::cos(phi) +\\n std::sin(theta) * std::sin(phi) *\\n                                   (p[2] * std::cosh(tau) + t * std::sinh(tau));\\n return 4. * std::atan(c0 * std::exp(s * arg));\\n            }\\n \\n default:\\n DEAL_II_NOT_IMPLEMENTED();\\n return -1e8;\\n        }\\n    }\\n  };\\n \\n template <int dim>\\n class InitialValues : public Function<dim>\\n  {\\n public:\\n    InitialValues(const unsigned int n_components = 1, const double time = 0.)\\n      : Function<dim>(n_components, time)\\n    {}\\n \\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override\\n {\\n return ExactSolution<dim>(1, this->get_time()).value(p, component);\\n    }\\n  };\\n \\n \\n \\n \\n \\n template <int dim>\\n  SineGordonProblem<dim>::SineGordonProblem()\\n    : fe(1)\\n    , dof_handler(triangulation)\\n    , n_global_refinements(6)\\n    , time(-5.4414)\\n    , final_time(2.7207)\\n    , time_step(10 * 1. / std::pow(2., 1. * n_global_refinements))\\n    , theta(0.5)\\n    , output_timestep_skip(1)\\n  {}\\n \\n \\n template <int dim>\\n void SineGordonProblem<dim>::make_grid_and_dofs()\\n  {\\n GridGenerator::hyper_cube(triangulation, -10, 10);\\n triangulation.refine_global(n_global_refinements);\\n \\n    std::cout << \\\"   Number of active cells: \\\" << triangulation.n_active_cells()\\n              << std::endl\\n              << \\\"   Total number of cells: \\\" << triangulation.n_cells()\\n              << std::endl;\\n \\n    dof_handler.distribute_dofs(fe);\\n \\n    std::cout << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n              << std::endl;\\n \\n DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler, dsp);\\n    sparsity_pattern.copy_from(dsp);\\n \\n    system_matrix.reinit(sparsity_pattern);\\n mass_matrix.reinit(sparsity_pattern);\\n    laplace_matrix.reinit(sparsity_pattern);\\n \\n MatrixCreator::create_mass_matrix(dof_handler,\\n QGauss<dim>(fe.degree + 1),\\n                                      mass_matrix);\\n MatrixCreator::create_laplace_matrix(dof_handler,\\n QGauss<dim>(fe.degree + 1),\\n                                         laplace_matrix);\\n \\n    solution.reinit(dof_handler.n_dofs());\\n    solution_update.reinit(dof_handler.n_dofs());\\n    old_solution.reinit(dof_handler.n_dofs());\\n    M_x_velocity.reinit(dof_handler.n_dofs());\\n    system_rhs.reinit(dof_handler.n_dofs());\\n  }\\n \\n \\n template <int dim>\\n void SineGordonProblem<dim>::assemble_system()\\n  {\\n    system_matrix.copy_from(mass_matrix);\\n    system_matrix.add(Utilities::fixed_power<2>(time_step * theta),\\n                      laplace_matrix);\\n \\n SparseMatrix<double> tmp_matrix(sparsity_pattern);\\n    compute_nl_matrix(old_solution, solution, tmp_matrix);\\n    system_matrix.add(Utilities::fixed_power<2>(time_step * theta), tmp_matrix);\\n \\n    system_rhs = 0.;\\n \\n Vector<double> tmp_vector(solution.size());\\n \\n mass_matrix.vmult(system_rhs, solution);\\n    laplace_matrix.vmult(tmp_vector, solution);\\n    system_rhs.add(Utilities::fixed_power<2>(time_step * theta), tmp_vector);\\n \\n mass_matrix.vmult(tmp_vector, old_solution);\\n    system_rhs.add(-1.0, tmp_vector);\\n    laplace_matrix.vmult(tmp_vector, old_solution);\\n    system_rhs.add(Utilities::fixed_power<2>(time_step) * theta * (1 - theta),\\n                   tmp_vector);\\n \\n    system_rhs.add(-time_step, M_x_velocity);\\n \\n    compute_nl_term(old_solution, solution, tmp_vector);\\n    system_rhs.add(Utilities::fixed_power<2>(time_step) * theta, tmp_vector);\\n \\n    system_rhs *= -1.;\\n  }\\n \\n \\n template <int dim>\\n void SineGordonProblem<dim>::compute_nl_term(const Vector<double> &old_data,\\n const Vector<double> &new_data,\\n Vector<double> &nl_term) const\\n {\\n    nl_term = 0;\\n const QGauss<dim> quadrature_formula(fe.degree + 1);\\n FEValues<dim>     fe_values(fe,\\n                            quadrature_formula,\\n update_values | update_JxW_values |\\n update_quadrature_points);\\n \\n const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n Vector<double>                       local_nl_term(dofs_per_cell);\\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n    std::vector<double>                  old_data_values(n_q_points);\\n    std::vector<double>                  new_data_values(n_q_points);\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        local_nl_term = 0;\\n        fe_values.reinit(cell);\\n        fe_values.get_function_values(old_data, old_data_values);\\n        fe_values.get_function_values(new_data, new_data_values);\\n \\n for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n            local_nl_term(i) +=\\n              (std::sin(theta * new_data_values[q_point] +\\n                        (1 - theta) * old_data_values[q_point]) *\\n               fe_values.shape_value(i, q_point) * fe_values.JxW(q_point));\\n \\n        cell->get_dof_indices(local_dof_indices);\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n          nl_term(local_dof_indices[i]) += local_nl_term(i);\\n      }\\n  }\\n \\n \\n template <int dim>\\n void SineGordonProblem<dim>::compute_nl_matrix(\\n const Vector<double> &old_data,\\n const Vector<double> &new_data,\\n SparseMatrix<double> &nl_matrix) const\\n {\\n const QGauss<dim> quadrature_formula(fe.degree + 1);\\n FEValues<dim>     fe_values(fe,\\n                            quadrature_formula,\\n update_values | update_JxW_values |\\n update_quadrature_points);\\n \\n const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n FullMatrix<double> local_nl_matrix(dofs_per_cell, dofs_per_cell);\\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n    std::vector<double>                  old_data_values(n_q_points);\\n    std::vector<double>                  new_data_values(n_q_points);\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        local_nl_matrix = 0;\\n        fe_values.reinit(cell);\\n        fe_values.get_function_values(old_data, old_data_values);\\n        fe_values.get_function_values(new_data, new_data_values);\\n \\n for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n              local_nl_matrix(i, j) +=\\n                (std::cos(theta * new_data_values[q_point] +\\n                          (1 - theta) * old_data_values[q_point]) *\\n                 fe_values.shape_value(i, q_point) *\\n                 fe_values.shape_value(j, q_point) * fe_values.JxW(q_point));\\n \\n        cell->get_dof_indices(local_dof_indices);\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n            nl_matrix.add(local_dof_indices[i],\\n                          local_dof_indices[j],\\n                          local_nl_matrix(i, j));\\n      }\\n  }\\n \\n \\n \\n \\n template <int dim>\\n unsigned int SineGordonProblem<dim>::solve()\\n  {\\n SolverControl            solver_control(1000, 1e-12 * system_rhs.l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n \\n PreconditionSSOR<SparseMatrix<double>> preconditioner;\\n    preconditioner.initialize(system_matrix, 1.2);\\n \\n    cg.solve(system_matrix, solution_update, system_rhs, preconditioner);\\n \\n return solver_control.last_step();\\n  }\\n \\n \\n template <int dim>\\n void SineGordonProblem<dim>::output_results(\\n const unsigned int timestep_number) const\\n {\\n DataOut<dim> data_out;\\n \\n    data_out.attach_dof_handler(dof_handler);\\n    data_out.add_data_vector(solution, \\\"u\\\");\\n    data_out.build_patches();\\n \\n const std::string filename =\\n \\\"solution-\\\" + Utilities::int_to_string(timestep_number, 3) + \\\".vtu\\\";\\n DataOutBase::VtkFlags vtk_flags;\\n    vtk_flags.compression_level = DataOutBase::CompressionLevel::best_speed;\\n    data_out.set_flags(vtk_flags);\\n    std::ofstream output(filename);\\n    data_out.write_vtu(output);\\n  }\\n \\n \\n template <int dim>\\n void SineGordonProblem<dim>::run()\\n  {\\n    make_grid_and_dofs();\\n \\n    {\\n AffineConstraints<double> constraints;\\n      constraints.close();\\n VectorTools::project(dof_handler,\\n                           constraints,\\n QGauss<dim>(fe.degree + 1),\\n                           InitialValues<dim>(1, time),\\n                           solution);\\n    }\\n \\n    output_results(0);\\n \\n unsigned int timestep_number = 1;\\n for (time += time_step; time <= final_time;\\n         time += time_step, ++timestep_number)\\n      {\\n        old_solution = solution;\\n \\n        std::cout << std::endl\\n                  << \\\"Time step #\\\" << timestep_number << \\\"; \\\"\\n                  << \\\"advancing to t = \\\" << time << '.' << std::endl;\\n \\n double initial_rhs_norm = 0.;\\n bool   first_iteration  = true;\\n do\\n          {\\n            assemble_system();\\n \\n if (first_iteration == true)\\n              initial_rhs_norm = system_rhs.l2_norm();\\n \\n const unsigned int n_iterations = solve();\\n \\n            solution += solution_update;\\n \\n if (first_iteration == true)\\n              std::cout << \\\"    \\\" << n_iterations;\\n else\\n              std::cout << '+' << n_iterations;\\n            first_iteration = false;\\n          }\\n while (system_rhs.l2_norm() > 1e-6 * initial_rhs_norm);\\n \\n        std::cout << \\\" CG iterations per nonlinear step.\\\" << std::endl;\\n \\n Vector<double> tmp_vector(solution.size());\\n        laplace_matrix.vmult(tmp_vector, solution);\\n        M_x_velocity.add(-time_step * theta, tmp_vector);\\n \\n        laplace_matrix.vmult(tmp_vector, old_solution);\\n        M_x_velocity.add(-time_step * (1 - theta), tmp_vector);\\n \\n        compute_nl_term(old_solution, solution, tmp_vector);\\n        M_x_velocity.add(-time_step, tmp_vector);\\n \\n if (timestep_number % output_timestep_skip == 0)\\n          output_results(timestep_number);\\n      }\\n  }\\n} // namespace Step25\\n \\n \\nint main()\\n{\\n try\\n    {\\n using namespace Step25;\\n \\n      SineGordonProblem<1> sg_problem;\\n      sg_problem.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nDataOutInterface::write_vtuvoid write_vtu(std::ostream &out) constDefinition data_out_base.cc:7692\\nDataOutInterface::set_flagsvoid set_flags(const FlagType &flags)Definition data_out_base.cc:8863\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nSparseMatrix::addvoid add(const size_type i, const size_type j, const number value)\\ndof_handler.h\\ndof_tools.h\\ndynamic_sparsity_pattern.h\\nfe_values.h\\nfe_q.h\\nfull_matrix.h\\nfunction.h\\ntria.h\\ngrid_generator.h\\nutilities.h\\nmatrix_creator.h\\nLocalIntegrators::L2::mass_matrixvoid mass_matrix(FullMatrix< double > &M, const FEValuesBase< dim > &fe, const double factor=1.)Definition l2.h:57\\nUtilities::System::get_timestd::string get_time()Definition utilities.cc:1013\\ninternal::EvaluatorQuantity::value@ value\\nstd::pow::VectorizedArray< Number, width > pow(const ::VectorizedArray< Number, width > &, const Number p)Definition vectorization.h:6885\\ndata_out.h\\nprecondition.h\\nquadrature_lib.h\\nsolver_cg.h\\nsparse_matrix.h\\nvector.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"