"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_31.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-31 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-31 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-31 tutorial program\\n\\n\\nThis tutorial depends on step-22.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\nThe Boussinesq equations\\nBoundary and initial conditions\\nSolution approach\\n\\nTime stepping\\nWeak form and space discretization for the Stokes part\\nStabilization, weak form and space discretization for the temperature equation\\nLinear solvers\\n\\nLinear solvers for the Stokes problem\\nLinear solvers for the temperature equation\\n\\n\\nImplementation details\\n\\nUsing different DoFHandler objects\\nUsing Trilinos\\n\\nThe testcase\\n\\n The commented program\\n\\nInclude files\\nEquation data\\nLinear solvers and preconditioners\\n\\nThe InverseMatrix class template\\nSchur complement preconditioner\\n\\nThe BoussinesqFlowProblem class template\\nBoussinesqFlowProblem class implementation\\n\\nBoussinesqFlowProblem::BoussinesqFlowProblem\\nBoussinesqFlowProblem::get_maximal_velocity\\nBoussinesqFlowProblem::get_extrapolated_temperature_range\\nBoussinesqFlowProblem::compute_viscosity\\nBoussinesqFlowProblem::setup_dofs\\nBoussinesqFlowProblem::assemble_stokes_preconditioner\\nBoussinesqFlowProblem::build_stokes_preconditioner\\nBoussinesqFlowProblem::assemble_stokes_system\\nBoussinesqFlowProblem::assemble_temperature_matrix\\nBoussinesqFlowProblem::assemble_temperature_system\\nBoussinesqFlowProblem::solve\\nBoussinesqFlowProblem::output_results\\nBoussinesqFlowProblem::refine_mesh\\nBoussinesqFlowProblem::run\\n\\nThe main function\\n\\n\\n Results\\n\\n Results in 2d \\n Results in 3d \\n Numerical experiments to determine optimal parameters \\n\\n Choosing ck and beta \\n\\nResults for Q1 elements\\nResults for Q2 elements\\nResults for 3d\\nConclusions\\n\\n\\n Possibilities for extensions \\n\\n The plain program\\n   \\n\\n\\nThis program was contributed by Martin Kronbichler and Wolfgang Bangerth. \\n This material is based upon work partly supported by the National Science Foundation under Award No. EAR-0426271 and The California Institute of Technology. Any opinions, findings, and conclusions or recommendations expressed in this publication are those of the author and do not necessarily reflect the views of the National Science Foundation or of The California Institute of Technology. \\n Introduction\\nThe Boussinesq equations\\nThis program deals with an interesting physical problem: how does a fluid (i.e., a liquid or gas) behave if it experiences differences in buoyancy caused by temperature differences? It is clear that those parts of the fluid that are hotter (and therefore lighter) are going to rise up and those that are cooler (and denser) are going to sink down with gravity.\\nIn cases where the fluid moves slowly enough such that inertial effects can be neglected, the equations that describe such behavior are the Boussinesq equations that read as follows:            \\n\\\\begin{eqnarray*}\\n  -\\\\nabla \\\\cdot (2 \\\\eta \\\\varepsilon ({\\\\mathbf u})) + \\\\nabla p &=&\\n  -\\\\rho\\\\; \\\\beta \\\\; T\\\\; \\\\mathbf{g},\\n  \\\\\\\\\\n  \\\\nabla \\\\cdot {\\\\mathbf u} &=& 0,\\n  \\\\\\\\\\n  \\\\frac{\\\\partial T}{\\\\partial t}\\n  +\\n  {\\\\mathbf u} \\\\cdot \\\\nabla T\\n  -\\n  \\\\nabla \\\\cdot \\\\kappa \\\\nabla T &=& \\\\gamma.\\n\\\\end{eqnarray*}\\n\\n These equations fall into the class of vector-valued problems (a toplevel overview of this topic can be found in the Handling vector valued problems topic). Here, \\\\(\\\\mathbf u\\\\) is the velocity field, \\\\(p\\\\) the pressure, and \\\\(T\\\\) the temperature of the fluid.  \\\\(\\\\varepsilon ({\\\\mathbf u}) = \\\\frac 12\\n[(\\\\nabla{\\\\mathbf u}) + (\\\\nabla {\\\\mathbf u})^T]\\\\) is the symmetric gradient of the velocity. As can be seen, velocity and pressure solve a Stokes equation describing the motion of an incompressible fluid, an equation we have previously considered in step-22; we will draw extensively on the experience we have gained in that program, in particular with regard to efficient linear Stokes solvers.\\nThe forcing term of the fluid motion is the buoyancy of the fluid, expressed as the product of the density \\\\(\\\\rho\\\\), the thermal expansion coefficient \\\\(\\\\beta\\\\), the temperature \\\\(T\\\\) and the gravity vector \\\\(\\\\mathbf{g}\\\\) pointing downward. (A derivation of why the right hand side looks like it looks is given in the introduction of step-32.) While the first two equations describe how the fluid reacts to temperature differences by moving around, the third equation states how the fluid motion affects the temperature field: it is an advection diffusion equation, i.e., the temperature is attached to the fluid particles and advected along in the flow field, with an additional diffusion (heat conduction) term. In many applications, the diffusion coefficient is fairly small, and the temperature equation is in fact transport, not diffusion dominated and therefore in character more hyperbolic than elliptic; we will have to take this into account when developing a stable discretization.\\nIn the equations above, the term \\\\(\\\\gamma\\\\) on the right hand side denotes the heat sources and may be a spatially and temporally varying function. \\\\(\\\\eta\\\\) and \\\\(\\\\kappa\\\\) denote the viscosity and diffusivity coefficients, which we assume constant for this tutorial program. The more general case when \\\\(\\\\eta\\\\) depends on the temperature is an important factor in physical applications: Most materials become more fluid as they get hotter (i.e., \\\\(\\\\eta\\\\) decreases with \\\\(T\\\\)); sometimes, as in the case of rock minerals at temperatures close to their melting point, \\\\(\\\\eta\\\\) may change by orders of magnitude over the typical range of temperatures.\\nWe note that the Stokes equation above could be nondimensionalized by introducing the Rayleigh number \\\\(\\\\mathrm{Ra}=\\\\frac{\\\\|\\\\mathbf{g}\\\\| \\\\beta \\\\rho}{\\\\eta \\\\kappa} \\\\delta T L^3\\\\) using a typical length scale \\\\(L\\\\), typical temperature difference \\\\(\\\\delta T\\\\), density \\\\(\\\\rho\\\\), thermal diffusivity \\\\(\\\\eta\\\\), and thermal conductivity \\\\(\\\\kappa\\\\). \\\\(\\\\mathrm{Ra}\\\\) is a dimensionless number that describes the ratio of heat transport due to convection induced by buoyancy changes from temperature differences, and of heat transport due to thermal diffusion. A small Rayleigh number implies that buoyancy is not strong relative to viscosity and fluid motion \\\\(\\\\mathbf{u}\\\\) is slow enough so that heat diffusion \\\\(\\\\kappa\\\\nabla T\\\\) is the dominant heat transport term. On the other hand, a fluid with a high Rayleigh number will show vigorous convection that dominates heat conduction.\\nFor most fluids for which we are interested in computing thermal convection, the Rayleigh number is very large, often \\\\(10^6\\\\) or larger. From the structure of the equations, we see that this will lead to large pressure differences and large velocities. Consequently, the convection term in the convection-diffusion equation for \\\\(T\\\\) will also be very large and an accurate solution of this equation will require us to choose small time steps. Problems with large Rayleigh numbers are therefore hard to solve numerically for similar reasons that make solving the Navier-Stokes equations hard to solve when the Reynolds number \\\\(\\\\mathrm{Re}\\\\) is large.\\nNote that a large Rayleigh number does not necessarily involve large velocities in absolute terms. For example, the Rayleigh number in the earth mantle is larger than \\\\(10^6\\\\). Yet the velocities are small: the material is in fact solid rock but it is so hot and under pressure that it can flow very slowly, on the order of at most a few centimeters per year. Nevertheless, this can lead to mixing over time scales of many million years, a time scale much shorter than for the same amount of heat to be distributed by thermal conductivity and a time scale of relevance to affect the evolution of the earth's interior and surface structure.\\nNoteIf you are interested in using the program as the basis for your own experiments, you will also want to take a look at its continuation in step-32. Furthermore, step-32 later was developed into the much larger open source code ASPECT (see https://aspect.geodynamics.org/ ) that can solve realistic problems and that you may want to investigate before trying to morph step-31 into something that can solve whatever you want to solve.\\nBoundary and initial conditions\\nSince the Boussinesq equations are derived under the assumption that inertia of the fluid's motion does not play a role, the flow field is at each time entirely determined by buoyancy difference at that time, not by the flow field at previous times. This is reflected by the fact that the first two equations above are the steady state Stokes equation that do not contain a time derivative. Consequently, we do not need initial conditions for either velocities or pressure. On the other hand, the temperature field does satisfy an equation with a time derivative, so we need initial conditions for \\\\(T\\\\).\\nAs for boundary conditions: if \\\\(\\\\kappa>0\\\\) then the temperature satisfies a second order differential equation that requires boundary data all around the boundary for all times. These can either be a prescribed boundary temperature \\\\(T|_{\\\\partial\\\\Omega}=T_b\\\\) (Dirichlet boundary conditions), or a prescribed thermal flux  \\\\(\\\\mathbf{n}\\\\cdot\\\\kappa\\\\nabla\\nT|_{\\\\partial\\\\Omega}=\\\\phi\\\\); in this program, we will use an insulated boundary condition, i.e., prescribe no thermal flux: \\\\(\\\\phi=0\\\\).\\nSimilarly, the velocity field requires us to pose boundary conditions. These may be no-slip no-flux conditions \\\\(\\\\mathbf{u}=0\\\\) on \\\\(\\\\partial\\\\Omega\\\\) if the fluid sticks to the boundary, or no normal flux conditions  \\\\(\\\\mathbf n \\\\cdot \\\\mathbf\\nu = 0\\\\) if the fluid can flow along but not across the boundary, or any number of other conditions that are physically reasonable. In this program, we will use no normal flux conditions.\\nSolution approach\\nLike the equations solved in step-21, we here have a system of differential-algebraic equations (DAE): with respect to the time variable, only the temperature equation is a differential equation whereas the Stokes system for \\\\(\\\\mathbf{u}\\\\) and \\\\(p\\\\) has no time-derivatives and is therefore of the sort of an algebraic constraint that has to hold at each time instant. The main difference to step-21 is that the algebraic constraint there was a mixed Laplace system of the form    \\n\\\\begin{eqnarray*}\\n  \\\\mathbf u + {\\\\mathbf K}\\\\lambda \\\\nabla p &=& 0, \\\\\\\\\\n  \\\\nabla\\\\cdot \\\\mathbf u &=& f,\\n\\\\end{eqnarray*}\\n\\n where now we have a Stokes system    \\n\\\\begin{eqnarray*}\\n  -\\\\nabla \\\\cdot (2 \\\\eta \\\\varepsilon ({\\\\mathbf u})) + \\\\nabla p &=& f, \\\\\\\\\\n  \\\\nabla\\\\cdot \\\\mathbf u &=& 0,\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\nabla \\\\cdot \\\\eta \\\\varepsilon (\\\\cdot)\\\\) is an operator similar to the Laplacian \\\\(\\\\Delta\\\\) applied to a vector field.\\nGiven the similarity to what we have done in step-21, it may not come as a surprise that we choose a similar approach, although we will have to make adjustments for the change in operator in the top-left corner of the differential operator.\\nTime stepping\\nThe structure of the problem as a DAE allows us to use the same strategy as we have already used in step-21, i.e., we use a time lag scheme: we first solve the temperature equation (using an extrapolated velocity field), and then insert the new temperature solution into the right hand side of the velocity equation. The way we implement this in our code looks at things from a slightly different perspective, though. We first solve the Stokes equations for velocity and pressure using the temperature field from the previous time step, which means that we get the velocity for the previous time step. In other words, we first solve the Stokes system for time step \\\\(n - 1\\\\) as      \\n\\\\begin{eqnarray*}\\n  -\\\\nabla \\\\cdot (2\\\\eta \\\\varepsilon ({\\\\mathbf u}^{n-1})) + \\\\nabla p^{n-1} &=&\\n  -\\\\rho\\\\; \\\\beta \\\\; T^{n-1} \\\\mathbf{g},\\n  \\\\\\\\\\n  \\\\nabla \\\\cdot {\\\\mathbf u}^{n-1} &=& 0,\\n\\\\end{eqnarray*}\\n\\n and then the temperature equation with an extrapolated velocity field to time \\\\(n\\\\).\\nIn contrast to step-21, we'll use a higher order time stepping scheme here, namely the Backward Differentiation Formula scheme of order 2 (BDF-2 in short) that replaces the time derivative \\\\(\\\\frac{\\\\partial T}{\\\\partial t}\\\\) by the (one-sided) difference quotient \\\\(\\\\frac{\\\\frac 32 T^{n}-2T^{n-1}+\\\\frac 12 T^{n-2}}{k}\\\\) with \\\\(k\\\\) the time step size. This gives the discretized-in-time temperature equation             \\n\\\\begin{eqnarray*}\\n  \\\\frac 32 T^n\\n  -\\n  k\\\\nabla \\\\cdot \\\\kappa \\\\nabla T^n\\n  &=&\\n  2 T^{n-1}\\n  -\\n  \\\\frac 12 T^{n-2}\\n  -\\n  k(2{\\\\mathbf u}^{n-1} - {\\\\mathbf u}^{n-2} ) \\\\cdot \\\\nabla (2T^{n-1}-T^{n-2})\\n  +\\n  k\\\\gamma.\\n\\\\end{eqnarray*}\\n\\n Note how the temperature equation is solved semi-explicitly: diffusion is treated implicitly whereas advection is treated explicitly using an extrapolation (or forward-projection) of temperature and velocity, including the just-computed velocity \\\\({\\\\mathbf u}^{n-1}\\\\). The forward-projection to the current time level \\\\(n\\\\) is derived from a Taylor expansion,   \\\\(T^n\\n\\\\approx T^{n-1} + k_n \\\\frac{\\\\partial T}{\\\\partial t} \\\\approx T^{n-1} + k_n\\n\\\\frac{T^{n-1}-T^{n-2}}{k_n} = 2T^{n-1}-T^{n-2}\\\\). We need this projection for maintaining the order of accuracy of the BDF-2 scheme. In other words, the temperature fields we use in the explicit right hand side are second order approximations of the current temperature field \\u2014 not quite an explicit time stepping scheme, but by character not too far away either.\\nThe introduction of the temperature extrapolation limits the time step by a Courant-Friedrichs-Lewy (CFL) condition just like it was in step-21. (We wouldn't have had that stability condition if we treated the advection term implicitly since the BDF-2 scheme is A-stable, at the price that we needed to build a new temperature matrix at each time step.) We will discuss the exact choice of time step in the results section, but for the moment of importance is that this CFL condition means that the time step size \\\\(k\\\\) may change from time step to time step, and that we have to modify the above formula slightly. If \\\\(k_n,k_{n-1}\\\\) are the time steps sizes of the current and previous time step, then we use the approximations           \\n\\\\begin{align*}\\n\\\\frac{\\\\partial T}{\\\\partial t} \\\\approx\\n \\\\frac 1{k_n}\\n \\\\left(\\n       \\\\frac{2k_n+k_{n-1}}{k_n+k_{n-1}} T^{n}\\n       -\\n       \\\\frac{k_n+k_{n-1}}{k_{n-1}}T^{n-1}\\n       +\\n       \\\\frac{k_n^2}{k_{n-1}(k_n+k_{n-1})} T^{n-2}\\n \\\\right)\\n \\\\end{align*}\\n\\n and         \\n\\\\begin{align*}\\nT^n \\\\approx\\n   T^{n-1} + k_n \\\\frac{\\\\partial T}{\\\\partial t}\\n   \\\\approx\\n   T^{n-1} + k_n\\n   \\\\frac{T^{n-1}-T^{n-2}}{k_{n-1}}\\n   =\\n   \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right)T^{n-1}-\\\\frac{k_n}{k_{n-1}}T^{n-2},\\n\\\\end{align*}\\n\\n and above equation is generalized as follows:             \\n\\\\begin{eqnarray*}\\n  \\\\frac{2k_n+k_{n-1}}{k_n+k_{n-1}} T^n\\n  -\\n  k_n\\\\nabla \\\\cdot \\\\kappa \\\\nabla T^n\\n  &=&\\n  \\\\frac{k_n+k_{n-1}}{k_{n-1}} T^{n-1}\\n  -\\n  \\\\frac{k_n^2}{k_{n-1}(k_n+k_{n-1})} T^{n-2}\\n  -\\n  k_n{\\\\mathbf u}^{*,n} \\\\cdot \\\\nabla T^{*,n}\\n  +\\n  k_n\\\\gamma,\\n\\\\end{eqnarray*}\\n\\nwhere  \\\\({(\\\\cdot)}^{*,n} = \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right)(\\\\cdot)^{n-1} -\\n\\\\frac{k_n}{k_{n-1}}(\\\\cdot)^{n-2}\\\\) denotes the extrapolation of velocity \\\\(\\\\mathbf u\\\\) and temperature \\\\(T\\\\) to time level \\\\(n\\\\), using the values at the two previous time steps. That's not an easy to read equation, but will provide us with the desired higher order accuracy. As a consistency check, it is easy to verify that it reduces to the same equation as above if \\\\(k_n=k_{n-1}\\\\).\\nAs a final remark we note that the choice of a higher order time stepping scheme of course forces us to keep more time steps in memory; in particular, we here will need to have \\\\(T^{n-2}\\\\) around, a vector that we could previously discard. This seems like a nuisance that we were able to avoid previously by using only a first order time stepping scheme, but as we will see below when discussing the topic of stabilization, we will need this vector anyway and so keeping it around for time discretization is essentially for free and gives us the opportunity to use a higher order scheme.\\nWeak form and space discretization for the Stokes part\\nLike solving the mixed Laplace equations, solving the Stokes equations requires us to choose particular pairs of finite elements for velocities and pressure variables. Because this has already been discussed in step-22, we only cover this topic briefly: Here, we use the stable pair \\\\(Q_{p+1}^d \\\\times Q_p, p\\\\ge 1\\\\). These are continuous elements, so we can form the weak form of the Stokes equation without problem by integrating by parts and substituting continuous functions by their discrete counterparts:         \\n\\\\begin{eqnarray*}\\n  (\\\\nabla {\\\\mathbf v}_h, 2\\\\eta \\\\varepsilon ({\\\\mathbf u}^{n-1}_h))\\n  -\\n  (\\\\nabla \\\\cdot {\\\\mathbf v}_h, p^{n-1}_h)\\n  &=&\\n  -({\\\\mathbf v}_h, \\\\rho\\\\; \\\\beta \\\\; T^{n-1}_h \\\\mathbf{g}),\\n  \\\\\\\\\\n  (q_h, \\\\nabla \\\\cdot {\\\\mathbf u}^{n-1}_h) &=& 0,\\n\\\\end{eqnarray*}\\n\\n for all test functions \\\\(\\\\mathbf v_h, q_h\\\\). The first term of the first equation is considered as the inner product between tensors, i.e.   \\\\((\\\\nabla {\\\\mathbf v}_h, \\\\eta \\\\varepsilon ({\\\\mathbf u}^{n-1}_h))_\\\\Omega\\n = \\\\int_\\\\Omega \\\\sum_{i,j=1}^d [\\\\nabla {\\\\mathbf v}_h]_{ij}\\n           \\\\eta [\\\\varepsilon ({\\\\mathbf u}^{n-1}_h)]_{ij}\\\\, dx\\\\). Because the second tensor in this product is symmetric, the anti-symmetric component of \\\\(\\\\nabla {\\\\mathbf v}_h\\\\) plays no role and it leads to the entirely same form if we use the symmetric gradient of \\\\(\\\\mathbf v_h\\\\) instead. Consequently, the formulation we consider and that we implement is         \\n\\\\begin{eqnarray*}\\n  (\\\\varepsilon({\\\\mathbf v}_h), 2\\\\eta \\\\varepsilon ({\\\\mathbf u}^{n-1}_h))\\n  -\\n  (\\\\nabla \\\\cdot {\\\\mathbf v}_h, p^{n-1}_h)\\n  &=&\\n  -({\\\\mathbf v}_h, \\\\rho\\\\; \\\\beta \\\\; T^{n-1}_h \\\\mathbf{g}),\\n  \\\\\\\\\\n  (q_h, \\\\nabla \\\\cdot {\\\\mathbf u}^{n-1}_h) &=& 0.\\n\\\\end{eqnarray*}\\n\\nThis is exactly the same as what we already discussed in step-22 and there is not much more to say about this here.\\nStabilization, weak form and space discretization for the temperature equation\\nThe more interesting question is what to do with the temperature advection-diffusion equation. By default, not all discretizations of this equation are equally stable unless we either do something like upwinding, stabilization, or all of this. One way to achieve this is to use discontinuous elements (i.e., the FE_DGQ class that we used, for example, in the discretization of the transport equation in step-12, or in discretizing the pressure in step-20 and step-21) and to define a flux at the interface between cells that takes into account upwinding. If we had a pure advection problem this would probably be the simplest way to go. However, here we have some diffusion as well, and the discretization of the Laplace operator with discontinuous elements is cumbersome because of the significant number of additional terms that need to be integrated on each face between cells. Discontinuous elements also have the drawback that the use of numerical fluxes introduces an additional numerical diffusion that acts everywhere, whereas we would really like to minimize the effect of numerical diffusion to a minimum and only apply it where it is necessary to stabilize the scheme.\\nA better alternative is therefore to add some nonlinear viscosity to the model. Essentially, what this does is to transform the temperature equation from the form       \\n\\\\begin{eqnarray*}\\n  \\\\frac{\\\\partial T}{\\\\partial t}\\n  +\\n  {\\\\mathbf u} \\\\cdot \\\\nabla T\\n  -\\n  \\\\nabla \\\\cdot \\\\kappa \\\\nabla T &=& \\\\gamma\\n\\\\end{eqnarray*}\\n\\n to something like       \\n\\\\begin{eqnarray*}\\n  \\\\frac{\\\\partial T}{\\\\partial t}\\n  +\\n  {\\\\mathbf u} \\\\cdot \\\\nabla T\\n  -\\n  \\\\nabla \\\\cdot (\\\\kappa+\\\\nu(T)) \\\\nabla T &=& \\\\gamma,\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\nu(T)\\\\) is an addition viscosity (diffusion) term that only acts in the vicinity of shocks and other discontinuities. \\\\(\\\\nu(T)\\\\) is chosen in such a way that if \\\\(T\\\\) satisfies the original equations, the additional viscosity is zero.\\nTo achieve this, the literature contains a number of approaches. We will here follow one developed by Guermond and Popov that builds on a suitably defined residual and a limiting procedure for the additional viscosity. To this end, let us define a residual \\\\(R_\\\\alpha(T)\\\\) as follows:            \\n\\\\begin{eqnarray*}\\n  R_\\\\alpha(T)\\n  =\\n  \\\\left(\\n  \\\\frac{\\\\partial T}{\\\\partial t}\\n  +\\n  {\\\\mathbf u} \\\\cdot \\\\nabla T\\n  -\\n  \\\\nabla \\\\cdot \\\\kappa \\\\nabla T - \\\\gamma\\n  \\\\right)\\n  T^{\\\\alpha-1}\\n\\\\end{eqnarray*}\\n\\n where we will later choose the stabilization exponent \\\\(\\\\alpha\\\\) from within the range \\\\([1,2]\\\\). Note that \\\\(R_\\\\alpha(T)\\\\) will be zero if \\\\(T\\\\) satisfies the temperature equation, since then the term in parentheses will be zero. Multiplying terms out, we get the following, entirely equivalent form:                  \\n\\\\begin{eqnarray*}\\n  R_\\\\alpha(T)\\n  =\\n  \\\\frac 1\\\\alpha\\n  \\\\frac{\\\\partial (T^\\\\alpha)}{\\\\partial t}\\n  +\\n  \\\\frac 1\\\\alpha\\n  {\\\\mathbf u} \\\\cdot \\\\nabla (T^\\\\alpha)\\n  -\\n  \\\\frac 1\\\\alpha\\n  \\\\nabla \\\\cdot \\\\kappa \\\\nabla (T^\\\\alpha)\\n  +\\n  \\\\kappa(\\\\alpha-1)\\n  T^{\\\\alpha-2} |\\\\nabla T|^2\\n  -\\n  \\\\gamma\\n  T^{\\\\alpha-1}\\n\\\\end{eqnarray*}\\n\\nWith this residual, we can now define the artificial viscosity as a piecewise constant function defined on each cell \\\\(K\\\\) with diameter \\\\(h_K\\\\) separately as follows:           \\n\\\\begin{eqnarray*}\\n  \\\\nu_\\\\alpha(T)|_K\\n  =\\n  \\\\beta\\n  \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}\\n  \\\\min\\\\left\\\\{\\n    h_K,\\n    h_K^\\\\alpha\\n    \\\\frac{\\\\|R_\\\\alpha(T)\\\\|_{L^\\\\infty(K)}}{c(\\\\mathbf{u},T)}\\n  \\\\right\\\\}\\n\\\\end{eqnarray*}\\n\\nHere, \\\\(\\\\beta\\\\) is a stabilization constant (a dimensional analysis reveals that it is unitless and therefore independent of scaling; we will discuss its choice in the results section) and \\\\(c(\\\\mathbf{u},T)\\\\) is a normalization constant that must have units \\\\(\\\\frac{m^{\\\\alpha-1}K^\\\\alpha}{s}\\\\). We will choose it as   \\\\(c(\\\\mathbf{u},T) =\\n c_R\\\\ \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(\\\\Omega)} \\\\ \\\\mathrm{var}(T)\\n \\\\ |\\\\mathrm{diam}(\\\\Omega)|^{\\\\alpha-2}\\\\), where \\\\(\\\\mathrm{var}(T)=\\\\max_\\\\Omega T - \\\\min_\\\\Omega T\\\\) is the range of present temperature values (remember that buoyancy is driven by temperature variations, not the absolute temperature) and \\\\(c_R\\\\) is a dimensionless constant. To understand why this method works consider this: If on a particular cell \\\\(K\\\\) the temperature field is smooth, then we expect the residual to be small there (in fact to be on the order of \\\\({\\\\cal O}(h_K)\\\\)) and the stabilization term that injects artificial diffusion will there be of size \\\\(h_K^{\\\\alpha+1}\\\\) \\u2014 i.e., rather small, just as we hope it to be when no additional diffusion is necessary. On the other hand, if we are on or close to a discontinuity of the temperature field, then the residual will be large; the minimum operation in the definition of \\\\(\\\\nu_\\\\alpha(T)\\\\) will then ensure that the stabilization has size \\\\(h_K\\\\) \\u2014 the optimal amount of artificial viscosity to ensure stability of the scheme.\\nWhether or not this scheme really works is a good question. Computations by Guermond and Popov have shown that this form of stabilization actually performs much better than most of the other stabilization schemes that are around (for example streamline diffusion, to name only the simplest one). Furthermore, for  \\\\(\\\\alpha\\\\in\\n[1,2)\\\\) they can even prove that it produces better convergence orders for the linear transport equation than for example streamline diffusion. For \\\\(\\\\alpha=2\\\\), no theoretical results are currently available, but numerical tests indicate that the results are considerably better than for \\\\(\\\\alpha=1\\\\).\\nA more practical question is how to introduce this artificial diffusion into the equations we would like to solve. Note that the numerical viscosity \\\\(\\\\nu(T)\\\\) is temperature-dependent, so the equation we want to solve is nonlinear in \\\\(T\\\\) \\u2014 not what one desires from a simple method to stabilize an equation, and even less so if we realize that \\\\(\\\\nu(T)\\\\) is nondifferentiable in \\\\(T\\\\). However, there is no reason to despair: we still have to discretize in time and we can treat the term explicitly.\\nIn the definition of the stabilization parameter, we approximate the time derivative by  \\\\(\\\\frac{\\\\partial T}{\\\\partial t} \\\\approx\\n\\\\frac{T^{n-1}-T^{n-2}}{k^{n-1}}\\\\). This approximation makes only use of available time data and this is the reason why we need to store data of two previous time steps (which enabled us to use the BDF-2 scheme without additional storage cost). We could now simply evaluate the rest of the terms at \\\\(t_{n-1}\\\\), but then the discrete residual would be nothing else than a backward Euler approximation, which is only first order accurate. So, in case of smooth solutions, the residual would be still of the order \\\\(h\\\\), despite the second order time accuracy in the outer BDF-2 scheme and the spatial FE discretization. This is certainly not what we want to have (in fact, we desired to have small residuals in regions where the solution behaves nicely), so a bit more care is needed. The key to this problem is to observe that the first derivative as we constructed it is actually centered at \\\\(t_{n-\\\\frac{3}{2}}\\\\). We get the desired second order accurate residual calculation if we evaluate all spatial terms at \\\\(t_{n-\\\\frac{3}{2}}\\\\) by using the approximation \\\\(\\\\frac 12 T^{n-1}+\\\\frac 12 T^{n-2}\\\\), which means that we calculate the nonlinear viscosity as a function of this intermediate temperature,  \\\\(\\\\nu_\\\\alpha =\\n\\\\nu_\\\\alpha\\\\left(\\\\frac 12 T^{n-1}+\\\\frac 12 T^{n-2}\\\\right)\\\\). Note that this evaluation of the residual is nothing else than a Crank-Nicolson scheme, so we can be sure that now everything is alright. One might wonder whether it is a problem that the numerical viscosity now is not evaluated at time \\\\(n\\\\) (as opposed to the rest of the equation). However, this offset is uncritical: For smooth solutions, \\\\(\\\\nu_\\\\alpha\\\\) will vary continuously, so the error in time offset is \\\\(k\\\\) times smaller than the nonlinear viscosity itself, i.e., it is a small higher order contribution that is left out. That's fine because the term itself is already at the level of discretization error in smooth regions.\\nUsing the BDF-2 scheme introduced above, this yields for the simpler case of uniform time steps of size \\\\(k\\\\):                         \\n\\\\begin{eqnarray*}\\n  \\\\frac 32 T^n\\n  -\\n  k\\\\nabla \\\\cdot \\\\kappa \\\\nabla T^n\\n  &=&\\n  2 T^{n-1}\\n  -\\n  \\\\frac 12 T^{n-2}\\n  \\\\\\\\\\n  &&\\n  +\\n  k\\\\nabla \\\\cdot\\n  \\\\left[\\n    \\\\nu_\\\\alpha\\\\left(\\\\frac 12 T^{n-1}+\\\\frac 12 T^{n-2}\\\\right)\\n    \\\\ \\\\nabla (2T^{n-1}-T^{n-2})\\n  \\\\right]\\n  \\\\\\\\\\n  &&\\n  -\\n  k(2{\\\\mathbf u}^{n-1}-{\\\\mathbf u}^{n-2}) \\\\cdot \\\\nabla (2T^{n-1}-T^{n-2})\\n  \\\\\\\\\\n  &&\\n  +\\n  k\\\\gamma.\\n\\\\end{eqnarray*}\\n\\n On the left side of this equation remains the term from the time derivative and the original (physical) diffusion which we treat implicitly (this is actually a nice term: the matrices that result from the left hand side are the mass matrix and a multiple of the Laplace matrix \\u2014 both are positive definite and if the time step size \\\\(k\\\\) is small, the sum is simple to invert). On the right hand side, the terms in the first line result from the time derivative; in the second line is the artificial diffusion at time  \\\\(t_{n-\\\\frac\\n32}\\\\); the third line contains the advection term, and the fourth the sources. Note that the artificial diffusion operates on the extrapolated temperature at the current time in the same way as we have discussed the advection works in the section on time stepping.\\nThe form for nonuniform time steps that we will have to use in reality is a bit more complicated (which is why we showed the simpler form above first) and reads:                                   \\n\\\\begin{eqnarray*}\\n  \\\\frac{2k_n+k_{n-1}}{k_n+k_{n-1}} T^n\\n  -\\n  k_n\\\\nabla \\\\cdot \\\\kappa \\\\nabla T^n\\n  &=&\\n  \\\\frac{k_n+k_{n-1}}{k_{n-1}} T^{n-1}\\n  -\\n  \\\\frac{k_n^2}{k_{n-1}(k_n+k_{n-1})} T^{n-2}\\n  \\\\\\\\\\n  &&\\n  +\\n  k_n\\\\nabla \\\\cdot\\n  \\\\left[\\n    \\\\nu_\\\\alpha\\\\left(\\\\frac 12 T^{n-1}+\\\\frac 12 T^{n-2}\\\\right)\\n    \\\\ \\\\nabla  \\\\left[\\n    \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right)T^{n-1}-\\\\frac{k_n}{k_{n-1}}T^{n-2}\\n  \\\\right]\\n  \\\\right]\\n  \\\\\\\\\\n  &&\\n  -\\n  k_n\\n  \\\\left[\\n    \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right){\\\\mathbf u}^{n-1} -\\n    \\\\frac{k_n}{k_{n-1}}{\\\\mathbf u}^{n-2}\\n  \\\\right]\\n  \\\\cdot \\\\nabla\\n  \\\\left[\\n    \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right)T^{n-1}-\\\\frac{k_n}{k_{n-1}}T^{n-2}\\n  \\\\right]\\n  \\\\\\\\\\n  &&\\n  +\\n  k_n\\\\gamma.\\n\\\\end{eqnarray*}\\n\\nAfter settling all these issues, the weak form follows naturally from the strong form shown in the last equation, and we immediately arrive at the weak form of the discretized equations:                                 \\n\\\\begin{eqnarray*}\\n  \\\\frac{2k_n+k_{n-1}}{k_n+k_{n-1}} (\\\\tau_h,T_h^n)\\n  +\\n  k_n (\\\\nabla \\\\tau_h, \\\\kappa \\\\nabla T_h^n)\\n  &=&\\n  \\\\biggl(\\\\tau_h,\\n  \\\\frac{k_n+k_{n-1}}{k_{n-1}} T_h^{n-1}\\n  -\\n  \\\\frac{k_n^2}{k_{n-1}(k_n+k_{n-1})} T_h^{n-2}\\n  \\\\\\\\\\n  &&\\\\qquad\\n  -\\n  k_n\\n  \\\\left[\\n    \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right){\\\\mathbf u}^{n-1} -\\n    \\\\frac{k_n}{k_{n-1}}{\\\\mathbf u}^{n-2}\\n  \\\\right]\\n  \\\\cdot \\\\nabla\\n  \\\\left[\\n    \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right)T^{n-1}-\\\\frac{k_n}{k_{n-1}}T^{n-2}\\n  \\\\right]\\n  +\\n  k_n\\\\gamma \\\\biggr)\\n  \\\\\\\\\\n  &&\\n  -\\n  k_n \\\\left(\\\\nabla \\\\tau_h,\\n    \\\\nu_\\\\alpha\\\\left(\\\\frac 12 T_h^{n-1}+\\\\frac 12 T_h^{n-2}\\\\right)\\n    \\\\ \\\\nabla \\\\left[\\n    \\\\left(1+\\\\frac{k_n}{k_{n-1}}\\\\right)T^{n-1}-\\\\frac{k_n}{k_{n-1}}T^{n-2}\\n  \\\\right]\\n  \\\\right)\\n\\\\end{eqnarray*}\\n\\n for all discrete test functions \\\\(\\\\tau_h\\\\). Here, the diffusion term has been integrated by parts, and we have used that we will impose no thermal flux, \\\\(\\\\mathbf{n}\\\\cdot\\\\kappa\\\\nabla T|_{\\\\partial\\\\Omega}=0\\\\).\\nThis then results in a matrix equation of form    \\n\\\\begin{eqnarray*}\\n  \\\\left( \\\\frac{2k_n+k_{n-1}}{k_n+k_{n-1}} M+k_n A_T\\\\right) T_h^n\\n  = F(U_h^{n-1}, U_h^{n-2},T_h^{n-1},T_h^{n-2}),\\n\\\\end{eqnarray*}\\n\\n which given the structure of matrix on the left (the sum of two positive definite matrices) is easily solved using the Conjugate Gradient method.\\nLinear solvers\\nAs explained above, our approach to solving the joint system for velocities/pressure on the one hand and temperature on the other is to use an operator splitting where we first solve the Stokes system for the velocities and pressures using the old temperature field, and then solve for the new temperature field using the just computed velocity field. (A more extensive discussion of operator splitting methods can be found in step-58.)\\nLinear solvers for the Stokes problem\\nSolving the linear equations coming from the Stokes system has been discussed in great detail in step-22. In particular, in the results section of that program, we have discussed a number of alternative linear solver strategies that turned out to be more efficient than the original approach. The best alternative identified there we to use a GMRES solver preconditioned by a block matrix involving the Schur complement. Specifically, the Stokes operator leads to a block structured matrix     \\n\\\\begin{eqnarray*}\\n  \\\\left(\\\\begin{array}{cc}\\n    A & B^T \\\\\\\\ B & 0\\n  \\\\end{array}\\\\right)\\n\\\\end{eqnarray*}\\n\\n and as discussed there a good preconditioner is               \\n\\\\begin{eqnarray*}\\n  P\\n  =\\n  \\\\left(\\\\begin{array}{cc}\\n    A & 0 \\\\\\\\ B & -S\\n  \\\\end{array}\\\\right),\\n  \\\\qquad\\n  \\\\text{or equivalently}\\n  \\\\qquad\\n  P^{-1}\\n  =\\n  \\\\left(\\\\begin{array}{cc}\\n    A^{-1} & 0 \\\\\\\\ S^{-1} B A^{-1} & -S^{-1}\\n  \\\\end{array}\\\\right)\\n\\\\end{eqnarray*}\\n\\n where \\\\(S\\\\) is the Schur complement of the Stokes operator \\\\(S=B^TA^{-1}B\\\\). Of course, this preconditioner is not useful because we can't form the various inverses of matrices, but we can use the following as a preconditioner:       \\n\\\\begin{eqnarray*}\\n  \\\\tilde P^{-1}\\n  =\\n  \\\\left(\\\\begin{array}{cc}\\n    \\\\tilde A^{-1} & 0 \\\\\\\\ \\\\tilde S^{-1} B \\\\tilde A^{-1} & -\\\\tilde S^{-1}\\n  \\\\end{array}\\\\right)\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\tilde A^{-1},\\\\tilde S^{-1}\\\\) are approximations to the inverse matrices. In particular, it turned out that \\\\(S\\\\) is spectrally equivalent to the mass matrix and consequently replacing  \\\\(\\\\tilde\\nS^{-1}\\\\) by a CG solver applied to the mass matrix on the pressure space was a good choice. In a small deviation from step-22, we here have a coefficient \\\\(\\\\eta\\\\) in the momentum equation, and by the same derivation as there we should arrive at the conclusion that it is the weighted mass matrix with entries \\\\(\\\\tilde S_{ij}=(\\\\eta^{-1}\\\\varphi_i,\\\\varphi_j)\\\\) that we should be using.\\nIt was more complicated to come up with a good replacement  \\\\(\\\\tilde\\nA^{-1}\\\\), which corresponds to the discretized symmetric Laplacian of the vector-valued velocity field, i.e.  \\\\(A_{ij} = (\\\\varepsilon {\\\\mathbf v}_i, 2\\\\eta \\\\varepsilon ({\\\\mathbf\\nv}_j))\\\\). In step-22 we used a sparse LU decomposition (using the SparseDirectUMFPACK class) of \\\\(A\\\\) for \\\\(\\\\tilde A^{-1}\\\\) \\u2014 the perfect preconditioner \\u2014 in 2d, but for 3d memory and compute time is not usually sufficient to actually compute this decomposition; consequently, we only use an incomplete LU decomposition (ILU, using the SparseILU class) in 3d.\\nFor this program, we would like to go a bit further. To this end, note that the symmetrized bilinear form on vector fields, \\\\((\\\\varepsilon {\\\\mathbf v}_i, 2 \\\\eta \\\\varepsilon ({\\\\mathbf v}_j))\\\\) is not too far away from the nonsymmetrized version,    \\\\((\\\\nabla {\\\\mathbf v}_i, \\\\eta \\\\nabla {\\\\mathbf v}_j)\\n= \\\\sum_{k,l=1}^d\\n  (\\\\partial_k ({\\\\mathbf v}_i)_l, \\\\eta \\\\partial_k ({\\\\mathbf v}_j)_l)\\n\\\\) (note that the factor 2 has disappeared in this form). The latter, however, has the advantage that the dim vector components of the test functions are not coupled (well, almost, see below), i.e., the resulting matrix is block-diagonal: one block for each vector component, and each of these blocks is equal to the Laplace matrix for this vector component. So assuming we order degrees of freedom in such a way that first all \\\\(x\\\\)-components of the velocity are numbered, then the \\\\(y\\\\)-components, and then the \\\\(z\\\\)-components, then the matrix \\\\(\\\\hat A\\\\) that is associated with this slightly different bilinear form has the form      \\n\\\\begin{eqnarray*}\\n  \\\\hat A =\\n  \\\\left(\\\\begin{array}{ccc}\\n    A_s & 0 & 0 \\\\\\\\ 0 & A_s & 0 \\\\\\\\ 0 & 0 & A_s\\n  \\\\end{array}\\\\right)\\n\\\\end{eqnarray*}\\n\\n where \\\\(A_s\\\\) is a Laplace matrix of size equal to the number of shape functions associated with each component of the vector-valued velocity. With this matrix, one could be tempted to define our preconditioner for the velocity matrix \\\\(A\\\\) as follows:        \\n\\\\begin{eqnarray*}\\n  \\\\tilde A^{-1} =\\n  \\\\left(\\\\begin{array}{ccc}\\n    \\\\tilde A_s^{-1} & 0 & 0 \\\\\\\\\\n    0 & \\\\tilde A_s^{-1} & 0 \\\\\\\\\\n    0 & 0 & \\\\tilde A_s^{-1}\\n  \\\\end{array}\\\\right),\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\tilde A_s^{-1}\\\\) is a preconditioner for the Laplace matrix \\u2014 something where we know very well how to build good preconditioners!\\nIn reality, the story is not quite as simple: To make the matrix \\\\(\\\\tilde A\\\\) definite, we need to make the individual blocks  \\\\(\\\\tilde\\nA_s\\\\) definite by applying boundary conditions. One can try to do so by applying Dirichlet boundary conditions all around the boundary, and then the so-defined preconditioner \\\\(\\\\tilde A^{-1}\\\\) turns out to be a good preconditioner for \\\\(A\\\\) if the latter matrix results from a Stokes problem where we also have Dirichlet boundary conditions on the velocity components all around the domain, i.e., if we enforce  \\\\(\\\\mathbf{u} =\\n0\\\\).\\nUnfortunately, this \\\"if\\\" is an \\\"if and only if\\\": in the program below we will want to use no-flux boundary conditions of the form  \\\\(\\\\mathbf u\\n\\\\cdot \\\\mathbf n = 0\\\\) (i.e., flow parallel to the boundary is allowed, but no flux through the boundary). In this case, it turns out that the block diagonal matrix defined above is not a good preconditioner because it neglects the coupling of components at the boundary. A better way to do things is therefore if we build the matrix \\\\(\\\\hat A\\\\) as the vector Laplace matrix  \\\\(\\\\hat A_{ij} = (\\\\nabla {\\\\mathbf v}_i,\\n\\\\eta \\\\nabla {\\\\mathbf v}_j)\\\\) and then apply the same boundary condition as we applied to \\\\(A\\\\). If this is a Dirichlet boundary condition all around the domain, the \\\\(\\\\hat A\\\\) will decouple to three diagonal blocks as above, and if the boundary conditions are of the form  \\\\(\\\\mathbf u\\n\\\\cdot \\\\mathbf n = 0\\\\) then this will introduce a coupling of degrees of freedom at the boundary but only there. This, in fact, turns out to be a much better preconditioner than the one introduced above, and has almost all the benefits of what we hoped to get.\\nTo sum this whole story up, we can observe: \\n\\nCompared to building a preconditioner from the original matrix \\\\(A\\\\) resulting from the symmetric gradient as we did in step-22, we have to expect that the preconditioner based on the Laplace bilinear form performs worse since it does not take into account the coupling between vector components.\\n\\n\\n\\nOn the other hand, preconditioners for the Laplace matrix are typically more mature and perform better than ones for vector problems. For example, at the time of this writing, Algebraic Multigrid (AMG) algorithms are very well developed for scalar problems, but not so for vector problems.\\n\\n\\n\\nIn building this preconditioner, we will have to build up the matrix \\\\(\\\\hat A\\\\) and its preconditioner. While this means that we have to store an additional matrix we didn't need before, the preconditioner \\\\(\\\\tilde A_s^{-1}\\\\) is likely going to need much less memory than storing a preconditioner for the coupled matrix \\\\(A\\\\). This is because the matrix \\\\(A_s\\\\) has only a third of the entries per row for all rows corresponding to interior degrees of freedom, and contains coupling between vector components only on those parts of the boundary where the boundary conditions introduce such a coupling. Storing the matrix is therefore comparatively cheap, and we can expect that computing and storing the preconditioner \\\\(\\\\tilde A_s\\\\) will also be much cheaper compared to doing so for the fully coupled matrix. \\n\\nLinear solvers for the temperature equation\\nThis is the easy part: The matrix for the temperature equation has the form \\\\(\\\\alpha M + \\\\beta A\\\\), where \\\\(M,A\\\\) are mass and stiffness matrices on the temperature space, and \\\\(\\\\alpha,\\\\beta\\\\) are constants related the time stepping scheme and the current and previous time step. This being the sum of a symmetric positive definite and a symmetric positive semidefinite matrix, the result is also symmetric positive definite. Furthermore, \\\\(\\\\frac\\\\beta\\\\alpha\\\\) is a number proportional to the time step, and so becomes small whenever the mesh is fine, damping the effect of the then ill-conditioned stiffness matrix.\\nAs a consequence, inverting this matrix with the Conjugate Gradient algorithm, using a simple preconditioner, is trivial and very cheap compared to inverting the Stokes matrix.\\nImplementation details\\nUsing different DoFHandler objects\\nOne of the things worth explaining up front about the program below is the use of two different DoFHandler objects. If one looks at the structure of the equations above and the scheme for their solution, one realizes that there is little commonality that keeps the Stokes part and the temperature part together. In all previous tutorial programs in which we have discussed vector-valued problems we have always only used a single finite element with several vector components, and a single DoFHandler object. Sometimes, we have substructured the resulting matrix into blocks to facilitate particular solver schemes; this was, for example, the case in the step-22 program for the Stokes equations upon which the current program is based.\\nWe could of course do the same here. The linear system that we would get would look like this:            \\n\\\\begin{eqnarray*}\\n  \\\\left(\\\\begin{array}{ccc}\\n    A & B^T & 0 \\\\\\\\ B & 0 &0 \\\\\\\\ C & 0 & K\\n  \\\\end{array}\\\\right)\\n  \\\\left(\\\\begin{array}{ccc}\\n    U^{n-1} \\\\\\\\ P^{n-1} \\\\\\\\ T^n\\n  \\\\end{array}\\\\right)\\n  =\\n  \\\\left(\\\\begin{array}{ccc}\\n    F_U(T^{n-1}) \\\\\\\\ 0 \\\\\\\\ F_T(U^{n-1},U^{n-2},T^{n-1},T^{n-2})\\n  \\\\end{array}\\\\right).\\n\\\\end{eqnarray*}\\n\\n The problem with this is: We never use the whole matrix at the same time. In fact, it never really exists at the same time: As explained above, \\\\(K\\\\) and \\\\(F_T\\\\) depend on the already computed solution \\\\(U^n\\\\), in the first case through the time step (that depends on \\\\(U^n\\\\) because it has to satisfy a CFL condition). So we can only assemble it once we've already solved the top left \\\\(2\\\\times 2\\\\) block Stokes system, and once we've moved on to the temperature equation we don't need the Stokes part any more; the fact that we build an object for a matrix that never exists as a whole in memory at any given time led us to jumping through some hoops in step-21, so let's not repeat this sort of error. Furthermore, we don't actually build the matrix \\\\(C\\\\): Because by the time we get to the temperature equation we already know \\\\(U^n\\\\), and because we have to assemble the right hand side \\\\(F_T\\\\) at this time anyway, we simply move the term \\\\(CU^n\\\\) to the right hand side and assemble it along with all the other terms there. What this means is that there does not remain a part of the matrix where temperature variables and Stokes variables couple, and so a global enumeration of all degrees of freedom is no longer important: It is enough if we have an enumeration of all Stokes degrees of freedom, and of all temperature degrees of freedom independently.\\nIn essence, there is consequently not much use in putting everything into a block matrix (though there are of course the same good reasons to do so for the \\\\(2\\\\times 2\\\\) Stokes part), or, for that matter, in putting everything into the same DoFHandler object.\\nBut are there downsides to doing so? These exist, though they may not be obvious at first. The main problem is that if we need to create one global finite element that contains velocity, pressure, and temperature shape functions, and use this to initialize the DoFHandler. But we also use this finite element object to initialize all FEValues or FEFaceValues objects that we use. This may not appear to be that big a deal, but imagine what happens when, for example, we evaluate the residual            \\\\(\\n  R_\\\\alpha(T)\\n  =\\n  \\\\left(\\n  \\\\frac{\\\\partial T}{\\\\partial t}\\n  +\\n  {\\\\mathbf u} \\\\cdot \\\\nabla T\\n  -\\n  \\\\nabla \\\\cdot \\\\kappa \\\\nabla T - \\\\gamma\\n  \\\\right)\\n  T^{\\\\alpha-1}\\n\\\\) that we need to compute the artificial viscosity \\\\(\\\\nu_\\\\alpha(T)|_K\\\\). For this, we need the Laplacian of the temperature, which we compute using the tensor of second derivatives (Hessians) of the shape functions (we have to give the update_hessians flag to the FEValues object for this). Now, if we have a finite that contains the shape functions for velocities, pressures, and temperatures, that means that we have to compute the Hessians of all shape functions, including the many higher order shape functions for the velocities. That's a lot of computations that we don't need, and indeed if one were to do that (as we had in an early version of the program), assembling the right hand side took about a quarter of the overall compute time.\\nSo what we will do is to use two different finite element objects, one for the Stokes components and one for the temperatures. With this come two different DoFHandlers, two sparsity patterns and two matrices for the Stokes and temperature parts, etc. And whenever we have to assemble something that contains both temperature and Stokes shape functions (in particular the right hand sides of Stokes and temperature equations), then we use two FEValues objects initialized with two cell iterators that we walk in parallel through the two DoFHandler objects associated with the same Triangulation object; for these two FEValues objects, we use of course the same quadrature objects so that we can iterate over the same set of quadrature points, but each FEValues object will get update flags only according to what it actually needs to compute. In particular, when we compute the residual as above, we only ask for the values of the Stokes shape functions, but also the Hessians of the temperature shape functions \\u2014 much cheaper indeed, and as it turns out: assembling the right hand side of the temperature equation is now a component of the program that is hardly measurable.\\nWith these changes, timing the program yields that only the following operations are relevant for the overall run time: \\n\\nSolving the Stokes system: 72% of the run time. \\n\\nAssembling the Stokes preconditioner and computing the algebraic multigrid hierarchy using the Trilinos ML package: 11% of the run time. \\n\\nThe function BoussinesqFlowProblem::setup_dofs: 7% of overall run time. \\n\\nAssembling the Stokes and temperature right hand side vectors as well as assembling the matrices: 7%. \\n\\nIn essence this means that all bottlenecks apart from the algebraic multigrid have been removed.\\nUsing Trilinos\\nIn much the same way as we used PETSc to support our linear algebra needs in step-17 and step-18, we use interfaces to the Trilinos library (see the deal.II README file for installation instructions) in this program. Trilinos is a very large collection of everything that has to do with linear and nonlinear algebra, as well as all sorts of tools around that (and looks like it will grow in many other directions in the future as well).\\nThe main reason for using Trilinos, similar to our exploring PETSc, is that it is a very powerful library that provides a lot more tools than deal.II's own linear algebra library. That includes, in particular, the ability to work in parallel on a cluster, using MPI, and a wider variety of preconditioners. In the latter class, one of the most interesting capabilities is the existence of the Trilinos ML package that implements an Algebraic Multigrid (AMG) method. We will use this preconditioner to precondition the second order operator part of the momentum equation. The ability to solve problems in parallel will be explored in step-32, using the same problem as discussed here.\\nPETSc, which we have used in step-17 and step-18, is certainly a powerful library, providing a large number of functions that deal with matrices, vectors, and iterative solvers and preconditioners, along with lots of other stuff, most of which runs quite well in parallel. It is, however, a few years old already than Trilinos, written in C, and generally not quite as easy to use as some other libraries. As a consequence, deal.II has also acquired interfaces to Trilinos, which shares a lot of the same functionality with PETSc. It is, however, a project that is several years younger, is written in C++ and by people who generally have put a significant emphasis on software design.\\nThe testcase\\nThe case we want to solve here is as follows: we solve the Boussinesq equations described above with \\\\(\\\\kappa=10^{-6}, \\\\eta=1, \\\\rho=1, \\\\beta=10\\\\), i.e., a relatively slow moving fluid that has virtually no thermal diffusive conductivity and transports heat mainly through convection. On the boundary, we will require no-normal flux for the velocity ( \\\\(\\\\mathrm{n}\\\\cdot\\\\mathrm{u}=0\\\\)) and for the temperature ( \\\\(\\\\mathrm{n}\\\\cdot\\\\nabla T=0\\\\)). This is one of the cases discussed in the introduction of step-22 and fixes one component of the velocity while allowing flow to be parallel to the boundary. There remain dim-1 components to be fixed, namely the tangential components of the normal stress; for these, we choose homogeneous conditions which means that we do not have to anything special. Initial conditions are only necessary for the temperature field, and we choose it to be constant zero.\\nThe evolution of the problem is then entirely driven by the right hand side \\\\(\\\\gamma(\\\\mathrm{x},t)\\\\) of the temperature equation, i.e., by heat sources and sinks. Here, we choose a setup invented in advance of a Christmas lecture: real candles are of course prohibited in U.S. class rooms, but virtual ones are allowed. We therefore choose three spherical heat sources unequally spaced close to the bottom of the domain, imitating three candles. The fluid located at these sources, initially at rest, is then heated up and as the temperature rises gains buoyancy, rising up; more fluid is dragged up and through the sources, leading to three hot plumes that rise up until they are captured by the recirculation of fluid that sinks down on the outside, replacing the air that rises due to heating.\\n The commented program\\n Include files\\nThe first step, as always, is to include the functionality of these well-known deal.II library files and some C++ header files.\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/utilities.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/solver_gmres.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/block_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 #include <deal.II/grid/grid_tools.h>\\n\\u00a0 #include <deal.II/grid/grid_refinement.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_renumbering.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 #include <deal.II/fe/fe_system.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 #include <deal.II/numerics/error_estimator.h>\\n\\u00a0 #include <deal.II/numerics/solution_transfer.h>\\n\\u00a0 \\nThen we need to include some header files that provide vector, matrix, and preconditioner classes that implement interfaces to the respective Trilinos classes. In particular, we will need interfaces to the matrix and vector classes based on Trilinos as well as Trilinos preconditioners:\\n\\u00a0 #include <deal.II/base/index_set.h>\\n\\u00a0 #include <deal.II/lac/trilinos_sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/trilinos_block_sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/trilinos_vector.h>\\n\\u00a0 #include <deal.II/lac/trilinos_parallel_block_vector.h>\\n\\u00a0 #include <deal.II/lac/trilinos_precondition.h>\\n\\u00a0 \\nFinally, here are a few C++ headers that haven't been included yet by one of the aforelisted header files:\\n\\u00a0 #include <iostream>\\n\\u00a0 #include <fstream>\\n\\u00a0 #include <memory>\\n\\u00a0 #include <limits>\\n\\u00a0 \\n\\u00a0 \\nAt the end of this top-matter, we import all deal.II names into the global namespace:\\n\\u00a0 namespace Step31\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n Equation data\\nAgain, the next stage in the program is the definition of the equation data, that is, the various boundary conditions, the right hand sides and the initial condition (remember that we're about to solve a time-dependent system). The basic strategy for this definition is the same as in step-22. Regarding the details, though, there are some differences.\\nThe first thing is that we don't set any inhomogeneous boundary conditions on the velocity, since as is explained in the introduction we will use no-flux conditions \\\\(\\\\mathbf{n}\\\\cdot\\\\mathbf{u}=0\\\\). So what is left are dim-1 conditions for the tangential part of the normal component of the stress tensor,  \\\\(\\\\textbf{n} \\\\cdot [p \\\\textbf{1} -\\n   \\\\eta\\\\varepsilon(\\\\textbf{u})]\\\\); we assume homogeneous values for these components, i.e., a natural boundary condition that requires no specific action (it appears as a zero term in the right hand side of the weak form).\\nFor the temperature \\\\(T\\\\), we assume no thermal energy flux, i.e., \\\\(\\\\mathbf{n} \\\\cdot \\\\kappa \\\\nabla T=0\\\\). This, again, is a boundary condition that does not require us to do anything in particular.\\nSecondly, we have to set initial conditions for the temperature (no initial conditions are required for the velocity and pressure, since the Stokes equations for the quasi-stationary case we consider here have no time derivatives of the velocity or pressure). Here, we choose a very simple test case, where the initial temperature is zero, and all dynamics are driven by the temperature right hand side.\\nThirdly, we need to define the right hand side of the temperature equation. We choose it to be constant within three circles (or spheres in 3d) somewhere at the bottom of the domain, as explained in the introduction, and zero outside.\\nFinally, or maybe firstly, at the top of this namespace, we define the various material constants we need ( \\\\(\\\\eta,\\\\kappa\\\\), density \\\\(\\\\rho\\\\) and the thermal expansion coefficient \\\\(\\\\beta\\\\)):\\n\\u00a0   namespace EquationData\\n\\u00a0   {\\n\\u00a0     constexpr double eta     = 1;\\n\\u00a0     constexpr double kappa   = 1e-6;\\n\\u00a0     constexpr double beta    = 10;\\n\\u00a0     constexpr double density = 1;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     class TemperatureInitialValues : public Function<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       TemperatureInitialValues()\\n\\u00a0         : Function<dim>(1)\\n\\u00a0       {}\\n\\u00a0 \\n\\u00a0       virtual double value(const Point<dim> & /*p*/,\\n\\u00a0                            const unsigned int /*component*/ = 0) const override\\n\\u00a0       {\\n\\u00a0         return 0;\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0       virtual void vector_value(const Point<dim> &p,\\n\\u00a0                                 Vector<double>   &value) const override\\n\\u00a0       {\\n\\u00a0         for (unsigned int c = 0; c < this->n_components; ++c)\\n\\u00a0           value(c) = TemperatureInitialValues<dim>::value(p, c);\\n\\u00a0       }\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     class TemperatureRightHandSide : public Function<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       TemperatureRightHandSide()\\n\\u00a0         : Function<dim>(1)\\n\\u00a0       {}\\n\\u00a0 \\n\\u00a0       virtual double value(const Point<dim>  &p,\\n\\u00a0                            const unsigned int component = 0) const override\\n\\u00a0       {\\n\\u00a0         (void)component;\\n\\u00a0         Assert(component == 0,\\n\\u00a0                ExcMessage(\\\"Invalid operation for a scalar function.\\\"));\\n\\u00a0 \\n\\u00a0         Assert((dim == 2) || (dim == 3), ExcNotImplemented());\\n\\u00a0 \\n\\u00a0         static const Point<dim> source_centers[3] = {\\n\\u00a0           (dim == 2 ? Point<dim>(.3, .1) : Point<dim>(.3, .5, .1)),\\n\\u00a0           (dim == 2 ? Point<dim>(.45, .1) : Point<dim>(.45, .5, .1)),\\n\\u00a0           (dim == 2 ? Point<dim>(.75, .1) : Point<dim>(.75, .5, .1))};\\n\\u00a0         static const double source_radius = (dim == 2 ? 1. / 32 : 1. / 8);\\n\\u00a0 \\n\\u00a0         return ((source_centers[0].distance(p) < source_radius) ||\\n\\u00a0                     (source_centers[1].distance(p) < source_radius) ||\\n\\u00a0                     (source_centers[2].distance(p) < source_radius) ?\\n\\u00a0                   1 :\\n\\u00a0                   0);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0       virtual void vector_value(const Point<dim> &p,\\n\\u00a0                                 Vector<double>   &value) const override\\n\\u00a0       {\\n\\u00a0         for (unsigned int c = 0; c < this->n_components; ++c)\\n\\u00a0           value(c) = TemperatureRightHandSide<dim>::value(p, c);\\n\\u00a0       }\\n\\u00a0     };\\n\\u00a0   } // namespace EquationData\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunctionDefinition function.h:152\\nPointDefinition point.h:111\\nVectorDefinition vector.h:120\\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\ninternal::EvaluatorQuantity::value@ value\\n Linear solvers and preconditioners\\nThis section introduces some objects that are used for the solution of the linear equations of the Stokes system that we need to solve in each time step. Many of the ideas used here are the same as in step-20, where Schur complement based preconditioners and solvers have been introduced, with the actual interface taken from step-22 (in particular the discussion in the \\\"Results\\\" section of step-22, in which we introduce alternatives to the direct Schur complement approach). Note, however, that here we don't use the Schur complement to solve the Stokes equations, though an approximate Schur complement (the mass matrix on the pressure space) appears in the preconditioner.\\n\\u00a0   namespace LinearSolvers\\n\\u00a0   {\\n The InverseMatrix class template\\nThis class is an interface to calculate the action of an \\\"inverted\\\" matrix on a vector (using the vmult operation) in the same way as the corresponding class in step-22: when the product of an object of this class is requested, we solve a linear equation system with that matrix using the CG method, accelerated by a preconditioner of (templated) class PreconditionerType.\\nIn a minor deviation from the implementation of the same class in step-22, we make the vmult function take any kind of vector type (it will yield compiler errors, however, if the matrix does not allow a matrix-vector product with this kind of vector).\\nSecondly, we catch any exceptions that the solver may have thrown. The reason is as follows: When debugging a program like this one occasionally makes a mistake of passing an indefinite or nonsymmetric matrix or preconditioner to the current class. The solver will, in that case, not converge and throw a run-time exception. If not caught here it will propagate up the call stack and may end up in main() where we output an error message that will say that the CG solver failed. The question then becomes: Which CG solver? The one that inverted the mass matrix? The one that inverted the top left block with the Laplace operator? Or a CG solver in one of the several other nested places where we use linear solvers in the current code? No indication about this is present in a run-time exception because it doesn't store the stack of calls through which we got to the place where the exception was generated.\\nSo rather than letting the exception propagate freely up to main(), we acknowledge that in the current context there is little that an outer function can do if the inner solver fails. As a consequence, we deal with the situation by catching the exception and letting the program fail by triggering an assertion with a false condition (which of course always fails) and that uses the error message associated with the caught exception (returned by calling e.what()) as error text. In other words, instead of letting the error message be produced by main(), we rather report it here where we can abort the program preserving information about where the problem happened.\\n\\u00a0     template <class MatrixType, class PreconditionerType>\\n\\u00a0     class InverseMatrix : public Subscriptor\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       InverseMatrix(const MatrixType         &m,\\n\\u00a0                     const PreconditionerType &preconditioner);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0       template <typename VectorType>\\n\\u00a0       void vmult(VectorType &dst, const VectorType &src) const;\\n\\u00a0 \\n\\u00a0     private:\\n\\u00a0       const SmartPointer<const MatrixType> matrix;\\n\\u00a0       const PreconditionerType            &preconditioner;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <class MatrixType, class PreconditionerType>\\n\\u00a0     InverseMatrix<MatrixType, PreconditionerType>::InverseMatrix(\\n\\u00a0       const MatrixType         &m,\\n\\u00a0       const PreconditionerType &preconditioner)\\n\\u00a0       : matrix(&m)\\n\\u00a0       , preconditioner(preconditioner)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <class MatrixType, class PreconditionerType>\\n\\u00a0     template <typename VectorType>\\n\\u00a0     void InverseMatrix<MatrixType, PreconditionerType>::vmult(\\n\\u00a0       VectorType       &dst,\\n\\u00a0       const VectorType &src) const\\n\\u00a0     {\\n\\u00a0       SolverControl        solver_control(src.size(), 1e-7 * src.l2_norm());\\n\\u00a0       SolverCG<VectorType> cg(solver_control);\\n\\u00a0 \\n\\u00a0       dst = 0;\\n\\u00a0 \\n\\u00a0       try\\n\\u00a0         {\\n\\u00a0           cg.solve(*matrix, dst, src, preconditioner);\\n\\u00a0         }\\n\\u00a0       catch (std::exception &e)\\n\\u00a0         {\\n\\u00a0           Assert(false, ExcMessage(e.what()));\\n\\u00a0         }\\n\\u00a0     }\\n\\u00a0 \\nSmartPointerDefinition smartpointer.h:93\\nSolverCGDefinition solver_cg.h:179\\nSolverControlDefinition solver_control.h:67\\nSubscriptorDefinition subscriptor.h:60\\nPhysics::Elasticity::Kinematics::eSymmetricTensor< 2, dim, Number > e(const Tensor< 2, dim, Number > &F)\\n Schur complement preconditioner\\nThis is the implementation of the Schur complement preconditioner as described in detail in the introduction. As opposed to step-20 and step-22, we solve the block system all-at-once using GMRES, and use the Schur complement of the block structured matrix to build a good preconditioner instead.\\nLet's have a look at the ideal preconditioner matrix \\\\(P=\\\\left(\\\\begin{array}{cc} A & 0 \\\\\\\\ B & -S \\\\end{array}\\\\right)\\\\) described in the introduction. If we apply this matrix in the solution of a linear system, convergence of an iterative GMRES solver will be governed by the matrix   \\n\\\\begin{eqnarray*} P^{-1}\\\\left(\\\\begin{array}{cc} A &\\n   B^T \\\\\\\\ B & 0 \\\\end{array}\\\\right) = \\\\left(\\\\begin{array}{cc} I & A^{-1}\\n   B^T \\\\\\\\ 0 & I \\\\end{array}\\\\right), \\\\end{eqnarray*}\\n\\n which indeed is very simple. A GMRES solver based on exact matrices would converge in one iteration, since all eigenvalues are equal (any Krylov method takes at most as many iterations as there are distinct eigenvalues). Such a preconditioner for the blocked Stokes system has been proposed by Silvester and Wathen (\\\"Fast iterative solution of stabilised Stokes\\n   systems part II.  Using general block preconditioners\\\", SIAM J. Numer. Anal., 31 (1994), pp. 1352-1367).\\nReplacing \\\\(P\\\\) by \\\\(\\\\tilde{P}\\\\) keeps that spirit alive: the product \\\\(P^{-1} A\\\\) will still be close to a matrix with eigenvalues 1 with a distribution that does not depend on the problem size. This lets us hope to be able to get a number of GMRES iterations that is problem-size independent.\\nThe deal.II users who have already gone through the step-20 and step-22 tutorials can certainly imagine how we're going to implement this. We replace the exact inverse matrices in \\\\(P^{-1}\\\\) by some approximate inverses built from the InverseMatrix class, and the inverse Schur complement will be approximated by the pressure mass matrix \\\\(M_p\\\\) (weighted by \\\\(\\\\eta^{-1}\\\\) as mentioned in the introduction). As pointed out in the results section of step-22, we can replace the exact inverse of \\\\(A\\\\) by just the application of a preconditioner, in this case on a vector Laplace matrix as was explained in the introduction. This does increase the number of (outer) GMRES iterations, but is still significantly cheaper than an exact inverse, which would require between 20 and 35 CG iterations for each outer solver step (using the AMG preconditioner).\\nHaving the above explanations in mind, we define a preconditioner class with a vmult functionality, which is all we need for the interaction with the usual solver functions further below in the program code.\\nFirst the declarations. These are similar to the definition of the Schur complement in step-20, with the difference that we need some more preconditioners in the constructor and that the matrices we use here are built upon Trilinos:\\n\\u00a0     template <class PreconditionerTypeA, class PreconditionerTypeMp>\\n\\u00a0     class BlockSchurPreconditioner : public Subscriptor\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       BlockSchurPreconditioner(\\n\\u00a0         const TrilinosWrappers::BlockSparseMatrix &S,\\n\\u00a0         const InverseMatrix<TrilinosWrappers::SparseMatrix,\\n\\u00a0                             PreconditionerTypeMp> &Mpinv,\\n\\u00a0         const PreconditionerTypeA                 &Apreconditioner);\\n\\u00a0 \\n\\u00a0       void vmult(TrilinosWrappers::MPI::BlockVector       &dst,\\n\\u00a0                  const TrilinosWrappers::MPI::BlockVector &src) const;\\n\\u00a0 \\n\\u00a0     private:\\n\\u00a0       const SmartPointer<const TrilinosWrappers::BlockSparseMatrix>\\n\\u00a0         stokes_matrix;\\n\\u00a0       const SmartPointer<const InverseMatrix<TrilinosWrappers::SparseMatrix,\\n\\u00a0                                              PreconditionerTypeMp>>\\n\\u00a0                                  m_inverse;\\n\\u00a0       const PreconditionerTypeA &a_preconditioner;\\n\\u00a0 \\n\\u00a0       mutable TrilinosWrappers::MPI::Vector tmp;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nTrilinosWrappers::BlockSparseMatrixDefinition trilinos_block_sparse_matrix.h:72\\nTrilinosWrappers::MPI::BlockVectorDefinition trilinos_parallel_block_vector.h:75\\nTrilinosWrappers::MPI::VectorDefinition trilinos_vector.h:405\\nTrilinosWrappers::SparseMatrixDefinition trilinos_sparse_matrix.h:550\\nWhen using a TrilinosWrappers::MPI::Vector or a TrilinosWrappers::MPI::BlockVector, the Vector is initialized using an IndexSet. IndexSet is used not only to resize the TrilinosWrappers::MPI::Vector but it also associates an index in the TrilinosWrappers::MPI::Vector with a degree of freedom (see step-40 for a more detailed explanation). The function complete_index_set() creates an IndexSet where every valid index is part of the set. Note that this program can only be run sequentially and will throw an exception if used in parallel.\\n\\u00a0     template <class PreconditionerTypeA, class PreconditionerTypeMp>\\n\\u00a0     BlockSchurPreconditioner<PreconditionerTypeA, PreconditionerTypeMp>::\\n\\u00a0       BlockSchurPreconditioner(\\n\\u00a0         const TrilinosWrappers::BlockSparseMatrix &S,\\n\\u00a0         const InverseMatrix<TrilinosWrappers::SparseMatrix,\\n\\u00a0                             PreconditionerTypeMp> &Mpinv,\\n\\u00a0         const PreconditionerTypeA                 &Apreconditioner)\\n\\u00a0       : stokes_matrix(&S)\\n\\u00a0       , m_inverse(&Mpinv)\\n\\u00a0       , a_preconditioner(Apreconditioner)\\n\\u00a0       , tmp(complete_index_set(stokes_matrix->block(1, 1).m()))\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\ncomplete_index_setIndexSet complete_index_set(const IndexSet::size_type N)Definition index_set.h:1204\\nNext is the vmult function. We implement the action of \\\\(P^{-1}\\\\) as described above in three successive steps. In formulas, we want to compute \\\\(Y=P^{-1}X\\\\) where \\\\(X,Y\\\\) are both vectors with two block components.\\nThe first step multiplies the velocity part of the vector by a preconditioner of the matrix \\\\(A\\\\), i.e., we compute  \\\\(Y_0={\\\\tilde\\n   A}^{-1}X_0\\\\). The resulting velocity vector is then multiplied by \\\\(B\\\\) and subtracted from the pressure, i.e., we want to compute \\\\(X_1-BY_0\\\\). This second step only acts on the pressure vector and is accomplished by the residual function of our matrix classes, except that the sign is wrong. Consequently, we change the sign in the temporary pressure vector and finally multiply by the inverse pressure mass matrix to get the final pressure vector, completing our work on the Stokes preconditioner:\\n\\u00a0     template <class PreconditionerTypeA, class PreconditionerTypeMp>\\n\\u00a0     void\\n\\u00a0     BlockSchurPreconditioner<PreconditionerTypeA, PreconditionerTypeMp>::vmult(\\n\\u00a0       TrilinosWrappers::MPI::BlockVector       &dst,\\n\\u00a0       const TrilinosWrappers::MPI::BlockVector &src) const\\n\\u00a0     {\\n\\u00a0       a_preconditioner.vmult(dst.block(0), src.block(0));\\n\\u00a0       stokes_matrix->block(1, 0).residual(tmp, dst.block(0), src.block(1));\\n\\u00a0       tmp *= -1;\\n\\u00a0       m_inverse->vmult(dst.block(1), tmp);\\n\\u00a0     }\\n\\u00a0   } // namespace LinearSolvers\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n The BoussinesqFlowProblem class template\\nThe definition of the class that defines the top-level logic of solving the time-dependent Boussinesq problem is mainly based on the step-22 tutorial program. The main differences are that now we also have to solve for the temperature equation, which forces us to have a second DoFHandler object for the temperature variable as well as matrices, right hand sides, and solution vectors for the current and previous time steps. As mentioned in the introduction, all linear algebra objects are going to use wrappers of the corresponding Trilinos functionality.\\nThe member functions of this class are reminiscent of step-21, where we also used a staggered scheme that first solve the flow equations (here the Stokes equations, in step-21 Darcy flow) and then update the advected quantity (here the temperature, there the saturation). The functions that are new are mainly concerned with determining the time step, as well as the proper size of the artificial viscosity stabilization.\\nThe last three variables indicate whether the various matrices or preconditioners need to be rebuilt the next time the corresponding build functions are called. This allows us to move the corresponding if into the respective function and thereby keeping our main run() function clean and easy to read.\\n\\u00a0   template <int dim>\\n\\u00a0   class BoussinesqFlowProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     BoussinesqFlowProblem();\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void   setup_dofs();\\n\\u00a0     void   assemble_stokes_preconditioner();\\n\\u00a0     void   build_stokes_preconditioner();\\n\\u00a0     void   assemble_stokes_system();\\n\\u00a0     void   assemble_temperature_system(const double maximal_velocity);\\n\\u00a0     void   assemble_temperature_matrix();\\n\\u00a0     double get_maximal_velocity() const;\\n\\u00a0     std::pair<double, double> get_extrapolated_temperature_range() const;\\n\\u00a0     void                      solve();\\n\\u00a0     void                      output_results() const;\\n\\u00a0     void                      refine_mesh(const unsigned int max_grid_level);\\n\\u00a0 \\n\\u00a0     double compute_viscosity(\\n\\u00a0       const std::vector<double>         &old_temperature,\\n\\u00a0       const std::vector<double>         &old_old_temperature,\\n\\u00a0       const std::vector<Tensor<1, dim>> &old_temperature_grads,\\n\\u00a0       const std::vector<Tensor<1, dim>> &old_old_temperature_grads,\\n\\u00a0       const std::vector<double>         &old_temperature_laplacians,\\n\\u00a0       const std::vector<double>         &old_old_temperature_laplacians,\\n\\u00a0       const std::vector<Tensor<1, dim>> &old_velocity_values,\\n\\u00a0       const std::vector<Tensor<1, dim>> &old_old_velocity_values,\\n\\u00a0       const std::vector<double>         &gamma_values,\\n\\u00a0       const double                       global_u_infty,\\n\\u00a0       const double                       global_T_variation,\\n\\u00a0       const double                       cell_diameter) const;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     double             global_Omega_diameter;\\n\\u00a0 \\n\\u00a0     const unsigned int        stokes_degree;\\n\\u00a0     const FESystem<dim>       stokes_fe;\\n\\u00a0     DoFHandler<dim>           stokes_dof_handler;\\n\\u00a0     AffineConstraints<double> stokes_constraints;\\n\\u00a0 \\n\\u00a0     std::vector<IndexSet>               stokes_partitioning;\\n\\u00a0     TrilinosWrappers::BlockSparseMatrix stokes_matrix;\\n\\u00a0     TrilinosWrappers::BlockSparseMatrix stokes_preconditioner_matrix;\\n\\u00a0 \\n\\u00a0     TrilinosWrappers::MPI::BlockVector stokes_solution;\\n\\u00a0     TrilinosWrappers::MPI::BlockVector old_stokes_solution;\\n\\u00a0     TrilinosWrappers::MPI::BlockVector stokes_rhs;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     const unsigned int        temperature_degree;\\n\\u00a0     const FE_Q<dim>           temperature_fe;\\n\\u00a0     DoFHandler<dim>           temperature_dof_handler;\\n\\u00a0     AffineConstraints<double> temperature_constraints;\\n\\u00a0 \\n\\u00a0     TrilinosWrappers::SparseMatrix temperature_mass_matrix;\\n\\u00a0     TrilinosWrappers::SparseMatrix temperature_stiffness_matrix;\\n\\u00a0     TrilinosWrappers::SparseMatrix temperature_matrix;\\n\\u00a0 \\n\\u00a0     TrilinosWrappers::MPI::Vector temperature_solution;\\n\\u00a0     TrilinosWrappers::MPI::Vector old_temperature_solution;\\n\\u00a0     TrilinosWrappers::MPI::Vector old_old_temperature_solution;\\n\\u00a0     TrilinosWrappers::MPI::Vector temperature_rhs;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     double       time_step;\\n\\u00a0     double       old_time_step;\\n\\u00a0     unsigned int timestep_number;\\n\\u00a0 \\n\\u00a0     std::shared_ptr<TrilinosWrappers::PreconditionAMG> Amg_preconditioner;\\n\\u00a0     std::shared_ptr<TrilinosWrappers::PreconditionIC>  Mp_preconditioner;\\n\\u00a0 \\n\\u00a0     bool rebuild_stokes_matrix;\\n\\u00a0     bool rebuild_temperature_matrices;\\n\\u00a0     bool rebuild_stokes_preconditioner;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nDoFHandlerDefinition dof_handler.h:317\\nFESystemDefinition fe_system.h:208\\nFE_QDefinition fe_q.h:554\\nTensorDefinition tensor.h:471\\nTriangulationDefinition tria.h:1323\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n BoussinesqFlowProblem class implementation\\n BoussinesqFlowProblem::BoussinesqFlowProblem\\nThe constructor of this class is an extension of the constructor in step-22. We need to add the various variables that concern the temperature. As discussed in the introduction, we are going to use \\\\(Q_2^d\\\\times Q_1\\\\) (Taylor-Hood) elements again for the Stokes part, and \\\\(Q_2\\\\) elements for the temperature. However, by using variables that store the polynomial degree of the Stokes and temperature finite elements, it is easy to consistently modify the degree of the elements as well as all quadrature formulas used on them downstream. Moreover, we initialize the time stepping as well as the options for matrix assembly and preconditioning:\\n\\u00a0   template <int dim>\\n\\u00a0   BoussinesqFlowProblem<dim>::BoussinesqFlowProblem()\\n\\u00a0     : triangulation(Triangulation<dim>::maximum_smoothing)\\n\\u00a0     , global_Omega_diameter(std::numeric_limits<double>::quiet_NaN())\\n\\u00a0     , stokes_degree(1)\\n\\u00a0     , stokes_fe(FE_Q<dim>(stokes_degree + 1) ^ dim, FE_Q<dim>(stokes_degree))\\n\\u00a0     , stokes_dof_handler(triangulation)\\n\\u00a0     ,\\n\\u00a0 \\n\\u00a0     temperature_degree(2)\\n\\u00a0     , temperature_fe(temperature_degree)\\n\\u00a0     , temperature_dof_handler(triangulation)\\n\\u00a0     ,\\n\\u00a0 \\n\\u00a0     time_step(0)\\n\\u00a0     , old_time_step(0)\\n\\u00a0     , timestep_number(0)\\n\\u00a0     , rebuild_stokes_matrix(true)\\n\\u00a0     , rebuild_temperature_matrices(true)\\n\\u00a0     , rebuild_stokes_preconditioner(true)\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nstdSTL namespace.\\n BoussinesqFlowProblem::get_maximal_velocity\\nStarting the real functionality of this class is a helper function that determines the maximum ( \\\\(L_\\\\infty\\\\)) velocity in the domain (at the quadrature points, in fact). How it works should be relatively obvious to all who have gotten to this point of the tutorial. Note that since we are only interested in the velocity, rather than using stokes_fe_values.get_function_values to get the values of the entire Stokes solution (velocities and pressures) we use stokes_fe_values[velocities].get_function_values to extract only the velocities part. This has the additional benefit that we get it as a Tensor<1,dim>, rather than some components in a Vector<double>, allowing us to process it right away using the norm() function to get the magnitude of the velocity.\\nThe only point worth thinking about a bit is how to choose the quadrature points we use here. Since the goal of this function is to find the maximal velocity over a domain by looking at quadrature points on each cell. So we should ask how we should best choose these quadrature points on each cell. To this end, recall that if we had a single \\\\(Q_1\\\\) field (rather than the vector-valued field of higher order) then the maximum would be attained at a vertex of the mesh. In other words, we should use the QTrapezoid class that has quadrature points only at the vertices of cells.\\nFor higher order shape functions, the situation is more complicated: the maxima and minima may be attained at points between the support points of shape functions (for the usual \\\\(Q_p\\\\) elements the support points are the equidistant Lagrange interpolation points); furthermore, since we are looking for the maximum magnitude of a vector-valued quantity, we can even less say with certainty where the set of potential maximal points are. Nevertheless, intuitively if not provably, the Lagrange interpolation points appear to be a better choice than the Gauss points.\\nThere are now different methods to produce a quadrature formula with quadrature points equal to the interpolation points of the finite element. One option would be to use the FiniteElement::get_unit_support_points() function, reduce the output to a unique set of points to avoid duplicate function evaluations, and create a Quadrature object using these points. Another option, chosen here, is to use the QTrapezoid class and combine it with the QIterated class that repeats the QTrapezoid formula on a number of sub-cells in each coordinate direction. To cover all support points, we need to iterate it stokes_degree+1 times since this is the polynomial degree of the Stokes element in use:\\n\\u00a0   template <int dim>\\n\\u00a0   double BoussinesqFlowProblem<dim>::get_maximal_velocity() const\\n\\u00a0   {\\n\\u00a0     const QIterated<dim> quadrature_formula(QTrapezoid<1>(), stokes_degree + 1);\\n\\u00a0     const unsigned int   n_q_points = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FEValues<dim> fe_values(stokes_fe, quadrature_formula, update_values);\\n\\u00a0     std::vector<Tensor<1, dim>> velocity_values(n_q_points);\\n\\u00a0     double                      max_velocity = 0;\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : stokes_dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0         fe_values[velocities].get_function_values(stokes_solution,\\n\\u00a0                                                   velocity_values);\\n\\u00a0 \\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           max_velocity = std::max(max_velocity, velocity_values[q].norm());\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     return max_velocity;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFEValuesDefinition fe_values.h:63\\nQIteratedDefinition quadrature.h:435\\nQTrapezoidDefinition quadrature_lib.h:191\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nstd::max::VectorizedArray< Number, width > max(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6943\\nFEValuesExtractors::VectorDefinition fe_values_extractors.h:150\\n BoussinesqFlowProblem::get_extrapolated_temperature_range\\nNext a function that determines the minimum and maximum temperature at quadrature points inside \\\\(\\\\Omega\\\\) when extrapolated from the two previous time steps to the current one. We need this information in the computation of the artificial viscosity parameter \\\\(\\\\nu\\\\) as discussed in the introduction.\\nThe formula for the extrapolated temperature is  \\\\(\\\\left(1+\\\\frac{k_n}{k_{n-1}} \\\\right)T^{n-1} + \\\\frac{k_n}{k_{n-1}}\\n   T^{n-2}\\\\). The way to compute it is to loop over all quadrature points and update the maximum and minimum value if the current value is bigger/smaller than the previous one. We initialize the variables that store the max and min before the loop over all quadrature points by the smallest and the largest number representable as a double. Then we know for a fact that it is larger/smaller than the minimum/maximum and that the loop over all quadrature points is ultimately going to update the initial value with the correct one.\\nThe only other complication worth mentioning here is that in the first time step, \\\\(T^{k-2}\\\\) is not yet available of course. In that case, we can only use \\\\(T^{k-1}\\\\) which we have from the initial temperature. As quadrature points, we use the same choice as in the previous function though with the difference that now the number of repetitions is determined by the polynomial degree of the temperature field.\\n\\u00a0   template <int dim>\\n\\u00a0   std::pair<double, double>\\n\\u00a0   BoussinesqFlowProblem<dim>::get_extrapolated_temperature_range() const\\n\\u00a0   {\\n\\u00a0     const QIterated<dim> quadrature_formula(QTrapezoid<1>(),\\n\\u00a0                                             temperature_degree);\\n\\u00a0     const unsigned int   n_q_points = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FEValues<dim> fe_values(temperature_fe, quadrature_formula, update_values);\\n\\u00a0     std::vector<double> old_temperature_values(n_q_points);\\n\\u00a0     std::vector<double> old_old_temperature_values(n_q_points);\\n\\u00a0 \\n\\u00a0     if (timestep_number != 0)\\n\\u00a0       {\\n\\u00a0         double min_temperature = std::numeric_limits<double>::max(),\\n\\u00a0                max_temperature = -std::numeric_limits<double>::max();\\n\\u00a0 \\n\\u00a0         for (const auto &cell : temperature_dof_handler.active_cell_iterators())\\n\\u00a0           {\\n\\u00a0             fe_values.reinit(cell);\\n\\u00a0             fe_values.get_function_values(old_temperature_solution,\\n\\u00a0                                           old_temperature_values);\\n\\u00a0             fe_values.get_function_values(old_old_temperature_solution,\\n\\u00a0                                           old_old_temperature_values);\\n\\u00a0 \\n\\u00a0             for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0               {\\n\\u00a0                 const double temperature =\\n\\u00a0                   (1. + time_step / old_time_step) * old_temperature_values[q] -\\n\\u00a0                   time_step / old_time_step * old_old_temperature_values[q];\\n\\u00a0 \\n\\u00a0                 min_temperature = std::min(min_temperature, temperature);\\n\\u00a0                 max_temperature = std::max(max_temperature, temperature);\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0         return std::make_pair(min_temperature, max_temperature);\\n\\u00a0       }\\n\\u00a0     else\\n\\u00a0       {\\n\\u00a0         double min_temperature = std::numeric_limits<double>::max(),\\n\\u00a0                max_temperature = -std::numeric_limits<double>::max();\\n\\u00a0 \\n\\u00a0         for (const auto &cell : temperature_dof_handler.active_cell_iterators())\\n\\u00a0           {\\n\\u00a0             fe_values.reinit(cell);\\n\\u00a0             fe_values.get_function_values(old_temperature_solution,\\n\\u00a0                                           old_temperature_values);\\n\\u00a0 \\n\\u00a0             for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0               {\\n\\u00a0                 const double temperature = old_temperature_values[q];\\n\\u00a0 \\n\\u00a0                 min_temperature = std::min(min_temperature, temperature);\\n\\u00a0                 max_temperature = std::max(max_temperature, temperature);\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0         return std::make_pair(min_temperature, max_temperature);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\ninternal::reinitvoid reinit(MatrixBlock< MatrixType > &v, const BlockSparsityPattern &p)Definition matrix_block.h:617\\nstd::min::VectorizedArray< Number, width > min(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6960\\n BoussinesqFlowProblem::compute_viscosity\\nThe last of the tool functions computes the artificial viscosity parameter \\\\(\\\\nu|_K\\\\) on a cell \\\\(K\\\\) as a function of the extrapolated temperature, its gradient and Hessian (second derivatives), the velocity, the right hand side \\\\(\\\\gamma\\\\) all on the quadrature points of the current cell, and various other parameters as described in detail in the introduction.\\nThere are some universal constants worth mentioning here. First, we need to fix \\\\(\\\\beta\\\\); we choose \\\\(\\\\beta=0.017\\\\cdot dim\\\\), a choice discussed in detail in the results section of this tutorial program. The second is the exponent \\\\(\\\\alpha\\\\); \\\\(\\\\alpha=1\\\\) appears to work fine for the current program, even though some additional benefit might be expected from choosing \\\\(\\\\alpha = 2\\\\). Finally, there is one thing that requires special casing: In the first time step, the velocity equals zero, and the formula for \\\\(\\\\nu|_K\\\\) is not defined. In that case, we return  \\\\(\\\\nu|_K=5\\\\cdot 10^3\\n   \\\\cdot h_K\\\\), a choice admittedly more motivated by heuristics than anything else (it is in the same order of magnitude, however, as the value returned for most cells on the second time step).\\nThe rest of the function should be mostly obvious based on the material discussed in the introduction:\\n\\u00a0   template <int dim>\\n\\u00a0   double BoussinesqFlowProblem<dim>::compute_viscosity(\\n\\u00a0     const std::vector<double>         &old_temperature,\\n\\u00a0     const std::vector<double>         &old_old_temperature,\\n\\u00a0     const std::vector<Tensor<1, dim>> &old_temperature_grads,\\n\\u00a0     const std::vector<Tensor<1, dim>> &old_old_temperature_grads,\\n\\u00a0     const std::vector<double>         &old_temperature_laplacians,\\n\\u00a0     const std::vector<double>         &old_old_temperature_laplacians,\\n\\u00a0     const std::vector<Tensor<1, dim>> &old_velocity_values,\\n\\u00a0     const std::vector<Tensor<1, dim>> &old_old_velocity_values,\\n\\u00a0     const std::vector<double>         &gamma_values,\\n\\u00a0     const double                       global_u_infty,\\n\\u00a0     const double                       global_T_variation,\\n\\u00a0     const double                       cell_diameter) const\\n\\u00a0   {\\n\\u00a0     constexpr double beta  = 0.017 * dim;\\n\\u00a0     constexpr double alpha = 1.0;\\n\\u00a0 \\n\\u00a0     if (global_u_infty == 0)\\n\\u00a0       return 5e-3 * cell_diameter;\\n\\u00a0 \\n\\u00a0     const unsigned int n_q_points = old_temperature.size();\\n\\u00a0 \\n\\u00a0     double max_residual = 0;\\n\\u00a0     double max_velocity = 0;\\n\\u00a0 \\n\\u00a0     for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0       {\\n\\u00a0         const Tensor<1, dim> u =\\n\\u00a0           (old_velocity_values[q] + old_old_velocity_values[q]) / 2;\\n\\u00a0 \\n\\u00a0         const double dT_dt =\\n\\u00a0           (old_temperature[q] - old_old_temperature[q]) / old_time_step;\\n\\u00a0         const double u_grad_T =\\n\\u00a0           u * (old_temperature_grads[q] + old_old_temperature_grads[q]) / 2;\\n\\u00a0 \\n\\u00a0         const double kappa_Delta_T =\\n\\u00a0           EquationData::kappa *\\n\\u00a0           (old_temperature_laplacians[q] + old_old_temperature_laplacians[q]) /\\n\\u00a0           2;\\n\\u00a0 \\n\\u00a0         const double residual =\\n\\u00a0           std::abs((dT_dt + u_grad_T - kappa_Delta_T - gamma_values[q]) *\\n\\u00a0                    std::pow((old_temperature[q] + old_old_temperature[q]) / 2,\\n\\u00a0                             alpha - 1.));\\n\\u00a0 \\n\\u00a0         max_residual = std::max(residual, max_residual);\\n\\u00a0         max_velocity = std::max(std::sqrt(u * u), max_velocity);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     const double c_R            = std::pow(2., (4. - 2 * alpha) / dim);\\n\\u00a0     const double global_scaling = c_R * global_u_infty * global_T_variation *\\n\\u00a0                                   std::pow(global_Omega_diameter, alpha - 2.);\\n\\u00a0 \\n\\u00a0     return (\\n\\u00a0       beta * max_velocity *\\n\\u00a0       std::min(cell_diameter,\\n\\u00a0                std::pow(cell_diameter, alpha) * max_residual / global_scaling));\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nstd::sqrt::VectorizedArray< Number, width > sqrt(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6869\\nstd::pow::VectorizedArray< Number, width > pow(const ::VectorizedArray< Number, width > &, const Number p)Definition vectorization.h:6885\\nstd::abs::VectorizedArray< Number, width > abs(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6927\\n BoussinesqFlowProblem::setup_dofs\\nThis is the function that sets up the DoFHandler objects we have here (one for the Stokes part and one for the temperature part) as well as set to the right sizes the various objects required for the linear algebra in this program. Its basic operations are similar to what we do in step-22.\\nThe body of the function first enumerates all degrees of freedom for the Stokes and temperature systems. For the Stokes part, degrees of freedom are then sorted to ensure that velocities precede pressure DoFs so that we can partition the Stokes matrix into a \\\\(2\\\\times 2\\\\) matrix. As a difference to step-22, we do not perform any additional DoF renumbering. In that program, it paid off since our solver was heavily dependent on ILU's, whereas we use AMG here which is not sensitive to the DoF numbering. The IC preconditioner for the inversion of the pressure mass matrix would of course take advantage of a Cuthill-McKee like renumbering, but its costs are low compared to the velocity portion, so the additional work does not pay off.\\nWe then proceed with the generation of the hanging node constraints that arise from adaptive grid refinement for both DoFHandler objects. For the velocity, we impose no-flux boundary conditions  \\\\(\\\\mathbf{u}\\\\cdot\\n   \\\\mathbf{n}=0\\\\) by adding constraints to the object that already stores the hanging node constraints matrix. The second parameter in the function describes the first of the velocity components in the total dof vector, which is zero here. The variable no_normal_flux_boundaries denotes the boundary indicators for which to set the no flux boundary conditions; here, this is boundary indicator zero.\\nAfter having done so, we count the number of degrees of freedom in the various blocks:\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::setup_dofs()\\n\\u00a0   {\\n\\u00a0     std::vector<unsigned int> stokes_sub_blocks(dim + 1, 0);\\n\\u00a0     stokes_sub_blocks[dim] = 1;\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       stokes_dof_handler.distribute_dofs(stokes_fe);\\n\\u00a0       DoFRenumbering::component_wise(stokes_dof_handler, stokes_sub_blocks);\\n\\u00a0 \\n\\u00a0       stokes_constraints.clear();\\n\\u00a0       DoFTools::make_hanging_node_constraints(stokes_dof_handler,\\n\\u00a0                                               stokes_constraints);\\n\\u00a0       const std::set<types::boundary_id> no_normal_flux_boundaries = {0};\\n\\u00a0       VectorTools::compute_no_normal_flux_constraints(stokes_dof_handler,\\n\\u00a0                                                       0,\\n\\u00a0                                                       no_normal_flux_boundaries,\\n\\u00a0                                                       stokes_constraints);\\n\\u00a0       stokes_constraints.close();\\n\\u00a0     }\\n\\u00a0     {\\n\\u00a0       temperature_dof_handler.distribute_dofs(temperature_fe);\\n\\u00a0 \\n\\u00a0       temperature_constraints.clear();\\n\\u00a0       DoFTools::make_hanging_node_constraints(temperature_dof_handler,\\n\\u00a0                                               temperature_constraints);\\n\\u00a0       temperature_constraints.close();\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     const std::vector<types::global_dof_index> stokes_dofs_per_block =\\n\\u00a0       DoFTools::count_dofs_per_fe_block(stokes_dof_handler, stokes_sub_blocks);\\n\\u00a0 \\n\\u00a0     const types::global_dof_index n_u = stokes_dofs_per_block[0],\\n\\u00a0                                   n_p = stokes_dofs_per_block[1],\\n\\u00a0                                   n_T = temperature_dof_handler.n_dofs();\\n\\u00a0 \\n\\u00a0     std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << \\\" (on \\\" << triangulation.n_levels() << \\\" levels)\\\" << std::endl\\n\\u00a0               << \\\"Number of degrees of freedom: \\\" << n_u + n_p + n_T << \\\" (\\\"\\n\\u00a0               << n_u << '+' << n_p << '+' << n_T << ')' << std::endl\\n\\u00a0               << std::endl;\\n\\u00a0 \\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nTriangulation::n_levelsunsigned int n_levels() const\\nunsigned int\\nDoFTools::make_hanging_node_constraintsvoid make_hanging_node_constraints(const DoFHandler< dim, spacedim > &dof_handler, AffineConstraints< number > &constraints)Definition dof_tools_constraints.cc:3073\\nVectorTools::compute_no_normal_flux_constraintsvoid compute_no_normal_flux_constraints(const DoFHandler< dim, spacedim > &dof_handler, const unsigned int first_vector_component, const std::set< types::boundary_id > &boundary_ids, AffineConstraints< number > &constraints, const Mapping< dim, spacedim > &mapping=(ReferenceCells::get_hypercube< dim >() .template get_default_linear_mapping< dim, spacedim >()), const bool use_manifold_for_normal=true)\\nDoFRenumbering::component_wisevoid component_wise(DoFHandler< dim, spacedim > &dof_handler, const std::vector< unsigned int > &target_component=std::vector< unsigned int >())Definition dof_renumbering.cc:666\\nDoFTools::count_dofs_per_fe_blockstd::vector< types::global_dof_index > count_dofs_per_fe_block(const DoFHandler< dim, spacedim > &dof, const std::vector< unsigned int > &target_block=std::vector< unsigned int >())Definition dof_tools.cc:2104\\nThe next step is to create the sparsity pattern for the Stokes and temperature system matrices as well as the preconditioner matrix from which we build the Stokes preconditioner. As in step-22, we choose to create the pattern by using the blocked version of DynamicSparsityPattern.\\nSo, we first release the memory stored in the matrices, then set up an object of type BlockDynamicSparsityPattern consisting of \\\\(2\\\\times 2\\\\) blocks (for the Stokes system matrix and preconditioner) or DynamicSparsityPattern (for the temperature part). We then fill these objects with the nonzero pattern, taking into account that for the Stokes system matrix, there are no entries in the pressure-pressure block (but all velocity vector components couple with each other and with the pressure). Similarly, in the Stokes preconditioner matrix, only the diagonal blocks are nonzero, since we use the vector Laplacian as discussed in the introduction. This operator only couples each vector component of the Laplacian with itself, but not with the other vector components. (Application of the constraints resulting from the no-flux boundary conditions will couple vector components at the boundary again, however.)\\nWhen generating the sparsity pattern, we directly apply the constraints from hanging nodes and no-flux boundary conditions. This approach was already used in step-27, but is different from the one in early tutorial programs where we first built the original sparsity pattern and only then added the entries resulting from constraints. The reason for doing so is that later during assembly we are going to distribute the constraints immediately when transferring local to global dofs. Consequently, there will be no data written at positions of constrained degrees of freedom, so we can let the DoFTools::make_sparsity_pattern function omit these entries by setting the last Boolean flag to false. Once the sparsity pattern is ready, we can use it to initialize the Trilinos matrices. Since the Trilinos matrices store the sparsity pattern internally, there is no need to keep the sparsity pattern around after the initialization of the matrix.\\n\\u00a0     stokes_partitioning.resize(2);\\n\\u00a0     stokes_partitioning[0] = complete_index_set(n_u);\\n\\u00a0     stokes_partitioning[1] = complete_index_set(n_p);\\n\\u00a0     {\\n\\u00a0       stokes_matrix.clear();\\n\\u00a0 \\n\\u00a0       BlockDynamicSparsityPattern dsp(stokes_dofs_per_block,\\n\\u00a0                                       stokes_dofs_per_block);\\n\\u00a0 \\n\\u00a0       Table<2, DoFTools::Coupling> coupling(dim + 1, dim + 1);\\n\\u00a0 \\n\\u00a0       for (unsigned int c = 0; c < dim + 1; ++c)\\n\\u00a0         for (unsigned int d = 0; d < dim + 1; ++d)\\n\\u00a0           if (!((c == dim) && (d == dim)))\\n\\u00a0             coupling[c][d] = DoFTools::always;\\n\\u00a0           else\\n\\u00a0             coupling[c][d] = DoFTools::none;\\n\\u00a0 \\n\\u00a0       DoFTools::make_sparsity_pattern(\\n\\u00a0         stokes_dof_handler, coupling, dsp, stokes_constraints, false);\\n\\u00a0 \\n\\u00a0       stokes_matrix.reinit(dsp);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       Amg_preconditioner.reset();\\n\\u00a0       Mp_preconditioner.reset();\\n\\u00a0       stokes_preconditioner_matrix.clear();\\n\\u00a0 \\n\\u00a0       BlockDynamicSparsityPattern dsp(stokes_dofs_per_block,\\n\\u00a0                                       stokes_dofs_per_block);\\n\\u00a0 \\n\\u00a0       Table<2, DoFTools::Coupling> coupling(dim + 1, dim + 1);\\n\\u00a0       for (unsigned int c = 0; c < dim + 1; ++c)\\n\\u00a0         for (unsigned int d = 0; d < dim + 1; ++d)\\n\\u00a0           if (c == d)\\n\\u00a0             coupling[c][d] = DoFTools::always;\\n\\u00a0           else\\n\\u00a0             coupling[c][d] = DoFTools::none;\\n\\u00a0 \\n\\u00a0       DoFTools::make_sparsity_pattern(\\n\\u00a0         stokes_dof_handler, coupling, dsp, stokes_constraints, false);\\n\\u00a0 \\n\\u00a0       stokes_preconditioner_matrix.reinit(dsp);\\n\\u00a0     }\\n\\u00a0 \\nBlockDynamicSparsityPatternDefinition block_sparsity_pattern.h:549\\nTableDefinition array_view.h:39\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nDoFTools::none@ noneDefinition dof_tools.h:243\\nDoFTools::always@ alwaysDefinition dof_tools.h:247\\nThe creation of the temperature matrix (or, rather, matrices, since we provide a temperature mass matrix and a temperature stiffness matrix, that will be added together for time discretization) follows the generation of the Stokes matrix \\u2013 except that it is much easier here since we do not need to take care of any blocks or coupling between components. Note how we initialize the three temperature matrices: We only use the sparsity pattern for reinitialization of the first matrix, whereas we use the previously generated matrix for the two remaining reinits. The reason for doing so is that reinitialization from an already generated matrix allows Trilinos to reuse the sparsity pattern instead of generating a new one for each copy. This saves both some time and memory.\\n\\u00a0     {\\n\\u00a0       temperature_mass_matrix.clear();\\n\\u00a0       temperature_stiffness_matrix.clear();\\n\\u00a0       temperature_matrix.clear();\\n\\u00a0 \\n\\u00a0       DynamicSparsityPattern dsp(n_T, n_T);\\n\\u00a0       DoFTools::make_sparsity_pattern(temperature_dof_handler,\\n\\u00a0                                       dsp,\\n\\u00a0                                       temperature_constraints,\\n\\u00a0                                       false);\\n\\u00a0 \\n\\u00a0       temperature_matrix.reinit(dsp);\\n\\u00a0       temperature_mass_matrix.reinit(temperature_matrix);\\n\\u00a0       temperature_stiffness_matrix.reinit(temperature_matrix);\\n\\u00a0     }\\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nLastly, we set the vectors for the Stokes solutions \\\\(\\\\mathbf u^{n-1}\\\\) and \\\\(\\\\mathbf u^{n-2}\\\\), as well as for the temperatures \\\\(T^{n}\\\\), \\\\(T^{n-1}\\\\) and \\\\(T^{n-2}\\\\) (required for time stepping) and all the system right hand sides to their correct sizes and block structure:\\n\\u00a0     IndexSet temperature_partitioning = complete_index_set(n_T);\\n\\u00a0     stokes_solution.reinit(stokes_partitioning, MPI_COMM_WORLD);\\n\\u00a0     old_stokes_solution.reinit(stokes_partitioning, MPI_COMM_WORLD);\\n\\u00a0     stokes_rhs.reinit(stokes_partitioning, MPI_COMM_WORLD);\\n\\u00a0 \\n\\u00a0     temperature_solution.reinit(temperature_partitioning, MPI_COMM_WORLD);\\n\\u00a0     old_temperature_solution.reinit(temperature_partitioning, MPI_COMM_WORLD);\\n\\u00a0     old_old_temperature_solution.reinit(temperature_partitioning,\\n\\u00a0                                         MPI_COMM_WORLD);\\n\\u00a0 \\n\\u00a0     temperature_rhs.reinit(temperature_partitioning, MPI_COMM_WORLD);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nIndexSetDefinition index_set.h:70\\n BoussinesqFlowProblem::assemble_stokes_preconditioner\\nThis function assembles the matrix we use for preconditioning the Stokes system. What we need are a vector Laplace matrix on the velocity components and a mass matrix weighted by \\\\(\\\\eta^{-1}\\\\) on the pressure component. We start by generating a quadrature object of appropriate order, the FEValues object that can give values and gradients at the quadrature points (together with quadrature weights). Next we create data structures for the cell matrix and the relation between local and global DoFs. The vectors grad_phi_u and phi_p are going to hold the values of the basis functions in order to faster build up the local matrices, as was already done in step-22. Before we start the loop over all active cells, we have to specify which components are pressure and which are velocity.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::assemble_stokes_preconditioner()\\n\\u00a0   {\\n\\u00a0     stokes_preconditioner_matrix = 0;\\n\\u00a0 \\n\\u00a0     const QGauss<dim> quadrature_formula(stokes_degree + 2);\\n\\u00a0     FEValues<dim>     stokes_fe_values(stokes_fe,\\n\\u00a0                                    quadrature_formula,\\n\\u00a0                                    update_JxW_values | update_values |\\n\\u00a0                                      update_gradients);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = stokes_fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> local_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<Tensor<2, dim>> grad_phi_u(dofs_per_cell);\\n\\u00a0     std::vector<double>         phi_p(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0     const FEValuesExtractors::Scalar pressure(dim);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : stokes_dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         stokes_fe_values.reinit(cell);\\n\\u00a0         local_matrix = 0;\\n\\u00a0 \\nFullMatrixDefinition full_matrix.h:79\\nQGaussDefinition quadrature_lib.h:40\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nFEValuesExtractors::ScalarDefinition fe_values_extractors.h:95\\nThe creation of the local matrix is rather simple. There are only a Laplace term (on the velocity) and a mass matrix weighted by \\\\(\\\\eta^{-1}\\\\) to be generated, so the creation of the local matrix is done in two lines. Once the local matrix is ready (loop over rows and columns in the local matrix on each quadrature point), we get the local DoF indices and write the local information into the global matrix. We do this as in step-27, i.e., we directly apply the constraints from hanging nodes locally. By doing so, we don't have to do that afterwards, and we don't also write into entries of the matrix that will actually be set to zero again later when eliminating constraints.\\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           {\\n\\u00a0             for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n\\u00a0               {\\n\\u00a0                 grad_phi_u[k] = stokes_fe_values[velocities].gradient(k, q);\\n\\u00a0                 phi_p[k]      = stokes_fe_values[pressure].value(k, q);\\n\\u00a0               }\\n\\u00a0 \\n\\u00a0             for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0               for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                 local_matrix(i, j) +=\\n\\u00a0                   (EquationData::eta *\\n\\u00a0                      scalar_product(grad_phi_u[i], grad_phi_u[j]) +\\n\\u00a0                    (1. / EquationData::eta) * phi_p[i] * phi_p[j]) *\\n\\u00a0                   stokes_fe_values.JxW(q);\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0         stokes_constraints.distribute_local_to_global(\\n\\u00a0           local_matrix, local_dof_indices, stokes_preconditioner_matrix);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::build_stokes_preconditioner\\nThis function generates the inner preconditioners that are going to be used for the Schur complement block preconditioner. Since the preconditioners need only to be regenerated when the matrices change, this function does not have to do anything in case the matrices have not changed (i.e., the flag rebuild_stokes_preconditioner has the value false). Otherwise its first task is to call assemble_stokes_preconditioner to generate the preconditioner matrices.\\nNext, we set up the preconditioner for the velocity-velocity matrix \\\\(A\\\\). As explained in the introduction, we are going to use an AMG preconditioner based on a vector Laplace matrix \\\\(\\\\hat{A}\\\\) (which is spectrally close to the Stokes matrix \\\\(A\\\\)). Usually, the TrilinosWrappers::PreconditionAMG class can be seen as a good black-box preconditioner which does not need any special knowledge. In this case, however, we have to be careful: since we build an AMG for a vector problem, we have to tell the preconditioner setup which dofs belong to which vector component. We do this using the function DoFTools::extract_constant_modes, a function that generates a set of dim vectors, where each one has ones in the respective component of the vector problem and zeros elsewhere. Hence, these are the constant modes on each component, which explains the name of the variable.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::build_stokes_preconditioner()\\n\\u00a0   {\\n\\u00a0     if (rebuild_stokes_preconditioner == false)\\n\\u00a0       return;\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   Rebuilding Stokes preconditioner...\\\" << std::flush;\\n\\u00a0 \\n\\u00a0     assemble_stokes_preconditioner();\\n\\u00a0 \\n\\u00a0     Amg_preconditioner = std::make_shared<TrilinosWrappers::PreconditionAMG>();\\n\\u00a0 \\n\\u00a0     std::vector<std::vector<bool>>   constant_modes;\\n\\u00a0     const FEValuesExtractors::Vector velocity_components(0);\\n\\u00a0     DoFTools::extract_constant_modes(stokes_dof_handler,\\n\\u00a0                                      stokes_fe.component_mask(\\n\\u00a0                                        velocity_components),\\n\\u00a0                                      constant_modes);\\n\\u00a0     TrilinosWrappers::PreconditionAMG::AdditionalData amg_data;\\n\\u00a0     amg_data.constant_modes = constant_modes;\\n\\u00a0 \\nDoFTools::extract_constant_modesvoid extract_constant_modes(const DoFHandler< dim, spacedim > &dof_handler, const ComponentMask &component_mask, std::vector< std::vector< bool > > &constant_modes)Definition dof_tools.cc:1416\\nTrilinosWrappers::PreconditionAMG::AdditionalDataDefinition trilinos_precondition.h:1330\\nTrilinosWrappers::PreconditionAMG::AdditionalData::constant_modesstd::vector< std::vector< bool > > constant_modesDefinition trilinos_precondition.h:1500\\nNext, we set some more options of the AMG preconditioner. In particular, we need to tell the AMG setup that we use quadratic basis functions for the velocity matrix (this implies more nonzero elements in the matrix, so that a more robust algorithm needs to be chosen internally). Moreover, we want to be able to control how the coarsening structure is build up. The way the Trilinos smoothed aggregation AMG does this is to look which matrix entries are of similar size as the diagonal entry in order to algebraically build a coarse-grid structure. By setting the parameter aggregation_threshold to 0.02, we specify that all entries that are more than two percent of size of some diagonal pivots in that row should form one coarse grid point. This parameter is rather ad hoc, and some fine-tuning of it can influence the performance of the preconditioner. As a rule of thumb, larger values of aggregation_threshold will decrease the number of iterations, but increase the costs per iteration. A look at the Trilinos documentation will provide more information on these parameters. With this data set, we then initialize the preconditioner with the matrix we want it to apply to.\\nFinally, we also initialize the preconditioner for the inversion of the pressure mass matrix. This matrix is symmetric and well-behaved, so we can chose a simple preconditioner. We stick with an incomplete Cholesky (IC) factorization preconditioner, which is designed for symmetric matrices. We could have also chosen an SSOR preconditioner with relaxation factor around 1.2, but IC is cheaper for our example. We wrap the preconditioners into a std::shared_ptr pointer, which makes it easier to recreate the preconditioner next time around since we do not have to care about destroying the previously used object.\\n\\u00a0     amg_data.elliptic              = true;\\n\\u00a0     amg_data.higher_order_elements = true;\\n\\u00a0     amg_data.smoother_sweeps       = 2;\\n\\u00a0     amg_data.aggregation_threshold = 0.02;\\n\\u00a0     Amg_preconditioner->initialize(stokes_preconditioner_matrix.block(0, 0),\\n\\u00a0                                    amg_data);\\n\\u00a0 \\n\\u00a0     Mp_preconditioner = std::make_shared<TrilinosWrappers::PreconditionIC>();\\n\\u00a0     Mp_preconditioner->initialize(stokes_preconditioner_matrix.block(1, 1));\\n\\u00a0 \\n\\u00a0     std::cout << std::endl;\\n\\u00a0 \\n\\u00a0     rebuild_stokes_preconditioner = false;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::assemble_stokes_system\\nThe time lag scheme we use for advancing the coupled Stokes-temperature system forces us to split up the assembly (and the solution of linear systems) into two step. The first one is to create the Stokes system matrix and right hand side, and the second is to create matrix and right hand sides for the temperature dofs, which depends on the result of the linear system for the velocity.\\nThis function is called at the beginning of each time step. In the first time step or if the mesh has changed, indicated by the rebuild_stokes_matrix, we need to assemble the Stokes matrix; on the other hand, if the mesh hasn't changed and the matrix is already available, this is not necessary and all we need to do is assemble the right hand side vector which changes in each time step.\\nRegarding the technical details of implementation, not much has changed from step-22. We reset matrix and vector, create a quadrature formula on the cells, and then create the respective FEValues object. For the update flags, we require basis function derivatives only in case of a full assembly, since they are not needed for the right hand side; as always, choosing the minimal set of flags depending on what is currently needed makes the call to FEValues::reinit further down in the program more efficient.\\nThere is one thing that needs to be commented \\u2013 since we have a separate finite element and DoFHandler for the temperature, we need to generate a second FEValues object for the proper evaluation of the temperature solution. This isn't too complicated to realize here: just use the temperature structures and set an update flag for the basis function values which we need for evaluation of the temperature solution. The only important part to remember here is that the same quadrature formula is used for both FEValues objects to ensure that we get matching information when we loop over the quadrature points of the two objects.\\nThe declarations proceed with some shortcuts for array sizes, the creation of the local matrix and right hand side as well as the vector for the indices of the local dofs compared to the global system.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::assemble_stokes_system()\\n\\u00a0   {\\n\\u00a0     std::cout << \\\"   Assembling...\\\" << std::flush;\\n\\u00a0 \\n\\u00a0     if (rebuild_stokes_matrix == true)\\n\\u00a0       stokes_matrix = 0;\\n\\u00a0 \\n\\u00a0     stokes_rhs = 0;\\n\\u00a0 \\n\\u00a0     const QGauss<dim> quadrature_formula(stokes_degree + 2);\\n\\u00a0     FEValues<dim>     stokes_fe_values(\\n\\u00a0       stokes_fe,\\n\\u00a0       quadrature_formula,\\n\\u00a0       update_values | update_quadrature_points | update_JxW_values |\\n\\u00a0         (rebuild_stokes_matrix == true ? update_gradients : UpdateFlags(0)));\\n\\u00a0 \\n\\u00a0     FEValues<dim> temperature_fe_values(temperature_fe,\\n\\u00a0                                         quadrature_formula,\\n\\u00a0                                         update_values);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = stokes_fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> local_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0     Vector<double>     local_rhs(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\nUpdateFlagsUpdateFlagsDefinition fe_update_flags.h:64\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nNext we need a vector that will contain the values of the temperature solution at the previous time level at the quadrature points to assemble the source term in the right hand side of the momentum equation. Let's call this vector old_solution_values.\\nThe set of vectors we create next hold the evaluations of the basis functions as well as their gradients and symmetrized gradients that will be used for creating the matrices. Putting these into their own arrays rather than asking the FEValues object for this information each time it is needed is an optimization to accelerate the assembly process, see step-22 for details.\\nThe last two declarations are used to extract the individual blocks (velocity, pressure, temperature) from the total FE system.\\n\\u00a0     std::vector<double> old_temperature_values(n_q_points);\\n\\u00a0 \\n\\u00a0     std::vector<Tensor<1, dim>>          phi_u(dofs_per_cell);\\n\\u00a0     std::vector<SymmetricTensor<2, dim>> grads_phi_u(dofs_per_cell);\\n\\u00a0     std::vector<double>                  div_phi_u(dofs_per_cell);\\n\\u00a0     std::vector<double>                  phi_p(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0     const FEValuesExtractors::Scalar pressure(dim);\\n\\u00a0 \\nNow start the loop over all cells in the problem. We are working on two different DoFHandlers for this assembly routine, so we must have two different cell iterators for the two objects in use. This might seem a bit peculiar, since both the Stokes system and the temperature system use the same grid, but that's the only way to keep degrees of freedom in sync. The first statements within the loop are again all very familiar, doing the update of the finite element data as specified by the update flags, zeroing out the local arrays and getting the values of the old solution at the quadrature points. Then we are ready to loop over the quadrature points on the cell.\\n\\u00a0     auto       cell             = stokes_dof_handler.begin_active();\\n\\u00a0     const auto endc             = stokes_dof_handler.end();\\n\\u00a0     auto       temperature_cell = temperature_dof_handler.begin_active();\\n\\u00a0 \\n\\u00a0     for (; cell != endc; ++cell, ++temperature_cell)\\n\\u00a0       {\\n\\u00a0         stokes_fe_values.reinit(cell);\\n\\u00a0         temperature_fe_values.reinit(temperature_cell);\\n\\u00a0 \\n\\u00a0         local_matrix = 0;\\n\\u00a0         local_rhs    = 0;\\n\\u00a0 \\n\\u00a0         temperature_fe_values.get_function_values(old_temperature_solution,\\n\\u00a0                                                   old_temperature_values);\\n\\u00a0 \\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           {\\n\\u00a0             const double old_temperature = old_temperature_values[q];\\n\\u00a0 \\nNext we extract the values and gradients of basis functions relevant to the terms in the inner products. As shown in step-22 this helps accelerate assembly.\\nOnce this is done, we start the loop over the rows and columns of the local matrix and feed the matrix with the relevant products. The right hand side is filled with the forcing term driven by temperature in direction of gravity (which is vertical in our example). Note that the right hand side term is always generated, whereas the matrix contributions are only updated when it is requested by the rebuild_matrices flag.\\n\\u00a0             for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n\\u00a0               {\\n\\u00a0                 phi_u[k] = stokes_fe_values[velocities].value(k, q);\\n\\u00a0                 if (rebuild_stokes_matrix)\\n\\u00a0                   {\\n\\u00a0                     grads_phi_u[k] =\\n\\u00a0                       stokes_fe_values[velocities].symmetric_gradient(k, q);\\n\\u00a0                     div_phi_u[k] =\\n\\u00a0                       stokes_fe_values[velocities].divergence(k, q);\\n\\u00a0                     phi_p[k] = stokes_fe_values[pressure].value(k, q);\\n\\u00a0                   }\\n\\u00a0               }\\n\\u00a0 \\n\\u00a0             if (rebuild_stokes_matrix)\\n\\u00a0               for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0                 for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                   local_matrix(i, j) +=\\n\\u00a0                     (EquationData::eta * 2 * (grads_phi_u[i] * grads_phi_u[j]) -\\n\\u00a0                      div_phi_u[i] * phi_p[j] - phi_p[i] * div_phi_u[j]) *\\n\\u00a0                     stokes_fe_values.JxW(q);\\n\\u00a0 \\n\\u00a0             const Point<dim> gravity =\\n\\u00a0               -((dim == 2) ? (Point<dim>(0, 1)) : (Point<dim>(0, 0, 1)));\\n\\u00a0             for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0               local_rhs(i) += (-EquationData::density * EquationData::beta *\\n\\u00a0                                gravity * phi_u[i] * old_temperature) *\\n\\u00a0                               stokes_fe_values.JxW(q);\\n\\u00a0           }\\n\\u00a0 \\nThe last step in the loop over all cells is to enter the local contributions into the global matrix and vector structures to the positions specified in local_dof_indices. Again, we let the AffineConstraints class do the insertion of the cell matrix elements to the global matrix, which already condenses the hanging node constraints.\\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0 \\n\\u00a0         if (rebuild_stokes_matrix == true)\\n\\u00a0           stokes_constraints.distribute_local_to_global(local_matrix,\\n\\u00a0                                                         local_rhs,\\n\\u00a0                                                         local_dof_indices,\\n\\u00a0                                                         stokes_matrix,\\n\\u00a0                                                         stokes_rhs);\\n\\u00a0         else\\n\\u00a0           stokes_constraints.distribute_local_to_global(local_rhs,\\n\\u00a0                                                         local_dof_indices,\\n\\u00a0                                                         stokes_rhs);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     rebuild_stokes_matrix = false;\\n\\u00a0 \\n\\u00a0     std::cout << std::endl;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::assemble_temperature_matrix\\nThis function assembles the matrix in the temperature equation. The temperature matrix consists of two parts, a mass matrix and the time step size times a stiffness matrix given by a Laplace term times the amount of diffusion. Since the matrix depends on the time step size (which varies from one step to another), the temperature matrix needs to be updated every time step. We could simply regenerate the matrices in every time step, but this is not really efficient since mass and Laplace matrix do only change when we change the mesh. Hence, we do this more efficiently by generating two separate matrices in this function, one for the mass matrix and one for the stiffness (diffusion) matrix. We will then sum up the matrix plus the stiffness matrix times the time step size once we know the actual time step.\\nSo the details for this first step are very simple. In case we need to rebuild the matrix (i.e., the mesh has changed), we zero the data structures, get a quadrature formula and a FEValues object, and create local matrices, local dof indices and evaluation structures for the basis functions.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::assemble_temperature_matrix()\\n\\u00a0   {\\n\\u00a0     if (rebuild_temperature_matrices == false)\\n\\u00a0       return;\\n\\u00a0 \\n\\u00a0     temperature_mass_matrix      = 0;\\n\\u00a0     temperature_stiffness_matrix = 0;\\n\\u00a0 \\n\\u00a0     const QGauss<dim> quadrature_formula(temperature_degree + 2);\\n\\u00a0     FEValues<dim>     temperature_fe_values(temperature_fe,\\n\\u00a0                                         quadrature_formula,\\n\\u00a0                                         update_values | update_gradients |\\n\\u00a0                                           update_JxW_values);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = temperature_fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> local_mass_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0     FullMatrix<double> local_stiffness_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<double>         phi_T(dofs_per_cell);\\n\\u00a0     std::vector<Tensor<1, dim>> grad_phi_T(dofs_per_cell);\\n\\u00a0 \\nNow, let's start the loop over all cells in the triangulation. We need to zero out the local matrices, update the finite element evaluations, and then loop over the rows and columns of the matrices on each quadrature point, where we then create the mass matrix and the stiffness matrix (Laplace terms times the diffusion EquationData::kappa. Finally, we let the constraints object insert these values into the global matrix, and directly condense the constraints into the matrix.\\n\\u00a0     for (const auto &cell : temperature_dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         local_mass_matrix      = 0;\\n\\u00a0         local_stiffness_matrix = 0;\\n\\u00a0 \\n\\u00a0         temperature_fe_values.reinit(cell);\\n\\u00a0 \\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           {\\n\\u00a0             for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n\\u00a0               {\\n\\u00a0                 grad_phi_T[k] = temperature_fe_values.shape_grad(k, q);\\n\\u00a0                 phi_T[k]      = temperature_fe_values.shape_value(k, q);\\n\\u00a0               }\\n\\u00a0 \\n\\u00a0             for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0               for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                 {\\n\\u00a0                   local_mass_matrix(i, j) +=\\n\\u00a0                     (phi_T[i] * phi_T[j] * temperature_fe_values.JxW(q));\\n\\u00a0                   local_stiffness_matrix(i, j) +=\\n\\u00a0                     (EquationData::kappa * grad_phi_T[i] * grad_phi_T[j] *\\n\\u00a0                      temperature_fe_values.JxW(q));\\n\\u00a0                 }\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0 \\n\\u00a0         temperature_constraints.distribute_local_to_global(\\n\\u00a0           local_mass_matrix, local_dof_indices, temperature_mass_matrix);\\n\\u00a0         temperature_constraints.distribute_local_to_global(\\n\\u00a0           local_stiffness_matrix,\\n\\u00a0           local_dof_indices,\\n\\u00a0           temperature_stiffness_matrix);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     rebuild_temperature_matrices = false;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::assemble_temperature_system\\nThis function does the second part of the assembly work on the temperature matrix, the actual addition of pressure mass and stiffness matrix (where the time step size comes into play), as well as the creation of the velocity-dependent right hand side. The declarations for the right hand side assembly in this function are pretty much the same as the ones used in the other assembly routines, except that we restrict ourselves to vectors this time. We are going to calculate residuals on the temperature system, which means that we have to evaluate second derivatives, specified by the update flag update_hessians.\\nThe temperature equation is coupled to the Stokes system by means of the fluid velocity. These two parts of the solution are associated with different DoFHandlers, so we again need to create a second FEValues object for the evaluation of the velocity at the quadrature points.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::assemble_temperature_system(\\n\\u00a0     const double maximal_velocity)\\n\\u00a0   {\\n\\u00a0     const bool use_bdf2_scheme = (timestep_number != 0);\\n\\u00a0 \\n\\u00a0     if (use_bdf2_scheme == true)\\n\\u00a0       {\\n\\u00a0         temperature_matrix.copy_from(temperature_mass_matrix);\\n\\u00a0         temperature_matrix *=\\n\\u00a0           (2 * time_step + old_time_step) / (time_step + old_time_step);\\n\\u00a0         temperature_matrix.add(time_step, temperature_stiffness_matrix);\\n\\u00a0       }\\n\\u00a0     else\\n\\u00a0       {\\n\\u00a0         temperature_matrix.copy_from(temperature_mass_matrix);\\n\\u00a0         temperature_matrix.add(time_step, temperature_stiffness_matrix);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     temperature_rhs = 0;\\n\\u00a0 \\n\\u00a0     const QGauss<dim> quadrature_formula(temperature_degree + 2);\\n\\u00a0     FEValues<dim>     temperature_fe_values(temperature_fe,\\n\\u00a0                                         quadrature_formula,\\n\\u00a0                                         update_values | update_gradients |\\n\\u00a0                                           update_hessians |\\n\\u00a0                                           update_quadrature_points |\\n\\u00a0                                           update_JxW_values);\\n\\u00a0     FEValues<dim>     stokes_fe_values(stokes_fe,\\n\\u00a0                                    quadrature_formula,\\n\\u00a0                                    update_values);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = temperature_fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points    = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     Vector<double> local_rhs(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\nupdate_hessians@ update_hessiansSecond derivatives of shape functions.Definition fe_update_flags.h:87\\nNext comes the declaration of vectors to hold the old and older solution values (as a notation for time levels \\\\(n-1\\\\) and \\\\(n-2\\\\), respectively) and gradients at quadrature points of the current cell. We also declare an object to hold the temperature right hand side values (gamma_values), and we again use shortcuts for the temperature basis functions. Eventually, we need to find the temperature extrema and the diameter of the computational domain which will be used for the definition of the stabilization parameter (we got the maximal velocity as an input to this function).\\n\\u00a0     std::vector<Tensor<1, dim>> old_velocity_values(n_q_points);\\n\\u00a0     std::vector<Tensor<1, dim>> old_old_velocity_values(n_q_points);\\n\\u00a0     std::vector<double>         old_temperature_values(n_q_points);\\n\\u00a0     std::vector<double>         old_old_temperature_values(n_q_points);\\n\\u00a0     std::vector<Tensor<1, dim>> old_temperature_grads(n_q_points);\\n\\u00a0     std::vector<Tensor<1, dim>> old_old_temperature_grads(n_q_points);\\n\\u00a0     std::vector<double>         old_temperature_laplacians(n_q_points);\\n\\u00a0     std::vector<double>         old_old_temperature_laplacians(n_q_points);\\n\\u00a0 \\n\\u00a0     EquationData::TemperatureRightHandSide<dim> temperature_right_hand_side;\\n\\u00a0     std::vector<double>                         gamma_values(n_q_points);\\n\\u00a0 \\n\\u00a0     std::vector<double>         phi_T(dofs_per_cell);\\n\\u00a0     std::vector<Tensor<1, dim>> grad_phi_T(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     const std::pair<double, double> global_T_range =\\n\\u00a0       get_extrapolated_temperature_range();\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0 \\nNow, let's start the loop over all cells in the triangulation. Again, we need two cell iterators that walk in parallel through the cells of the two involved DoFHandler objects for the Stokes and temperature part. Within the loop, we first set the local rhs to zero, and then get the values and derivatives of the old solution functions at the quadrature points, since they are going to be needed for the definition of the stabilization parameters and as coefficients in the equation, respectively. Note that since the temperature has its own DoFHandler and FEValues object we get the entire solution at the quadrature point (which is the scalar temperature field only anyway) whereas for the Stokes part we restrict ourselves to extracting the velocity part (and ignoring the pressure part) by using stokes_fe_values[velocities].get_function_values.\\n\\u00a0     auto       cell        = temperature_dof_handler.begin_active();\\n\\u00a0     const auto endc        = temperature_dof_handler.end();\\n\\u00a0     auto       stokes_cell = stokes_dof_handler.begin_active();\\n\\u00a0 \\n\\u00a0     for (; cell != endc; ++cell, ++stokes_cell)\\n\\u00a0       {\\n\\u00a0         local_rhs = 0;\\n\\u00a0 \\n\\u00a0         temperature_fe_values.reinit(cell);\\n\\u00a0         stokes_fe_values.reinit(stokes_cell);\\n\\u00a0 \\n\\u00a0         temperature_fe_values.get_function_values(old_temperature_solution,\\n\\u00a0                                                   old_temperature_values);\\n\\u00a0         temperature_fe_values.get_function_values(old_old_temperature_solution,\\n\\u00a0                                                   old_old_temperature_values);\\n\\u00a0 \\n\\u00a0         temperature_fe_values.get_function_gradients(old_temperature_solution,\\n\\u00a0                                                      old_temperature_grads);\\n\\u00a0         temperature_fe_values.get_function_gradients(\\n\\u00a0           old_old_temperature_solution, old_old_temperature_grads);\\n\\u00a0 \\n\\u00a0         temperature_fe_values.get_function_laplacians(\\n\\u00a0           old_temperature_solution, old_temperature_laplacians);\\n\\u00a0         temperature_fe_values.get_function_laplacians(\\n\\u00a0           old_old_temperature_solution, old_old_temperature_laplacians);\\n\\u00a0 \\n\\u00a0         temperature_right_hand_side.value_list(\\n\\u00a0           temperature_fe_values.get_quadrature_points(), gamma_values);\\n\\u00a0 \\n\\u00a0         stokes_fe_values[velocities].get_function_values(stokes_solution,\\n\\u00a0                                                          old_velocity_values);\\n\\u00a0         stokes_fe_values[velocities].get_function_values(\\n\\u00a0           old_stokes_solution, old_old_velocity_values);\\n\\u00a0 \\nNext, we calculate the artificial viscosity for stabilization according to the discussion in the introduction using the dedicated function. With that at hand, we can get into the loop over quadrature points and local rhs vector components. The terms here are quite lengthy, but their definition follows the time-discrete system developed in the introduction of this program. The BDF-2 scheme needs one more term from the old time step (and involves more complicated factors) than the backward Euler scheme that is used for the first time step. When all this is done, we distribute the local vector into the global one (including hanging node constraints).\\n\\u00a0         const double nu =\\n\\u00a0           compute_viscosity(old_temperature_values,\\n\\u00a0                             old_old_temperature_values,\\n\\u00a0                             old_temperature_grads,\\n\\u00a0                             old_old_temperature_grads,\\n\\u00a0                             old_temperature_laplacians,\\n\\u00a0                             old_old_temperature_laplacians,\\n\\u00a0                             old_velocity_values,\\n\\u00a0                             old_old_velocity_values,\\n\\u00a0                             gamma_values,\\n\\u00a0                             maximal_velocity,\\n\\u00a0                             global_T_range.second - global_T_range.first,\\n\\u00a0                             cell->diameter());\\n\\u00a0 \\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           {\\n\\u00a0             for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n\\u00a0               {\\n\\u00a0                 grad_phi_T[k] = temperature_fe_values.shape_grad(k, q);\\n\\u00a0                 phi_T[k]      = temperature_fe_values.shape_value(k, q);\\n\\u00a0               }\\n\\u00a0 \\n\\u00a0             const double T_term_for_rhs =\\n\\u00a0               (use_bdf2_scheme ?\\n\\u00a0                  (old_temperature_values[q] * (1 + time_step / old_time_step) -\\n\\u00a0                   old_old_temperature_values[q] * (time_step * time_step) /\\n\\u00a0                     (old_time_step * (time_step + old_time_step))) :\\n\\u00a0                  old_temperature_values[q]);\\n\\u00a0 \\n\\u00a0             const Tensor<1, dim> ext_grad_T =\\n\\u00a0               (use_bdf2_scheme ?\\n\\u00a0                  (old_temperature_grads[q] * (1 + time_step / old_time_step) -\\n\\u00a0                   old_old_temperature_grads[q] * time_step / old_time_step) :\\n\\u00a0                  old_temperature_grads[q]);\\n\\u00a0 \\n\\u00a0             const Tensor<1, dim> extrapolated_u =\\n\\u00a0               (use_bdf2_scheme ?\\n\\u00a0                  (old_velocity_values[q] * (1 + time_step / old_time_step) -\\n\\u00a0                   old_old_velocity_values[q] * time_step / old_time_step) :\\n\\u00a0                  old_velocity_values[q]);\\n\\u00a0 \\n\\u00a0             for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0               local_rhs(i) +=\\n\\u00a0                 (T_term_for_rhs * phi_T[i] -\\n\\u00a0                  time_step * extrapolated_u * ext_grad_T * phi_T[i] -\\n\\u00a0                  time_step * nu * ext_grad_T * grad_phi_T[i] +\\n\\u00a0                  time_step * gamma_values[q] * phi_T[i]) *\\n\\u00a0                 temperature_fe_values.JxW(q);\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0         temperature_constraints.distribute_local_to_global(local_rhs,\\n\\u00a0                                                            local_dof_indices,\\n\\u00a0                                                            temperature_rhs);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::solve\\nThis function solves the linear systems of equations. Following the introduction, we start with the Stokes system, where we need to generate our block Schur preconditioner. Since all the relevant actions are implemented in the class BlockSchurPreconditioner, all we have to do is to initialize the class appropriately. What we need to pass down is an InverseMatrix object for the pressure mass matrix, which we set up using the respective class together with the IC preconditioner we already generated, and the AMG preconditioner for the velocity-velocity matrix. Note that both Mp_preconditioner and Amg_preconditioner are only pointers, so we use * to pass down the actual preconditioner objects.\\nOnce the preconditioner is ready, we create a GMRES solver for the block system. Since we are working with Trilinos data structures, we have to set the respective template argument in the solver. GMRES needs to internally store temporary vectors for each iteration (see the discussion in the results section of step-22) \\u2013 the more vectors it can use, the better it will generally perform. To keep memory demands in check, we set the number of vectors to 100. This means that up to 100 solver iterations, every temporary vector can be stored. If the solver needs to iterate more often to get the specified tolerance, it will work on a reduced set of vectors by restarting at every 100 iterations.\\nWith this all set up, we solve the system and distribute the constraints in the Stokes system, i.e., hanging nodes and no-flux boundary condition, in order to have the appropriate solution values even at constrained dofs. Finally, we write the number of iterations to the screen.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     std::cout << \\\"   Solving...\\\" << std::endl;\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       const LinearSolvers::InverseMatrix<TrilinosWrappers::SparseMatrix,\\n\\u00a0                                          TrilinosWrappers::PreconditionIC>\\n\\u00a0         mp_inverse(stokes_preconditioner_matrix.block(1, 1),\\n\\u00a0                    *Mp_preconditioner);\\n\\u00a0 \\n\\u00a0       const LinearSolvers::BlockSchurPreconditioner<\\n\\u00a0         TrilinosWrappers::PreconditionAMG,\\n\\u00a0         TrilinosWrappers::PreconditionIC>\\n\\u00a0         preconditioner(stokes_matrix, mp_inverse, *Amg_preconditioner);\\n\\u00a0 \\n\\u00a0       SolverControl solver_control(stokes_matrix.m(),\\n\\u00a0                                    1e-6 * stokes_rhs.l2_norm());\\n\\u00a0 \\n\\u00a0       SolverGMRES<TrilinosWrappers::MPI::BlockVector> gmres(\\n\\u00a0         solver_control,\\n\\u00a0         SolverGMRES<TrilinosWrappers::MPI::BlockVector>::AdditionalData(100));\\n\\u00a0 \\n\\u00a0       for (unsigned int i = 0; i < stokes_solution.size(); ++i)\\n\\u00a0         if (stokes_constraints.is_constrained(i))\\n\\u00a0           stokes_solution(i) = 0;\\n\\u00a0 \\n\\u00a0       gmres.solve(stokes_matrix, stokes_solution, stokes_rhs, preconditioner);\\n\\u00a0 \\n\\u00a0       stokes_constraints.distribute(stokes_solution);\\n\\u00a0 \\n\\u00a0       std::cout << \\\"   \\\" << solver_control.last_step()\\n\\u00a0                 << \\\" GMRES iterations for Stokes subsystem.\\\" << std::endl;\\n\\u00a0     }\\n\\u00a0 \\nSolverGMRESDefinition solver_gmres.h:353\\nTrilinosWrappers::PreconditionAMGDefinition trilinos_precondition.h:1321\\nTrilinosWrappers::PreconditionICDefinition trilinos_precondition.h:842\\nSolverGMRES::AdditionalDataDefinition solver_gmres.h:359\\nOnce we know the Stokes solution, we can determine the new time step from the maximal velocity. We have to do this to satisfy the CFL condition since convection terms are treated explicitly in the temperature equation, as discussed in the introduction. The exact form of the formula used here for the time step is discussed in the results section of this program.\\nThere is a snatch here. The formula contains a division by the maximum value of the velocity. However, at the start of the computation, we have a constant temperature field (we start with a constant temperature, and it will be nonconstant only after the first time step during which the source acts). Constant temperature means that no buoyancy acts, and so the velocity is zero. Dividing by it will not likely lead to anything good.\\nTo avoid the resulting infinite time step, we ask whether the maximal velocity is very small (in particular smaller than the values we encounter during any of the following time steps) and if so rather than dividing by zero we just divide by a small value, resulting in a large but finite time step.\\n\\u00a0     old_time_step                 = time_step;\\n\\u00a0     const double maximal_velocity = get_maximal_velocity();\\n\\u00a0 \\n\\u00a0     if (maximal_velocity >= 0.01)\\n\\u00a0       time_step = 1. / (1.7 * dim * std::sqrt(1. * dim)) / temperature_degree *\\n\\u00a0                   GridTools::minimal_cell_diameter(triangulation) /\\n\\u00a0                   maximal_velocity;\\n\\u00a0     else\\n\\u00a0       time_step = 1. / (1.7 * dim * std::sqrt(1. * dim)) / temperature_degree *\\n\\u00a0                   GridTools::minimal_cell_diameter(triangulation) / .01;\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   \\\"\\n\\u00a0               << \\\"Time step: \\\" << time_step << std::endl;\\n\\u00a0 \\n\\u00a0     temperature_solution = old_temperature_solution;\\n\\u00a0 \\nGridTools::minimal_cell_diameterdouble minimal_cell_diameter(const Triangulation< dim, spacedim > &triangulation, const Mapping< dim, spacedim > &mapping=(ReferenceCells::get_hypercube< dim >() .template get_default_linear_mapping< dim, spacedim >()))Definition grid_tools_geometry.cc:407\\nNext we set up the temperature system and the right hand side using the function assemble_temperature_system(). Knowing the matrix and right hand side of the temperature equation, we set up a preconditioner and a solver. The temperature matrix is a mass matrix (with eigenvalues around one) plus a Laplace matrix (with eigenvalues between zero and \\\\(ch^{-2}\\\\)) times a small number proportional to the time step \\\\(k_n\\\\). Hence, the resulting symmetric and positive definite matrix has eigenvalues in the range \\\\([1,1+k_nh^{-2}]\\\\) (up to constants). This matrix is only moderately ill conditioned even for small mesh sizes and we get a reasonably good preconditioner by simple means, for example with an incomplete Cholesky decomposition preconditioner (IC) as we also use for preconditioning the pressure mass matrix solver. As a solver, we choose the conjugate gradient method CG. As before, we tell the solver to use Trilinos vectors via the template argument TrilinosWrappers::MPI::Vector. Finally, we solve, distribute the hanging node constraints and write out the number of iterations.\\n\\u00a0     assemble_temperature_system(maximal_velocity);\\n\\u00a0     {\\n\\u00a0       SolverControl solver_control(temperature_matrix.m(),\\n\\u00a0                                    1e-8 * temperature_rhs.l2_norm());\\n\\u00a0       SolverCG<TrilinosWrappers::MPI::Vector> cg(solver_control);\\n\\u00a0 \\n\\u00a0       TrilinosWrappers::PreconditionIC preconditioner;\\n\\u00a0       preconditioner.initialize(temperature_matrix);\\n\\u00a0 \\n\\u00a0       cg.solve(temperature_matrix,\\n\\u00a0                temperature_solution,\\n\\u00a0                temperature_rhs,\\n\\u00a0                preconditioner);\\n\\u00a0 \\n\\u00a0       temperature_constraints.distribute(temperature_solution);\\n\\u00a0 \\n\\u00a0       std::cout << \\\"   \\\" << solver_control.last_step()\\n\\u00a0                 << \\\" CG iterations for temperature.\\\" << std::endl;\\n\\u00a0 \\nTrilinosWrappers::PreconditionIC::initializevoid initialize(const SparseMatrix &matrix, const AdditionalData &additional_data=AdditionalData())Definition trilinos_precondition.cc:453\\nAt the end of this function, we step through the vector and read out the maximum and minimum temperature value, which we also want to output. This will come in handy when determining the correct constant in the choice of time step as discuss in the results section of this program.\\n\\u00a0       double min_temperature = temperature_solution(0),\\n\\u00a0              max_temperature = temperature_solution(0);\\n\\u00a0       for (unsigned int i = 0; i < temperature_solution.size(); ++i)\\n\\u00a0         {\\n\\u00a0           min_temperature =\\n\\u00a0             std::min<double>(min_temperature, temperature_solution(i));\\n\\u00a0           max_temperature =\\n\\u00a0             std::max<double>(max_temperature, temperature_solution(i));\\n\\u00a0         }\\n\\u00a0 \\n\\u00a0       std::cout << \\\"   Temperature range: \\\" << min_temperature << ' '\\n\\u00a0                 << max_temperature << std::endl;\\n\\u00a0     }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::output_results\\nThis function writes the solution to a VTK output file for visualization, which is done every tenth time step. This is usually quite a simple task, since the deal.II library provides functions that do almost all the job for us. There is one new function compared to previous examples: We want to visualize both the Stokes solution and the temperature as one data set, but we have done all the calculations based on two different DoFHandler objects. Luckily, the DataOut class is prepared to deal with it. All we have to do is to not attach one single DoFHandler at the beginning and then use that for all added vector, but specify the DoFHandler to each vector separately. The rest is done as in step-22. We create solution names (that are going to appear in the visualization program for the individual components). The first dim components are the vector velocity, and then we have pressure for the Stokes part, whereas temperature is scalar. This information is read out using the DataComponentInterpretation helper class. Next, we actually attach the data vectors with their DoFHandler objects, build patches according to the degree of freedom, which are (sub-) elements that describe the data for visualization programs. Finally, we open a file (that includes the time step number) and write the vtk data into it.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::output_results() const\\n\\u00a0   {\\n\\u00a0     if (timestep_number % 10 != 0)\\n\\u00a0       return;\\n\\u00a0 \\n\\u00a0     std::vector<std::string> stokes_names(dim, \\\"velocity\\\");\\n\\u00a0     stokes_names.emplace_back(\\\"p\\\");\\n\\u00a0     std::vector<DataComponentInterpretation::DataComponentInterpretation>\\n\\u00a0       stokes_component_interpretation(\\n\\u00a0         dim + 1, DataComponentInterpretation::component_is_scalar);\\n\\u00a0     for (unsigned int i = 0; i < dim; ++i)\\n\\u00a0       stokes_component_interpretation[i] =\\n\\u00a0         DataComponentInterpretation::component_is_part_of_vector;\\n\\u00a0 \\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0     data_out.add_data_vector(stokes_dof_handler,\\n\\u00a0                              stokes_solution,\\n\\u00a0                              stokes_names,\\n\\u00a0                              stokes_component_interpretation);\\n\\u00a0     data_out.add_data_vector(temperature_dof_handler,\\n\\u00a0                              temperature_solution,\\n\\u00a0                              \\\"T\\\");\\n\\u00a0     data_out.build_patches(std::min(stokes_degree, temperature_degree));\\n\\u00a0 \\n\\u00a0     std::ofstream output(\\\"solution-\\\" +\\n\\u00a0                          Utilities::int_to_string(timestep_number, 4) + \\\".vtk\\\");\\n\\u00a0     data_out.write_vtk(output);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOutDefinition data_out.h:147\\nDataComponentInterpretation::component_is_scalar@ component_is_scalarDefinition data_component_interpretation.h:52\\nDataComponentInterpretation::component_is_part_of_vector@ component_is_part_of_vectorDefinition data_component_interpretation.h:58\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\n BoussinesqFlowProblem::refine_mesh\\nThis function takes care of the adaptive mesh refinement. The three tasks this function performs is to first find out which cells to refine/coarsen, then to actually do the refinement and eventually transfer the solution vectors between the two different grids. The first task is simply achieved by using the well-established Kelly error estimator on the temperature (it is the temperature we're mainly interested in for this program, and we need to be accurate in regions of high temperature gradients, also to not have too much numerical diffusion). The second task is to actually do the remeshing. That involves only basic functions as well, such as the refine_and_coarsen_fixed_fraction that refines those cells with the largest estimated error that together make up 80 per cent of the error, and coarsens those cells with the smallest error that make up for a combined 10 per cent of the error.\\nIf implemented like this, we would get a program that will not make much progress: Remember that we expect temperature fields that are nearly discontinuous (the diffusivity \\\\(\\\\kappa\\\\) is very small after all) and consequently we can expect that a freely adapted mesh will refine further and further into the areas of large gradients. This decrease in mesh size will then be accompanied by a decrease in time step, requiring an exceedingly large number of time steps to solve to a given final time. It will also lead to meshes that are much better at resolving discontinuities after several mesh refinement cycles than in the beginning.\\nIn particular to prevent the decrease in time step size and the correspondingly large number of time steps, we limit the maximal refinement depth of the mesh. To this end, after the refinement indicator has been applied to the cells, we simply loop over all cells on the finest level and unselect them from refinement if they would result in too high a mesh level.\\n\\u00a0   template <int dim>\\n\\u00a0   void\\n\\u00a0   BoussinesqFlowProblem<dim>::refine_mesh(const unsigned int max_grid_level)\\n\\u00a0   {\\n\\u00a0     Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n\\u00a0 \\n\\u00a0     KellyErrorEstimator<dim>::estimate(temperature_dof_handler,\\n\\u00a0                                        QGauss<dim - 1>(temperature_degree + 1),\\n\\u00a0                                        {},\\n\\u00a0                                        temperature_solution,\\n\\u00a0                                        estimated_error_per_cell);\\n\\u00a0 \\n\\u00a0     GridRefinement::refine_and_coarsen_fixed_fraction(triangulation,\\n\\u00a0                                                       estimated_error_per_cell,\\n\\u00a0                                                       0.8,\\n\\u00a0                                                       0.1);\\n\\u00a0     if (triangulation.n_levels() > max_grid_level)\\n\\u00a0       for (auto &cell :\\n\\u00a0            triangulation.active_cell_iterators_on_level(max_grid_level))\\n\\u00a0         cell->clear_refine_flag();\\n\\u00a0 \\nKellyErrorEstimator::estimatestatic void estimate(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim - 1 > &quadrature, const std::map< types::boundary_id, const Function< spacedim, Number > * > &neumann_bc, const ReadVector< Number > &solution, Vector< float > &error, const ComponentMask &component_mask={}, const Function< spacedim > *coefficients=nullptr, const unsigned int n_threads=numbers::invalid_unsigned_int, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id, const types::material_id material_id=numbers::invalid_material_id, const Strategy strategy=cell_diameter_over_24)\\nGridRefinement::refine_and_coarsen_fixed_fractionvoid refine_and_coarsen_fixed_fraction(Triangulation< dim, spacedim > &tria, const Vector< Number > &criteria, const double top_fraction, const double bottom_fraction, const unsigned int max_n_cells=std::numeric_limits< unsigned int >::max(), const VectorTools::NormType norm_type=VectorTools::L1_norm)Definition grid_refinement.cc:386\\nAs part of mesh refinement we need to transfer the solution vectors from the old mesh to the new one. To this end we use the SolutionTransfer class and we have to prepare the solution vectors that should be transferred to the new grid (we will lose the old grid once we have done the refinement so the transfer has to happen concurrently with refinement). What we definitely need are the current and the old temperature (BDF-2 time stepping requires two old solutions). Since the SolutionTransfer objects only support to transfer one object per dof handler, we need to collect the two temperature solutions in one data structure. Moreover, we choose to transfer the Stokes solution, too, since we need the velocity at two previous time steps, of which only one is calculated on the fly.\\nConsequently, we initialize two SolutionTransfer objects for the Stokes and temperature DoFHandler objects, by attaching them to the old dof handlers. With this at place, we can prepare the triangulation and the data vectors for refinement (in this order).\\n\\u00a0     const std::vector<TrilinosWrappers::MPI::Vector> x_temperature = {\\n\\u00a0       temperature_solution, old_temperature_solution};\\n\\u00a0     TrilinosWrappers::MPI::BlockVector x_stokes = stokes_solution;\\n\\u00a0 \\n\\u00a0     SolutionTransfer<dim, TrilinosWrappers::MPI::Vector> temperature_trans(\\n\\u00a0       temperature_dof_handler);\\n\\u00a0     SolutionTransfer<dim, TrilinosWrappers::MPI::BlockVector> stokes_trans(\\n\\u00a0       stokes_dof_handler);\\n\\u00a0 \\n\\u00a0     triangulation.prepare_coarsening_and_refinement();\\n\\u00a0     temperature_trans.prepare_for_coarsening_and_refinement(x_temperature);\\n\\u00a0     stokes_trans.prepare_for_coarsening_and_refinement(x_stokes);\\n\\u00a0 \\nSolutionTransferDefinition solution_transfer.h:337\\nparallel::distributed::Triangulation::prepare_coarsening_and_refinementvirtual bool prepare_coarsening_and_refinement() overrideDefinition tria.cc:2805\\nNow everything is ready, so do the refinement and recreate the dof structure on the new grid, and initialize the matrix structures and the new vectors in the setup_dofs function. Next, we actually perform the interpolation of the solutions between the grids. We create another copy of temporary vectors for temperature (now corresponding to the new grid), and let the interpolate function do the job. Then, the resulting array of vectors is written into the respective vector member variables.\\nRemember that the set of constraints will be updated for the new triangulation in the setup_dofs() call.\\n\\u00a0     triangulation.execute_coarsening_and_refinement();\\n\\u00a0     setup_dofs();\\n\\u00a0 \\n\\u00a0     std::vector<TrilinosWrappers::MPI::Vector> tmp = {\\n\\u00a0       TrilinosWrappers::MPI::Vector(temperature_solution),\\n\\u00a0       TrilinosWrappers::MPI::Vector(temperature_solution)};\\n\\u00a0     temperature_trans.interpolate(x_temperature, tmp);\\n\\u00a0 \\n\\u00a0     temperature_solution     = tmp[0];\\n\\u00a0     old_temperature_solution = tmp[1];\\n\\u00a0 \\nparallel::distributed::Triangulation::execute_coarsening_and_refinementvirtual void execute_coarsening_and_refinement() overrideDefinition tria.cc:3320\\nAfter the solution has been transferred we then enforce the constraints on the transferred solution.\\n\\u00a0     temperature_constraints.distribute(temperature_solution);\\n\\u00a0     temperature_constraints.distribute(old_temperature_solution);\\n\\u00a0 \\nFor the Stokes vector, everything is just the same \\u2013 except that we do not need another temporary vector since we just interpolate a single vector. In the end, we have to tell the program that the matrices and preconditioners need to be regenerated, since the mesh has changed.\\n\\u00a0     stokes_trans.interpolate(x_stokes, stokes_solution);\\n\\u00a0 \\n\\u00a0     stokes_constraints.distribute(stokes_solution);\\n\\u00a0 \\n\\u00a0     rebuild_stokes_matrix         = true;\\n\\u00a0     rebuild_temperature_matrices  = true;\\n\\u00a0     rebuild_stokes_preconditioner = true;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n BoussinesqFlowProblem::run\\nThis function performs all the essential steps in the Boussinesq program. It starts by setting up a grid (depending on the spatial dimension, we choose some different level of initial refinement and additional adaptive refinement steps, and then create a cube in dim dimensions and set up the dofs for the first time. Since we want to start the time stepping already with an adaptively refined grid, we perform some pre-refinement steps, consisting of all assembly, solution and refinement, but without actually advancing in time. Rather, we use the vilified goto statement to jump out of the time loop right after mesh refinement to start all over again on the new mesh beginning at the start_time_iteration label. (The use of the goto is discussed in step-26.)\\nBefore we start, we project the initial values to the grid and obtain the first data for the old_temperature_solution vector. Then, we initialize time step number and time step and start the time loop.\\n\\u00a0   template <int dim>\\n\\u00a0   void BoussinesqFlowProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     const unsigned int initial_refinement     = (dim == 2 ? 4 : 2);\\n\\u00a0     const unsigned int n_pre_refinement_steps = (dim == 2 ? 4 : 3);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     GridGenerator::hyper_cube(triangulation);\\n\\u00a0     global_Omega_diameter = GridTools::diameter(triangulation);\\n\\u00a0 \\n\\u00a0     triangulation.refine_global(initial_refinement);\\n\\u00a0 \\n\\u00a0     setup_dofs();\\n\\u00a0 \\n\\u00a0     unsigned int pre_refinement_step = 0;\\n\\u00a0 \\n\\u00a0   start_time_iteration:\\n\\u00a0 \\n\\u00a0     VectorTools::project(temperature_dof_handler,\\n\\u00a0                          temperature_constraints,\\n\\u00a0                          QGauss<dim>(temperature_degree + 2),\\n\\u00a0                          EquationData::TemperatureInitialValues<dim>(),\\n\\u00a0                          old_temperature_solution);\\n\\u00a0 \\n\\u00a0     timestep_number = 0;\\n\\u00a0     time_step = old_time_step = 0;\\n\\u00a0 \\n\\u00a0     double time = 0;\\n\\u00a0 \\n\\u00a0     do\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Timestep \\\" << timestep_number << \\\":  t=\\\" << time\\n\\u00a0                   << std::endl;\\n\\u00a0 \\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\nGridTools::diameterdouble diameter(const Triangulation< dim, spacedim > &tria)Definition grid_tools_geometry.cc:43\\nVectorTools::projectvoid project(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const AffineConstraints< typename VectorType::value_type > &constraints, const Quadrature< dim > &quadrature, const Function< spacedim, typename VectorType::value_type > &function, VectorType &vec, const bool enforce_zero_boundary=false, const Quadrature< dim - 1 > &q_boundary=(dim > 1 ? QGauss< dim - 1 >(2) :Quadrature< dim - 1 >()), const bool project_to_boundary_first=false)\\nThe first steps in the time loop are all obvious \\u2013 we assemble the Stokes system, the preconditioner, the temperature matrix (matrices and preconditioner do actually only change in case we've remeshed before), and then do the solve. Before going on with the next time step, we have to check whether we should first finish the pre-refinement steps or if we should remesh (every fifth time step), refining up to a level that is consistent with initial refinement and pre-refinement steps. Last in the loop is to advance the solutions, i.e., to copy the solutions to the next \\\"older\\\" time level.\\n\\u00a0         assemble_stokes_system();\\n\\u00a0         build_stokes_preconditioner();\\n\\u00a0         assemble_temperature_matrix();\\n\\u00a0 \\n\\u00a0         solve();\\n\\u00a0 \\n\\u00a0         output_results();\\n\\u00a0 \\n\\u00a0         std::cout << std::endl;\\n\\u00a0 \\n\\u00a0         if ((timestep_number == 0) &&\\n\\u00a0             (pre_refinement_step < n_pre_refinement_steps))\\n\\u00a0           {\\n\\u00a0             refine_mesh(initial_refinement + n_pre_refinement_steps);\\n\\u00a0             ++pre_refinement_step;\\n\\u00a0             goto start_time_iteration;\\n\\u00a0           }\\n\\u00a0         else if ((timestep_number > 0) && (timestep_number % 5 == 0))\\n\\u00a0           refine_mesh(initial_refinement + n_pre_refinement_steps);\\n\\u00a0 \\n\\u00a0         time += time_step;\\n\\u00a0         ++timestep_number;\\n\\u00a0 \\n\\u00a0         old_stokes_solution          = stokes_solution;\\n\\u00a0         old_old_temperature_solution = old_temperature_solution;\\n\\u00a0         old_temperature_solution     = temperature_solution;\\n\\u00a0       }\\nDo all the above until we arrive at time 100.\\n\\u00a0     while (time <= 100);\\n\\u00a0   }\\n\\u00a0 } // namespace Step31\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n The main function\\nThe main function looks almost the same as in all other programs.\\nThere is one difference we have to be careful about. This program uses Trilinos and, typically, Trilinos is configured so that it can run in parallel using MPI. This doesn't mean that it has to run in parallel, and in fact this program (unlike step-32) makes no attempt at all to do anything in parallel using MPI. Nevertheless, Trilinos wants the MPI system to be initialized. We do that be creating an object of type Utilities::MPI::MPI_InitFinalize that initializes MPI (if available) using the arguments given to main() (i.e., argc and argv) and de-initializes it again when the object goes out of scope.\\n\\u00a0 int main(int argc, char *argv[])\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace dealii;\\n\\u00a0       using namespace Step31;\\n\\u00a0 \\n\\u00a0       Utilities::MPI::MPI_InitFinalize mpi_initialization(\\n\\u00a0         argc, argv, numbers::invalid_unsigned_int);\\n\\u00a0 \\nUtilities::MPI::MPI_InitFinalizeDefinition mpi.h:1081\\nnumbers::invalid_unsigned_intstatic const unsigned int invalid_unsigned_intDefinition types.h:220\\nThis program can only be run in serial. Otherwise, throw an exception.\\n\\u00a0       AssertThrow(Utilities::MPI::n_mpi_processes(MPI_COMM_WORLD) == 1,\\n\\u00a0                   ExcMessage(\\n\\u00a0                     \\\"This program can only be run in serial, use ./step-31\\\"));\\n\\u00a0 \\n\\u00a0       BoussinesqFlowProblem<2> flow_problem;\\n\\u00a0       flow_problem.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\nAssertThrow#define AssertThrow(cond, exc)Definition exceptions.h:1739\\nUtilities::MPI::n_mpi_processesunsigned int n_mpi_processes(const MPI_Comm mpi_communicator)Definition mpi.cc:92\\n Results\\nResults in 2d \\nWhen you run the program in 2d, the output will look something like this:  \\nNumber of active cells: 256 (on 5 levels)\\nNumber of degrees of freedom: 3556 (2178+289+1089)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.919118\\n   9 CG iterations for temperature.\\n   Temperature range: -0.16687 1.30011\\n\\nNumber of active cells: 280 (on 6 levels)\\nNumber of degrees of freedom: 4062 (2490+327+1245)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.459559\\n   9 CG iterations for temperature.\\n   Temperature range: -0.0982971 0.598503\\n\\nNumber of active cells: 520 (on 7 levels)\\nNumber of degrees of freedom: 7432 (4562+589+2281)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.229779\\n   9 CG iterations for temperature.\\n   Temperature range: -0.0551098 0.294493\\n\\nNumber of active cells: 1072 (on 8 levels)\\nNumber of degrees of freedom: 15294 (9398+1197+4699)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.11489\\n   9 CG iterations for temperature.\\n   Temperature range: -0.0273524 0.156861\\n\\nNumber of active cells: 2116 (on 9 levels)\\nNumber of degrees of freedom: 30114 (18518+2337+9259)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.0574449\\n   9 CG iterations for temperature.\\n   Temperature range: -0.014993 0.0738328\\n\\nTimestep 1:  t=0.0574449\\n   Assembling...\\n   Solving...\\n   56 GMRES iterations for Stokes subsystem.\\n   Time step: 0.0574449\\n   9 CG iterations for temperature.\\n   Temperature range: -0.0273934 0.14488\\n\\n...\\n \\nIn the beginning we refine the mesh several times adaptively and always return to time step zero to restart on the newly refined mesh. Only then do we start the actual time iteration.\\nThe program runs for a while. The temperature field for time steps 0, 500, 1000, 1500, 2000, 3000, 4000, and 5000 looks like this (note that the color scale used for the temperature is not always the same):\\n\\n\\n    \\n\\n    \\n\\nThe visualizations shown here were generated using a version of the example which did not enforce the constraints after transferring the mesh.\\nAs can be seen, we have three heat sources that heat fluid and therefore produce a buoyancy effect that lets hots pockets of fluid rise up and swirl around. By a chimney effect, the three streams are pressed together by fluid that comes from the outside and wants to join the updraft party. Note that because the fluid is initially at rest, those parts of the fluid that were initially over the sources receive a longer heating time than that fluid that is later dragged over the source by the fully developed flow field. It is therefore hotter, a fact that can be seen in the red tips of the three plumes. Note also the relatively fine features of the flow field, a result of the sophisticated transport stabilization of the temperature equation we have chosen.\\nIn addition to the pictures above, the following ones show the adaptive mesh and the flow field at the same time steps:\\n\\n\\n    \\n\\n    \\n\\nResults in 3d \\nThe same thing can of course be done in 3d by changing the template parameter to the BoussinesqFlowProblem object in main() from 2 to 3, so that the output now looks like follows:\\n \\nNumber of active cells: 64 (on 3 levels)\\nNumber of degrees of freedom: 3041 (2187+125+729)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 2.45098\\n   9 CG iterations for temperature.\\n   Temperature range: -0.675683 4.94725\\n\\nNumber of active cells: 288 (on 4 levels)\\nNumber of degrees of freedom: 12379 (8943+455+2981)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 1.22549\\n   9 CG iterations for temperature.\\n   Temperature range: -0.527701 2.25764\\n\\nNumber of active cells: 1296 (on 5 levels)\\nNumber of degrees of freedom: 51497 (37305+1757+12435)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.612745\\n   10 CG iterations for temperature.\\n   Temperature range: -0.496942 0.847395\\n\\nNumber of active cells: 5048 (on 6 levels)\\nNumber of degrees of freedom: 192425 (139569+6333+46523)\\n\\nTimestep 0:  t=0\\n   Assembling...\\n   Rebuilding Stokes preconditioner...\\n   Solving...\\n   0 GMRES iterations for Stokes subsystem.\\n   Time step: 0.306373\\n   10 CG iterations for temperature.\\n   Temperature range: -0.267683 0.497739\\n\\nTimestep 1:  t=0.306373\\n   Assembling...\\n   Solving...\\n   27 GMRES iterations for Stokes subsystem.\\n   Time step: 0.306373\\n   10 CG iterations for temperature.\\n   Temperature range: -0.461787 0.958679\\n\\n...\\n \\nVisualizing the temperature isocontours at time steps 0, 50, 100, 150, 200, 300, 400, 500, 600, 700, and 800 yields the following plots:\\n\\n\\n    \\n\\n    \\n\\n   \\n\\nThat the first picture looks like three hedgehogs stems from the fact that our scheme essentially projects the source times the first time step size onto the mesh to obtain the temperature field in the first time step. Since the source function is discontinuous, we need to expect over- and undershoots from this project. This is in fact what happens (it's easier to check this in 2d) and leads to the crumpled appearance of the isosurfaces. The visualizations shown here were generated using a version of the example which did not enforce the constraints after transferring the mesh.\\nNumerical experiments to determine optimal parameters \\nThe program as is has three parameters that we don't have much of a theoretical handle on how to choose in an optimal way. These are: \\n\\nThe time step must satisfy a CFL condition \\\\(k\\\\le \\\\min_K \\\\frac{c_kh_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\). Here, \\\\(c_k\\\\) is dimensionless, but what is the right value? \\n\\nIn the computation of the artificial viscosity,           \\n\\\\begin{eqnarray*}\\n  \\\\nu_\\\\alpha(T)|_K\\n  =\\n  \\\\beta\\n  \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}\\n  \\\\min\\\\left\\\\{\\n    h_K,\\n    h_K^\\\\alpha\\n    \\\\frac{\\\\|R_\\\\alpha(T)\\\\|_{L^\\\\infty(K)}}{c(\\\\mathbf{u},T)}\\n  \\\\right\\\\},\\n\\\\end{eqnarray*}\\n\\n with   \\\\(c(\\\\mathbf{u},T) =\\n      c_R\\\\ \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(\\\\Omega)} \\\\ \\\\mathrm{var}(T)\\n      \\\\ |\\\\mathrm{diam}(\\\\Omega)|^{\\\\alpha-2}\\\\). Here, the choice of the dimensionless numbers \\\\(\\\\beta,c_R\\\\) is of interest. \\n\\nIn all of these cases, we will have to expect that the correct choice of each value depends on that of the others, and most likely also on the space dimension and polynomial degree of the finite element used for the temperature. Below we'll discuss a few numerical experiments to choose constants \\\\(c_k\\\\) and \\\\(\\\\beta\\\\).\\nBelow, we will not discuss the choice of \\\\(c_R\\\\). In the program, we set it to \\\\(c_R=2^{\\\\frac{4-2\\\\alpha}{d}}\\\\). The reason for this value is a bit complicated and has more to do with the history of the program than reasoning: while the correct formula for the global scaling parameter \\\\(c(\\\\mathbf{u},T)\\\\) is shown above, the program (including the version shipped with deal.II 6.2) initially had a bug in that we computed   \\\\(c(\\\\mathbf{u},T) =\\n      \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(\\\\Omega)} \\\\ \\\\mathrm{var}(T)\\n      \\\\ \\\\frac{1}{|\\\\mathrm{diam}(\\\\Omega)|^{\\\\alpha-2}}\\\\) instead, where we had set the scaling parameter to one. Since we only computed on the unit square/cube where \\\\(\\\\mathrm{diam}(\\\\Omega)=2^{1/d}\\\\), this was entirely equivalent to using the correct formula with \\\\(c_R=\\\\left(2^{1/d}\\\\right)^{4-2\\\\alpha}=2^{\\\\frac{4-2\\\\alpha}{d}}\\\\). Since this value for \\\\(c_R\\\\) appears to work just fine for the current program, we corrected the formula in the program and set \\\\(c_R\\\\) to a value that reproduces exactly the results we had before. We will, however, revisit this issue again in step-32.\\nNow, however, back to the discussion of what values of \\\\(c_k\\\\) and \\\\(\\\\beta\\\\) to choose:\\nChoosing ck and beta \\nThese two constants are definitely linked in some way. The reason is easy to see: In the case of a pure advection problem, \\\\(\\\\frac{\\\\partial T}{\\\\partial t} + \\\\mathbf{u}\\\\cdot\\\\nabla T = \\\\gamma\\\\), any explicit scheme has to satisfy a CFL condition of the form \\\\(k\\\\le \\\\min_K \\\\frac{c_k^a h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\). On the other hand, for a pure diffusion problem, \\\\(\\\\frac{\\\\partial T}{\\\\partial t} + \\\\nu \\\\Delta T = \\\\gamma\\\\), explicit schemes need to satisfy a condition \\\\(k\\\\le \\\\min_K \\\\frac{c_k^d h_K^2}{\\\\nu}\\\\). So given the form of \\\\(\\\\nu\\\\) above, an advection diffusion problem like the one we have to solve here will result in a condition of the form          \\\\(\\nk\\\\le \\\\min_K \\\\min \\\\left\\\\{\\n  \\\\frac{c_k^a h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}},\\n  \\\\frac{c_k^d h_K^2}{\\\\beta \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)} h_K}\\\\right\\\\}\\n  =\\n  \\\\min_K \\\\left( \\\\min \\\\left\\\\{\\n  c_k^a,\\n  \\\\frac{c_k^d}{\\\\beta}\\\\right\\\\}\\n  \\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}} \\\\right)\\n\\\\). It follows that we have to face the fact that we might want to choose \\\\(\\\\beta\\\\) larger to improve the stability of the numerical scheme (by increasing the amount of artificial diffusion), but we have to pay a price in the form of smaller, and consequently more time steps. In practice, one would therefore like to choose \\\\(\\\\beta\\\\) as small as possible to keep the transport problem sufficiently stabilized while at the same time trying to choose the time step as large as possible to reduce the overall amount of work.\\nThe find the right balance, the only way is to do a few computational experiments. Here's what we did: We modified the program slightly to allow less mesh refinement (so we don't always have to wait that long) and to choose      \\\\(\\n  \\\\nu(T)|_K\\n  =\\n  \\\\beta\\n  \\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)} h_K\\n\\\\) to eliminate the effect of the constant \\\\(c_R\\\\) (we know that solutions are stable by using this version of \\\\(\\\\nu(T)\\\\) as an artificial viscosity, but that we can improve things \\u2013 i.e. make the solution sharper \\u2013 by using the more complicated formula for this artificial viscosity). We then run the program for different values \\\\(c_k,\\\\beta\\\\) and observe maximal and minimal temperatures in the domain. What we expect to see is this: If we choose the time step too big (i.e. choose a \\\\(c_k\\\\) bigger than theoretically allowed) then we will get exponential growth of the temperature. If we choose \\\\(\\\\beta\\\\) too small, then the transport stabilization becomes insufficient and the solution will show significant oscillations but not exponential growth.\\nResults for Q1 elements\\nHere is what we get for \\\\(\\\\beta=0.01, \\\\beta=0.1\\\\), and \\\\(\\\\beta=0.5\\\\), different choices of \\\\(c_k\\\\), and bilinear elements (temperature_degree=1) in 2d:\\n\\n\\n  \\n\\n  \\n\\nThe way to interpret these graphs goes like this: for \\\\(\\\\beta=0.01\\\\) and \\\\(c_k=\\\\frac 12,\\\\frac 14\\\\), we see exponential growth or at least large variations, but if we choose \\\\(k=\\\\frac 18\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) or smaller, then the scheme is stable though a bit wobbly. For more artificial diffusion, we can choose \\\\(k=\\\\frac 14\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) or smaller for \\\\(\\\\beta=0.03\\\\), \\\\(k=\\\\frac 13\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) or smaller for \\\\(\\\\beta=0.1\\\\), and again need \\\\(k=\\\\frac 1{15}\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) for \\\\(\\\\beta=0.5\\\\) (this time because much diffusion requires a small time step).\\nSo how to choose? If we were simply interested in a large time step, then we would go with \\\\(\\\\beta=0.1\\\\) and \\\\(k=\\\\frac 13\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\). On the other hand, we're also interested in accuracy and here it may be of interest to actually investigate what these curves show. To this end note that we start with a zero temperature and that our sources are positive \\u2014 so we would intuitively expect that the temperature can never drop below zero. But it does, a consequence of Gibb's phenomenon when using continuous elements to approximate a discontinuous solution. We can therefore see that choosing \\\\(\\\\beta\\\\) too small is bad: too little artificial diffusion leads to over- and undershoots that aren't diffused away. On the other hand, for large \\\\(\\\\beta\\\\), the minimum temperature drops below zero at the beginning but then quickly diffuses back to zero.\\nOn the other hand, let's also look at the maximum temperature. Watching the movie of the solution, we see that initially the fluid is at rest. The source keeps heating the same volume of fluid whose temperature increases linearly at the beginning until its buoyancy is able to move it upwards. The hottest part of the fluid is therefore transported away from the solution and fluid taking its place is heated for only a short time before being moved out of the source region, therefore remaining cooler than the initial bubble. If \\\\(\\\\kappa=0\\\\) (in the program it is nonzero but very small) then the hottest part of the fluid should be advected along with the flow with its temperature constant. That's what we can see in the graphs with the smallest \\\\(\\\\beta\\\\): Once the maximum temperature is reached, it hardly changes any more. On the other hand, the larger the artificial diffusion, the more the hot spot is diffused. Note that for this criterion, the time step size does not play a significant role.\\nSo to sum up, likely the best choice would appear to be \\\\(\\\\beta=0.03\\\\) and \\\\(k=\\\\frac 14\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\). The curve is a bit wobbly, but overall pictures looks pretty reasonable with the exception of some over and undershoots close to the start time due to Gibb's phenomenon.\\nResults for Q2 elements\\nOne can repeat the same sequence of experiments for higher order elements as well. Here are the graphs for bi-quadratic shape functions (temperature_degree=2) for the temperature, while we retain the \\\\(Q_2/Q_1\\\\) stable Taylor-Hood element for the Stokes system:\\n\\n\\n  \\n\\n \\n\\nAgain, small values of \\\\(\\\\beta\\\\) lead to less diffusion but we have to choose the time step very small to keep things under control. Too large values of \\\\(\\\\beta\\\\) make for more diffusion, but again require small time steps. The best value would appear to be \\\\(\\\\beta=0.03\\\\), as for the \\\\(Q_1\\\\) element, and then we have to choose \\\\(k=\\\\frac 18\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) \\u2014 exactly half the size for the \\\\(Q_1\\\\) element, a fact that may not be surprising if we state the CFL condition as the requirement that the time step be small enough so that the distance transport advects in each time step is no longer than one grid point away (which for \\\\(Q_1\\\\) elements is \\\\(h_K\\\\), but for \\\\(Q_2\\\\) elements is \\\\(h_K/2\\\\)). It turns out that \\\\(\\\\beta\\\\) needs to be slightly larger for obtaining stable results also late in the simulation at times larger than 60, so we actually choose it as \\\\(\\\\beta = 0.034\\\\) in the code.\\nResults for 3d\\nOne can repeat these experiments in 3d and find the optimal time step for each value of \\\\(\\\\beta\\\\) and find the best value of \\\\(\\\\beta\\\\). What one finds is that for the same \\\\(\\\\beta\\\\) already used in 2d, the time steps needs to be a bit smaller, by around a factor of 1.2 or so. This is easily explained: the time step restriction is \\\\(k=\\\\min_K \\\\frac{ch_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) where \\\\(h_K\\\\) is the diameter of the cell. However, what is really needed is the distance between mesh points, which is \\\\(\\\\frac{h_K}{\\\\sqrt{d}}\\\\). So a more appropriate form would be \\\\(k=\\\\min_K \\\\frac{ch_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}\\\\sqrt{d}}\\\\).\\nThe second find is that one needs to choose \\\\(\\\\beta\\\\) slightly bigger (about \\\\(\\\\beta=0.05\\\\) or so). This then again reduces the time step we can take.\\nConclusions\\nConcluding, from the simple computations above, \\\\(\\\\beta=0.034\\\\) appears to be a good choice for the stabilization parameter in 2d, and \\\\(\\\\beta=0.05\\\\) in 3d. In a dimension independent way, we can model this as \\\\(\\\\beta=0.017d\\\\). If one does longer computations (several thousand time steps) on finer meshes, one realizes that the time step size is not quite small enough and that for stability one will have to reduce the above values a bit more (by about a factor of \\\\(\\\\frac 78\\\\)).\\nAs a consequence, a formula that reconciles 2d, 3d, and variable polynomial degree and takes all factors in account reads as follows:           \\n\\\\begin{eqnarray*}\\n  k =\\n  \\\\frac 1{2 \\\\cdot 1.7} \\\\frac 1{\\\\sqrt{d}}\\n  \\\\frac 2d\\n  \\\\frac 1{q_T}\\n  \\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\n  =\\n  \\\\frac 1{1.7 d\\\\sqrt{d}}\\n  \\\\frac 1{q_T}\\n  \\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}.\\n\\\\end{eqnarray*}\\n\\n In the first form (in the center of the equation),  \\\\(\\\\frac\\n1{2 \\\\cdot 1.7}\\\\) is a universal constant, \\\\(\\\\frac 1{\\\\sqrt{d}}\\\\) is the factor that accounts for the difference between cell diameter and grid point separation, \\\\(\\\\frac 2d\\\\) accounts for the increase in \\\\(\\\\beta\\\\) with space dimension, \\\\(\\\\frac 1{q_T}\\\\) accounts for the distance between grid points for higher order elements, and \\\\(\\\\frac{h_K}{\\\\|\\\\mathbf{u}\\\\|_{L^\\\\infty(K)}}\\\\) for the local speed of transport relative to the cell size. This is the formula that we use in the program.\\nAs for the question of whether to use \\\\(Q_1\\\\) or \\\\(Q_2\\\\) elements for the temperature, the following considerations may be useful: First, solving the temperature equation is hardly a factor in the overall scheme since almost the entire compute time goes into solving the Stokes system in each time step. Higher order elements for the temperature equation are therefore not a significant drawback. On the other hand, if one compares the size of the over- and undershoots the solution produces due to the discontinuous source description, one notices that for the choice of \\\\(\\\\beta\\\\) and \\\\(k\\\\) as above, the \\\\(Q_1\\\\) solution dips down to around \\\\(-0.47\\\\), whereas the \\\\(Q_2\\\\) solution only goes to \\\\(-0.13\\\\) (remember that the exact solution should never become negative at all. This means that the \\\\(Q_2\\\\) solution is significantly more accurate; the program therefore uses these higher order elements, despite the penalty we pay in terms of smaller time steps.\\nPossibilities for extensions \\nThere are various ways to extend the current program. Of particular interest is, of course, to make it faster and/or increase the resolution of the program, in particular in 3d. This is the topic of the step-32 tutorial program which will implement strategies to solve this problem in parallel on a cluster. It is also the basis of the much larger open source code ASPECT (see https://aspect.geodynamics.org/ ) that can solve realistic problems and that constitutes the further development of step-32.\\nAnother direction would be to make the fluid flow more realistic. The program was initially written to simulate various cases simulating the convection of material in the earth's mantle, i.e. the zone between the outer earth core and the solid earth crust: there, material is heated from below and cooled from above, leading to thermal convection. The physics of this fluid are much more complicated than shown in this program, however: The viscosity of mantle material is strongly dependent on the temperature, i.e. \\\\(\\\\eta=\\\\eta(T)\\\\), with the dependency frequently modeled as a viscosity that is reduced exponentially with rising temperature. Secondly, much of the dynamics of the mantle is determined by chemical reactions, primarily phase changes of the various crystals that make up the mantle; the buoyancy term on the right hand side of the Stokes equations then depends not only on the temperature, but also on the chemical composition at a given location which is advected by the flow field but also changes as a function of pressure and temperature. We will investigate some of these effects in later tutorial programs as well.\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2007 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Authors: Martin Kronbichler, Uppsala University,\\n *          Wolfgang Bangerth, Texas A&M University 2007, 2008\\n */\\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/utilities.h>\\n \\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/solver_gmres.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/block_sparsity_pattern.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n#include <deal.II/grid/grid_tools.h>\\n#include <deal.II/grid/grid_refinement.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_renumbering.h>\\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/fe/fe_q.h>\\n#include <deal.II/fe/fe_system.h>\\n#include <deal.II/fe/fe_values.h>\\n \\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n#include <deal.II/numerics/error_estimator.h>\\n#include <deal.II/numerics/solution_transfer.h>\\n \\n#include <deal.II/base/index_set.h>\\n#include <deal.II/lac/trilinos_sparse_matrix.h>\\n#include <deal.II/lac/trilinos_block_sparse_matrix.h>\\n#include <deal.II/lac/trilinos_vector.h>\\n#include <deal.II/lac/trilinos_parallel_block_vector.h>\\n#include <deal.II/lac/trilinos_precondition.h>\\n \\n#include <iostream>\\n#include <fstream>\\n#include <memory>\\n#include <limits>\\n \\n \\nnamespace Step31\\n{\\n using namespace dealii;\\n \\n \\n \\n \\n namespace EquationData\\n  {\\n constexpr double eta     = 1;\\n constexpr double kappa   = 1e-6;\\n constexpr double beta    = 10;\\n constexpr double density = 1;\\n \\n \\n template <int dim>\\n class TemperatureInitialValues : public Function<dim>\\n    {\\n public:\\n      TemperatureInitialValues()\\n        : Function<dim>(1)\\n      {}\\n \\n virtual double value(const Point<dim> & /*p*/,\\n const unsigned int /*component*/ = 0) const override\\n {\\n return 0;\\n      }\\n \\n virtual void vector_value(const Point<dim> &p,\\n Vector<double>   &value) const override\\n {\\n for (unsigned int c = 0; c < this->n_components; ++c)\\n value(c) = TemperatureInitialValues<dim>::value(p, c);\\n      }\\n    };\\n \\n \\n \\n template <int dim>\\n class TemperatureRightHandSide : public Function<dim>\\n    {\\n public:\\n      TemperatureRightHandSide()\\n        : Function<dim>(1)\\n      {}\\n \\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override\\n {\\n        (void)component;\\n Assert(component == 0,\\n               ExcMessage(\\\"Invalid operation for a scalar function.\\\"));\\n \\n Assert((dim == 2) || (dim == 3), ExcNotImplemented());\\n \\n static const Point<dim> source_centers[3] = {\\n          (dim == 2 ? Point<dim>(.3, .1) : Point<dim>(.3, .5, .1)),\\n          (dim == 2 ? Point<dim>(.45, .1) : Point<dim>(.45, .5, .1)),\\n          (dim == 2 ? Point<dim>(.75, .1) : Point<dim>(.75, .5, .1))};\\n static const double source_radius = (dim == 2 ? 1. / 32 : 1. / 8);\\n \\n return ((source_centers[0].distance(p) < source_radius) ||\\n                    (source_centers[1].distance(p) < source_radius) ||\\n                    (source_centers[2].distance(p) < source_radius) ?\\n                  1 :\\n                  0);\\n      }\\n \\n virtual void vector_value(const Point<dim> &p,\\n Vector<double>   &value) const override\\n {\\n for (unsigned int c = 0; c < this->n_components; ++c)\\n value(c) = TemperatureRightHandSide<dim>::value(p, c);\\n      }\\n    };\\n  } // namespace EquationData\\n \\n \\n \\n \\n namespace LinearSolvers\\n  {\\n \\n template <class MatrixType, class PreconditionerType>\\n class InverseMatrix : public Subscriptor\\n    {\\n public:\\n      InverseMatrix(const MatrixType         &m,\\n const PreconditionerType &preconditioner);\\n \\n \\n template <typename VectorType>\\n void vmult(VectorType &dst, const VectorType &src) const;\\n \\n private:\\n const SmartPointer<const MatrixType> matrix;\\n const PreconditionerType            &preconditioner;\\n    };\\n \\n \\n template <class MatrixType, class PreconditionerType>\\n    InverseMatrix<MatrixType, PreconditionerType>::InverseMatrix(\\n const MatrixType         &m,\\n const PreconditionerType &preconditioner)\\n      : matrix(&m)\\n      , preconditioner(preconditioner)\\n    {}\\n \\n \\n \\n template <class MatrixType, class PreconditionerType>\\n template <typename VectorType>\\n void InverseMatrix<MatrixType, PreconditionerType>::vmult(\\n      VectorType       &dst,\\n const VectorType &src) const\\n {\\n SolverControl        solver_control(src.size(), 1e-7 * src.l2_norm());\\n SolverCG<VectorType> cg(solver_control);\\n \\n      dst = 0;\\n \\n try\\n        {\\n          cg.solve(*matrix, dst, src, preconditioner);\\n        }\\n catch (std::exception &e)\\n        {\\n Assert(false, ExcMessage(e.what()));\\n        }\\n    }\\n \\n \\n template <class PreconditionerTypeA, class PreconditionerTypeMp>\\n class BlockSchurPreconditioner : public Subscriptor\\n    {\\n public:\\n      BlockSchurPreconditioner(\\n const TrilinosWrappers::BlockSparseMatrix &S,\\n const InverseMatrix<TrilinosWrappers::SparseMatrix,\\n                            PreconditionerTypeMp> &Mpinv,\\n const PreconditionerTypeA                 &Apreconditioner);\\n \\n void vmult(TrilinosWrappers::MPI::BlockVector       &dst,\\n const TrilinosWrappers::MPI::BlockVector &src) const;\\n \\n private:\\n const SmartPointer<const TrilinosWrappers::BlockSparseMatrix>\\n        stokes_matrix;\\n const SmartPointer<const InverseMatrix<TrilinosWrappers::SparseMatrix,\\n                                             PreconditionerTypeMp>>\\n                                 m_inverse;\\n const PreconditionerTypeA &a_preconditioner;\\n \\n mutable TrilinosWrappers::MPI::Vector tmp;\\n    };\\n \\n \\n \\n template <class PreconditionerTypeA, class PreconditionerTypeMp>\\n    BlockSchurPreconditioner<PreconditionerTypeA, PreconditionerTypeMp>::\\n      BlockSchurPreconditioner(\\n const TrilinosWrappers::BlockSparseMatrix &S,\\n const InverseMatrix<TrilinosWrappers::SparseMatrix,\\n                            PreconditionerTypeMp> &Mpinv,\\n const PreconditionerTypeA                 &Apreconditioner)\\n      : stokes_matrix(&S)\\n      , m_inverse(&Mpinv)\\n      , a_preconditioner(Apreconditioner)\\n      , tmp(complete_index_set(stokes_matrix->block(1, 1).m()))\\n    {}\\n \\n \\n template <class PreconditionerTypeA, class PreconditionerTypeMp>\\n void\\n    BlockSchurPreconditioner<PreconditionerTypeA, PreconditionerTypeMp>::vmult(\\n TrilinosWrappers::MPI::BlockVector       &dst,\\n const TrilinosWrappers::MPI::BlockVector &src) const\\n {\\n      a_preconditioner.vmult(dst.block(0), src.block(0));\\n      stokes_matrix->block(1, 0).residual(tmp, dst.block(0), src.block(1));\\n      tmp *= -1;\\n      m_inverse->vmult(dst.block(1), tmp);\\n    }\\n  } // namespace LinearSolvers\\n \\n \\n \\n \\n template <int dim>\\n class BoussinesqFlowProblem\\n  {\\n public:\\n    BoussinesqFlowProblem();\\n void run();\\n \\n private:\\n void   setup_dofs();\\n void   assemble_stokes_preconditioner();\\n void   build_stokes_preconditioner();\\n void   assemble_stokes_system();\\n void   assemble_temperature_system(const double maximal_velocity);\\n void   assemble_temperature_matrix();\\n double get_maximal_velocity() const;\\n    std::pair<double, double> get_extrapolated_temperature_range() const;\\n void                      solve();\\n void                      output_results() const;\\n void                      refine_mesh(const unsigned int max_grid_level);\\n \\n double compute_viscosity(\\n const std::vector<double>         &old_temperature,\\n const std::vector<double>         &old_old_temperature,\\n const std::vector<Tensor<1, dim>> &old_temperature_grads,\\n const std::vector<Tensor<1, dim>> &old_old_temperature_grads,\\n const std::vector<double>         &old_temperature_laplacians,\\n const std::vector<double>         &old_old_temperature_laplacians,\\n const std::vector<Tensor<1, dim>> &old_velocity_values,\\n const std::vector<Tensor<1, dim>> &old_old_velocity_values,\\n const std::vector<double>         &gamma_values,\\n const double                       global_u_infty,\\n const double                       global_T_variation,\\n const double                       cell_diameter) const;\\n \\n \\n Triangulation<dim> triangulation;\\n double             global_Omega_diameter;\\n \\n const unsigned int        stokes_degree;\\n const FESystem<dim>       stokes_fe;\\n DoFHandler<dim>           stokes_dof_handler;\\n AffineConstraints<double> stokes_constraints;\\n \\n    std::vector<IndexSet>               stokes_partitioning;\\n TrilinosWrappers::BlockSparseMatrix stokes_matrix;\\n TrilinosWrappers::BlockSparseMatrix stokes_preconditioner_matrix;\\n \\n TrilinosWrappers::MPI::BlockVector stokes_solution;\\n TrilinosWrappers::MPI::BlockVector old_stokes_solution;\\n TrilinosWrappers::MPI::BlockVector stokes_rhs;\\n \\n \\n const unsigned int        temperature_degree;\\n const FE_Q<dim>           temperature_fe;\\n DoFHandler<dim>           temperature_dof_handler;\\n AffineConstraints<double> temperature_constraints;\\n \\n TrilinosWrappers::SparseMatrix temperature_mass_matrix;\\n TrilinosWrappers::SparseMatrix temperature_stiffness_matrix;\\n TrilinosWrappers::SparseMatrix temperature_matrix;\\n \\n TrilinosWrappers::MPI::Vector temperature_solution;\\n TrilinosWrappers::MPI::Vector old_temperature_solution;\\n TrilinosWrappers::MPI::Vector old_old_temperature_solution;\\n TrilinosWrappers::MPI::Vector temperature_rhs;\\n \\n \\n double       time_step;\\n double       old_time_step;\\n unsigned int timestep_number;\\n \\n    std::shared_ptr<TrilinosWrappers::PreconditionAMG> Amg_preconditioner;\\n    std::shared_ptr<TrilinosWrappers::PreconditionIC>  Mp_preconditioner;\\n \\n bool rebuild_stokes_matrix;\\n bool rebuild_temperature_matrices;\\n bool rebuild_stokes_preconditioner;\\n  };\\n \\n \\n \\n template <int dim>\\n  BoussinesqFlowProblem<dim>::BoussinesqFlowProblem()\\n    : triangulation(Triangulation<dim>::maximum_smoothing)\\n    , global_Omega_diameter(std::numeric_limits<double>::quiet_NaN())\\n    , stokes_degree(1)\\n    , stokes_fe(FE_Q<dim>(stokes_degree + 1) ^ dim, FE_Q<dim>(stokes_degree))\\n    , stokes_dof_handler(triangulation)\\n    ,\\n \\n    temperature_degree(2)\\n    , temperature_fe(temperature_degree)\\n    , temperature_dof_handler(triangulation)\\n    ,\\n \\n    time_step(0)\\n    , old_time_step(0)\\n    , timestep_number(0)\\n    , rebuild_stokes_matrix(true)\\n    , rebuild_temperature_matrices(true)\\n    , rebuild_stokes_preconditioner(true)\\n  {}\\n \\n \\n \\n \\n template <int dim>\\n double BoussinesqFlowProblem<dim>::get_maximal_velocity() const\\n {\\n const QIterated<dim> quadrature_formula(QTrapezoid<1>(), stokes_degree + 1);\\n const unsigned int   n_q_points = quadrature_formula.size();\\n \\n FEValues<dim> fe_values(stokes_fe, quadrature_formula, update_values);\\n    std::vector<Tensor<1, dim>> velocity_values(n_q_points);\\n double                      max_velocity = 0;\\n \\n const FEValuesExtractors::Vector velocities(0);\\n \\n for (const auto &cell : stokes_dof_handler.active_cell_iterators())\\n      {\\n        fe_values.reinit(cell);\\n        fe_values[velocities].get_function_values(stokes_solution,\\n                                                  velocity_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n          max_velocity = std::max(max_velocity, velocity_values[q].norm());\\n      }\\n \\n return max_velocity;\\n  }\\n \\n \\n \\n \\n template <int dim>\\n  std::pair<double, double>\\n  BoussinesqFlowProblem<dim>::get_extrapolated_temperature_range() const\\n {\\n const QIterated<dim> quadrature_formula(QTrapezoid<1>(),\\n                                            temperature_degree);\\n const unsigned int   n_q_points = quadrature_formula.size();\\n \\n FEValues<dim> fe_values(temperature_fe, quadrature_formula, update_values);\\n    std::vector<double> old_temperature_values(n_q_points);\\n    std::vector<double> old_old_temperature_values(n_q_points);\\n \\n if (timestep_number != 0)\\n      {\\n double min_temperature = std::numeric_limits<double>::max(),\\n               max_temperature = -std::numeric_limits<double>::max();\\n \\n for (const auto &cell : temperature_dof_handler.active_cell_iterators())\\n          {\\n            fe_values.reinit(cell);\\n            fe_values.get_function_values(old_temperature_solution,\\n                                          old_temperature_values);\\n            fe_values.get_function_values(old_old_temperature_solution,\\n                                          old_old_temperature_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n              {\\n const double temperature =\\n                  (1. + time_step / old_time_step) * old_temperature_values[q] -\\n                  time_step / old_time_step * old_old_temperature_values[q];\\n \\n                min_temperature = std::min(min_temperature, temperature);\\n                max_temperature = std::max(max_temperature, temperature);\\n              }\\n          }\\n \\n return std::make_pair(min_temperature, max_temperature);\\n      }\\n else\\n      {\\n double min_temperature = std::numeric_limits<double>::max(),\\n               max_temperature = -std::numeric_limits<double>::max();\\n \\n for (const auto &cell : temperature_dof_handler.active_cell_iterators())\\n          {\\n            fe_values.reinit(cell);\\n            fe_values.get_function_values(old_temperature_solution,\\n                                          old_temperature_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n              {\\n const double temperature = old_temperature_values[q];\\n \\n                min_temperature = std::min(min_temperature, temperature);\\n                max_temperature = std::max(max_temperature, temperature);\\n              }\\n          }\\n \\n return std::make_pair(min_temperature, max_temperature);\\n      }\\n  }\\n \\n \\n \\n \\n template <int dim>\\n double BoussinesqFlowProblem<dim>::compute_viscosity(\\n const std::vector<double>         &old_temperature,\\n const std::vector<double>         &old_old_temperature,\\n const std::vector<Tensor<1, dim>> &old_temperature_grads,\\n const std::vector<Tensor<1, dim>> &old_old_temperature_grads,\\n const std::vector<double>         &old_temperature_laplacians,\\n const std::vector<double>         &old_old_temperature_laplacians,\\n const std::vector<Tensor<1, dim>> &old_velocity_values,\\n const std::vector<Tensor<1, dim>> &old_old_velocity_values,\\n const std::vector<double>         &gamma_values,\\n const double                       global_u_infty,\\n const double                       global_T_variation,\\n const double                       cell_diameter) const\\n {\\n constexpr double beta  = 0.017 * dim;\\n constexpr double alpha = 1.0;\\n \\n if (global_u_infty == 0)\\n return 5e-3 * cell_diameter;\\n \\n const unsigned int n_q_points = old_temperature.size();\\n \\n double max_residual = 0;\\n double max_velocity = 0;\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n      {\\n const Tensor<1, dim> u =\\n          (old_velocity_values[q] + old_old_velocity_values[q]) / 2;\\n \\n const double dT_dt =\\n          (old_temperature[q] - old_old_temperature[q]) / old_time_step;\\n const double u_grad_T =\\n          u * (old_temperature_grads[q] + old_old_temperature_grads[q]) / 2;\\n \\n const double kappa_Delta_T =\\n          EquationData::kappa *\\n          (old_temperature_laplacians[q] + old_old_temperature_laplacians[q]) /\\n          2;\\n \\n const double residual =\\n std::abs((dT_dt + u_grad_T - kappa_Delta_T - gamma_values[q]) *\\n std::pow((old_temperature[q] + old_old_temperature[q]) / 2,\\n                            alpha - 1.));\\n \\n        max_residual = std::max(residual, max_residual);\\n        max_velocity = std::max(std::sqrt(u * u), max_velocity);\\n      }\\n \\n const double c_R            = std::pow(2., (4. - 2 * alpha) / dim);\\n const double global_scaling = c_R * global_u_infty * global_T_variation *\\n std::pow(global_Omega_diameter, alpha - 2.);\\n \\n return (\\n      beta * max_velocity *\\n std::min(cell_diameter,\\n std::pow(cell_diameter, alpha) * max_residual / global_scaling));\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::setup_dofs()\\n  {\\n    std::vector<unsigned int> stokes_sub_blocks(dim + 1, 0);\\n    stokes_sub_blocks[dim] = 1;\\n \\n    {\\n      stokes_dof_handler.distribute_dofs(stokes_fe);\\n DoFRenumbering::component_wise(stokes_dof_handler, stokes_sub_blocks);\\n \\n      stokes_constraints.clear();\\n DoFTools::make_hanging_node_constraints(stokes_dof_handler,\\n                                              stokes_constraints);\\n const std::set<types::boundary_id> no_normal_flux_boundaries = {0};\\n VectorTools::compute_no_normal_flux_constraints(stokes_dof_handler,\\n                                                      0,\\n                                                      no_normal_flux_boundaries,\\n                                                      stokes_constraints);\\n      stokes_constraints.close();\\n    }\\n    {\\n      temperature_dof_handler.distribute_dofs(temperature_fe);\\n \\n      temperature_constraints.clear();\\n DoFTools::make_hanging_node_constraints(temperature_dof_handler,\\n                                              temperature_constraints);\\n      temperature_constraints.close();\\n    }\\n \\n const std::vector<types::global_dof_index> stokes_dofs_per_block =\\n DoFTools::count_dofs_per_fe_block(stokes_dof_handler, stokes_sub_blocks);\\n \\n const types::global_dof_index n_u = stokes_dofs_per_block[0],\\n                                  n_p = stokes_dofs_per_block[1],\\n                                  n_T = temperature_dof_handler.n_dofs();\\n \\n    std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n              << \\\" (on \\\" << triangulation.n_levels() << \\\" levels)\\\" << std::endl\\n              << \\\"Number of degrees of freedom: \\\" << n_u + n_p + n_T << \\\" (\\\"\\n              << n_u << '+' << n_p << '+' << n_T << ')' << std::endl\\n              << std::endl;\\n \\n    stokes_partitioning.resize(2);\\n    stokes_partitioning[0] = complete_index_set(n_u);\\n    stokes_partitioning[1] = complete_index_set(n_p);\\n    {\\n      stokes_matrix.clear();\\n \\n BlockDynamicSparsityPattern dsp(stokes_dofs_per_block,\\n                                      stokes_dofs_per_block);\\n \\n Table<2, DoFTools::Coupling> coupling(dim + 1, dim + 1);\\n \\n for (unsigned int c = 0; c < dim + 1; ++c)\\n for (unsigned int d = 0; d < dim + 1; ++d)\\n if (!((c == dim) && (d == dim)))\\n            coupling[c][d] = DoFTools::always;\\n else\\n            coupling[c][d] = DoFTools::none;\\n \\n DoFTools::make_sparsity_pattern(\\n        stokes_dof_handler, coupling, dsp, stokes_constraints, false);\\n \\n      stokes_matrix.reinit(dsp);\\n    }\\n \\n    {\\n      Amg_preconditioner.reset();\\n      Mp_preconditioner.reset();\\n      stokes_preconditioner_matrix.clear();\\n \\n BlockDynamicSparsityPattern dsp(stokes_dofs_per_block,\\n                                      stokes_dofs_per_block);\\n \\n Table<2, DoFTools::Coupling> coupling(dim + 1, dim + 1);\\n for (unsigned int c = 0; c < dim + 1; ++c)\\n for (unsigned int d = 0; d < dim + 1; ++d)\\n if (c == d)\\n            coupling[c][d] = DoFTools::always;\\n else\\n            coupling[c][d] = DoFTools::none;\\n \\n DoFTools::make_sparsity_pattern(\\n        stokes_dof_handler, coupling, dsp, stokes_constraints, false);\\n \\n      stokes_preconditioner_matrix.reinit(dsp);\\n    }\\n \\n    {\\n      temperature_mass_matrix.clear();\\n      temperature_stiffness_matrix.clear();\\n      temperature_matrix.clear();\\n \\n DynamicSparsityPattern dsp(n_T, n_T);\\n DoFTools::make_sparsity_pattern(temperature_dof_handler,\\n                                      dsp,\\n                                      temperature_constraints,\\n false);\\n \\n      temperature_matrix.reinit(dsp);\\n      temperature_mass_matrix.reinit(temperature_matrix);\\n      temperature_stiffness_matrix.reinit(temperature_matrix);\\n    }\\n \\n IndexSet temperature_partitioning = complete_index_set(n_T);\\n    stokes_solution.reinit(stokes_partitioning, MPI_COMM_WORLD);\\n    old_stokes_solution.reinit(stokes_partitioning, MPI_COMM_WORLD);\\n    stokes_rhs.reinit(stokes_partitioning, MPI_COMM_WORLD);\\n \\n    temperature_solution.reinit(temperature_partitioning, MPI_COMM_WORLD);\\n    old_temperature_solution.reinit(temperature_partitioning, MPI_COMM_WORLD);\\n    old_old_temperature_solution.reinit(temperature_partitioning,\\n                                        MPI_COMM_WORLD);\\n \\n    temperature_rhs.reinit(temperature_partitioning, MPI_COMM_WORLD);\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::assemble_stokes_preconditioner()\\n  {\\n    stokes_preconditioner_matrix = 0;\\n \\n const QGauss<dim> quadrature_formula(stokes_degree + 2);\\n FEValues<dim>     stokes_fe_values(stokes_fe,\\n                                   quadrature_formula,\\n update_JxW_values | update_values |\\n update_gradients);\\n \\n const unsigned int dofs_per_cell = stokes_fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n FullMatrix<double> local_matrix(dofs_per_cell, dofs_per_cell);\\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n    std::vector<Tensor<2, dim>> grad_phi_u(dofs_per_cell);\\n    std::vector<double>         phi_p(dofs_per_cell);\\n \\n const FEValuesExtractors::Vector velocities(0);\\n const FEValuesExtractors::Scalar pressure(dim);\\n \\n for (const auto &cell : stokes_dof_handler.active_cell_iterators())\\n      {\\n        stokes_fe_values.reinit(cell);\\n        local_matrix = 0;\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n          {\\n for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n              {\\n                grad_phi_u[k] = stokes_fe_values[velocities].gradient(k, q);\\n                phi_p[k]      = stokes_fe_values[pressure].value(k, q);\\n              }\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                local_matrix(i, j) +=\\n                  (EquationData::eta *\\n                     scalar_product(grad_phi_u[i], grad_phi_u[j]) +\\n                   (1. / EquationData::eta) * phi_p[i] * phi_p[j]) *\\n                  stokes_fe_values.JxW(q);\\n          }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n        stokes_constraints.distribute_local_to_global(\\n          local_matrix, local_dof_indices, stokes_preconditioner_matrix);\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::build_stokes_preconditioner()\\n  {\\n if (rebuild_stokes_preconditioner == false)\\n return;\\n \\n    std::cout << \\\"   Rebuilding Stokes preconditioner...\\\" << std::flush;\\n \\n    assemble_stokes_preconditioner();\\n \\n    Amg_preconditioner = std::make_shared<TrilinosWrappers::PreconditionAMG>();\\n \\n    std::vector<std::vector<bool>>   constant_modes;\\n const FEValuesExtractors::Vector velocity_components(0);\\n DoFTools::extract_constant_modes(stokes_dof_handler,\\n                                     stokes_fe.component_mask(\\n                                       velocity_components),\\n                                     constant_modes);\\n TrilinosWrappers::PreconditionAMG::AdditionalData amg_data;\\n    amg_data.constant_modes = constant_modes;\\n \\n    amg_data.elliptic              = true;\\n    amg_data.higher_order_elements = true;\\n    amg_data.smoother_sweeps       = 2;\\n    amg_data.aggregation_threshold = 0.02;\\n    Amg_preconditioner->initialize(stokes_preconditioner_matrix.block(0, 0),\\n                                   amg_data);\\n \\n    Mp_preconditioner = std::make_shared<TrilinosWrappers::PreconditionIC>();\\n    Mp_preconditioner->initialize(stokes_preconditioner_matrix.block(1, 1));\\n \\n    std::cout << std::endl;\\n \\n    rebuild_stokes_preconditioner = false;\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::assemble_stokes_system()\\n  {\\n    std::cout << \\\"   Assembling...\\\" << std::flush;\\n \\n if (rebuild_stokes_matrix == true)\\n      stokes_matrix = 0;\\n \\n    stokes_rhs = 0;\\n \\n const QGauss<dim> quadrature_formula(stokes_degree + 2);\\n FEValues<dim>     stokes_fe_values(\\n      stokes_fe,\\n      quadrature_formula,\\n update_values | update_quadrature_points | update_JxW_values |\\n        (rebuild_stokes_matrix == true ? update_gradients : UpdateFlags(0)));\\n \\n FEValues<dim> temperature_fe_values(temperature_fe,\\n                                        quadrature_formula,\\n update_values);\\n \\n const unsigned int dofs_per_cell = stokes_fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n FullMatrix<double> local_matrix(dofs_per_cell, dofs_per_cell);\\n Vector<double>     local_rhs(dofs_per_cell);\\n \\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n    std::vector<double> old_temperature_values(n_q_points);\\n \\n    std::vector<Tensor<1, dim>>          phi_u(dofs_per_cell);\\n    std::vector<SymmetricTensor<2, dim>> grads_phi_u(dofs_per_cell);\\n    std::vector<double>                  div_phi_u(dofs_per_cell);\\n    std::vector<double>                  phi_p(dofs_per_cell);\\n \\n const FEValuesExtractors::Vector velocities(0);\\n const FEValuesExtractors::Scalar pressure(dim);\\n \\n auto       cell             = stokes_dof_handler.begin_active();\\n const auto endc             = stokes_dof_handler.end();\\n auto       temperature_cell = temperature_dof_handler.begin_active();\\n \\n for (; cell != endc; ++cell, ++temperature_cell)\\n      {\\n        stokes_fe_values.reinit(cell);\\n        temperature_fe_values.reinit(temperature_cell);\\n \\n        local_matrix = 0;\\n        local_rhs    = 0;\\n \\n        temperature_fe_values.get_function_values(old_temperature_solution,\\n                                                  old_temperature_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n          {\\n const double old_temperature = old_temperature_values[q];\\n \\n for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n              {\\n                phi_u[k] = stokes_fe_values[velocities].value(k, q);\\n if (rebuild_stokes_matrix)\\n                  {\\n                    grads_phi_u[k] =\\n                      stokes_fe_values[velocities].symmetric_gradient(k, q);\\n                    div_phi_u[k] =\\n                      stokes_fe_values[velocities].divergence(k, q);\\n                    phi_p[k] = stokes_fe_values[pressure].value(k, q);\\n                  }\\n              }\\n \\n if (rebuild_stokes_matrix)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                  local_matrix(i, j) +=\\n                    (EquationData::eta * 2 * (grads_phi_u[i] * grads_phi_u[j]) -\\n                     div_phi_u[i] * phi_p[j] - phi_p[i] * div_phi_u[j]) *\\n                    stokes_fe_values.JxW(q);\\n \\n const Point<dim> gravity =\\n              -((dim == 2) ? (Point<dim>(0, 1)) : (Point<dim>(0, 0, 1)));\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n              local_rhs(i) += (-EquationData::density * EquationData::beta *\\n                               gravity * phi_u[i] * old_temperature) *\\n                              stokes_fe_values.JxW(q);\\n          }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n \\n if (rebuild_stokes_matrix == true)\\n          stokes_constraints.distribute_local_to_global(local_matrix,\\n                                                        local_rhs,\\n                                                        local_dof_indices,\\n                                                        stokes_matrix,\\n                                                        stokes_rhs);\\n else\\n          stokes_constraints.distribute_local_to_global(local_rhs,\\n                                                        local_dof_indices,\\n                                                        stokes_rhs);\\n      }\\n \\n    rebuild_stokes_matrix = false;\\n \\n    std::cout << std::endl;\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::assemble_temperature_matrix()\\n  {\\n if (rebuild_temperature_matrices == false)\\n return;\\n \\n    temperature_mass_matrix      = 0;\\n    temperature_stiffness_matrix = 0;\\n \\n const QGauss<dim> quadrature_formula(temperature_degree + 2);\\n FEValues<dim>     temperature_fe_values(temperature_fe,\\n                                        quadrature_formula,\\n update_values | update_gradients |\\n update_JxW_values);\\n \\n const unsigned int dofs_per_cell = temperature_fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n FullMatrix<double> local_mass_matrix(dofs_per_cell, dofs_per_cell);\\n FullMatrix<double> local_stiffness_matrix(dofs_per_cell, dofs_per_cell);\\n \\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n    std::vector<double>         phi_T(dofs_per_cell);\\n    std::vector<Tensor<1, dim>> grad_phi_T(dofs_per_cell);\\n \\n for (const auto &cell : temperature_dof_handler.active_cell_iterators())\\n      {\\n        local_mass_matrix      = 0;\\n        local_stiffness_matrix = 0;\\n \\n        temperature_fe_values.reinit(cell);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n          {\\n for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n              {\\n                grad_phi_T[k] = temperature_fe_values.shape_grad(k, q);\\n                phi_T[k]      = temperature_fe_values.shape_value(k, q);\\n              }\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                {\\n                  local_mass_matrix(i, j) +=\\n                    (phi_T[i] * phi_T[j] * temperature_fe_values.JxW(q));\\n                  local_stiffness_matrix(i, j) +=\\n                    (EquationData::kappa * grad_phi_T[i] * grad_phi_T[j] *\\n                     temperature_fe_values.JxW(q));\\n                }\\n          }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n \\n        temperature_constraints.distribute_local_to_global(\\n          local_mass_matrix, local_dof_indices, temperature_mass_matrix);\\n        temperature_constraints.distribute_local_to_global(\\n          local_stiffness_matrix,\\n          local_dof_indices,\\n          temperature_stiffness_matrix);\\n      }\\n \\n    rebuild_temperature_matrices = false;\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::assemble_temperature_system(\\n const double maximal_velocity)\\n  {\\n const bool use_bdf2_scheme = (timestep_number != 0);\\n \\n if (use_bdf2_scheme == true)\\n      {\\n        temperature_matrix.copy_from(temperature_mass_matrix);\\n        temperature_matrix *=\\n          (2 * time_step + old_time_step) / (time_step + old_time_step);\\n        temperature_matrix.add(time_step, temperature_stiffness_matrix);\\n      }\\n else\\n      {\\n        temperature_matrix.copy_from(temperature_mass_matrix);\\n        temperature_matrix.add(time_step, temperature_stiffness_matrix);\\n      }\\n \\n    temperature_rhs = 0;\\n \\n const QGauss<dim> quadrature_formula(temperature_degree + 2);\\n FEValues<dim>     temperature_fe_values(temperature_fe,\\n                                        quadrature_formula,\\n update_values | update_gradients |\\n update_hessians |\\n update_quadrature_points |\\n update_JxW_values);\\n FEValues<dim>     stokes_fe_values(stokes_fe,\\n                                   quadrature_formula,\\n update_values);\\n \\n const unsigned int dofs_per_cell = temperature_fe.n_dofs_per_cell();\\n const unsigned int n_q_points    = quadrature_formula.size();\\n \\n Vector<double> local_rhs(dofs_per_cell);\\n \\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n    std::vector<Tensor<1, dim>> old_velocity_values(n_q_points);\\n    std::vector<Tensor<1, dim>> old_old_velocity_values(n_q_points);\\n    std::vector<double>         old_temperature_values(n_q_points);\\n    std::vector<double>         old_old_temperature_values(n_q_points);\\n    std::vector<Tensor<1, dim>> old_temperature_grads(n_q_points);\\n    std::vector<Tensor<1, dim>> old_old_temperature_grads(n_q_points);\\n    std::vector<double>         old_temperature_laplacians(n_q_points);\\n    std::vector<double>         old_old_temperature_laplacians(n_q_points);\\n \\n    EquationData::TemperatureRightHandSide<dim> temperature_right_hand_side;\\n    std::vector<double>                         gamma_values(n_q_points);\\n \\n    std::vector<double>         phi_T(dofs_per_cell);\\n    std::vector<Tensor<1, dim>> grad_phi_T(dofs_per_cell);\\n \\n const std::pair<double, double> global_T_range =\\n      get_extrapolated_temperature_range();\\n \\n const FEValuesExtractors::Vector velocities(0);\\n \\n auto       cell        = temperature_dof_handler.begin_active();\\n const auto endc        = temperature_dof_handler.end();\\n auto       stokes_cell = stokes_dof_handler.begin_active();\\n \\n for (; cell != endc; ++cell, ++stokes_cell)\\n      {\\n        local_rhs = 0;\\n \\n        temperature_fe_values.reinit(cell);\\n        stokes_fe_values.reinit(stokes_cell);\\n \\n        temperature_fe_values.get_function_values(old_temperature_solution,\\n                                                  old_temperature_values);\\n        temperature_fe_values.get_function_values(old_old_temperature_solution,\\n                                                  old_old_temperature_values);\\n \\n        temperature_fe_values.get_function_gradients(old_temperature_solution,\\n                                                     old_temperature_grads);\\n        temperature_fe_values.get_function_gradients(\\n          old_old_temperature_solution, old_old_temperature_grads);\\n \\n        temperature_fe_values.get_function_laplacians(\\n          old_temperature_solution, old_temperature_laplacians);\\n        temperature_fe_values.get_function_laplacians(\\n          old_old_temperature_solution, old_old_temperature_laplacians);\\n \\n        temperature_right_hand_side.value_list(\\n          temperature_fe_values.get_quadrature_points(), gamma_values);\\n \\n        stokes_fe_values[velocities].get_function_values(stokes_solution,\\n                                                         old_velocity_values);\\n        stokes_fe_values[velocities].get_function_values(\\n          old_stokes_solution, old_old_velocity_values);\\n \\n const double nu =\\n          compute_viscosity(old_temperature_values,\\n                            old_old_temperature_values,\\n                            old_temperature_grads,\\n                            old_old_temperature_grads,\\n                            old_temperature_laplacians,\\n                            old_old_temperature_laplacians,\\n                            old_velocity_values,\\n                            old_old_velocity_values,\\n                            gamma_values,\\n                            maximal_velocity,\\n                            global_T_range.second - global_T_range.first,\\n                            cell->diameter());\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n          {\\n for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n              {\\n                grad_phi_T[k] = temperature_fe_values.shape_grad(k, q);\\n                phi_T[k]      = temperature_fe_values.shape_value(k, q);\\n              }\\n \\n const double T_term_for_rhs =\\n              (use_bdf2_scheme ?\\n                 (old_temperature_values[q] * (1 + time_step / old_time_step) -\\n                  old_old_temperature_values[q] * (time_step * time_step) /\\n                    (old_time_step * (time_step + old_time_step))) :\\n                 old_temperature_values[q]);\\n \\n const Tensor<1, dim> ext_grad_T =\\n              (use_bdf2_scheme ?\\n                 (old_temperature_grads[q] * (1 + time_step / old_time_step) -\\n                  old_old_temperature_grads[q] * time_step / old_time_step) :\\n                 old_temperature_grads[q]);\\n \\n const Tensor<1, dim> extrapolated_u =\\n              (use_bdf2_scheme ?\\n                 (old_velocity_values[q] * (1 + time_step / old_time_step) -\\n                  old_old_velocity_values[q] * time_step / old_time_step) :\\n                 old_velocity_values[q]);\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n              local_rhs(i) +=\\n                (T_term_for_rhs * phi_T[i] -\\n                 time_step * extrapolated_u * ext_grad_T * phi_T[i] -\\n                 time_step * nu * ext_grad_T * grad_phi_T[i] +\\n                 time_step * gamma_values[q] * phi_T[i]) *\\n                temperature_fe_values.JxW(q);\\n          }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n        temperature_constraints.distribute_local_to_global(local_rhs,\\n                                                           local_dof_indices,\\n                                                           temperature_rhs);\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::solve()\\n  {\\n    std::cout << \\\"   Solving...\\\" << std::endl;\\n \\n    {\\n const LinearSolvers::InverseMatrix<TrilinosWrappers::SparseMatrix,\\n TrilinosWrappers::PreconditionIC>\\n        mp_inverse(stokes_preconditioner_matrix.block(1, 1),\\n                   *Mp_preconditioner);\\n \\n const LinearSolvers::BlockSchurPreconditioner<\\n TrilinosWrappers::PreconditionAMG,\\n TrilinosWrappers::PreconditionIC>\\n        preconditioner(stokes_matrix, mp_inverse, *Amg_preconditioner);\\n \\n SolverControl solver_control(stokes_matrix.m(),\\n                                   1e-6 * stokes_rhs.l2_norm());\\n \\n SolverGMRES<TrilinosWrappers::MPI::BlockVector> gmres(\\n        solver_control,\\n SolverGMRES<TrilinosWrappers::MPI::BlockVector>::AdditionalData(100));\\n \\n for (unsigned int i = 0; i < stokes_solution.size(); ++i)\\n if (stokes_constraints.is_constrained(i))\\n          stokes_solution(i) = 0;\\n \\n      gmres.solve(stokes_matrix, stokes_solution, stokes_rhs, preconditioner);\\n \\n      stokes_constraints.distribute(stokes_solution);\\n \\n      std::cout << \\\"   \\\" << solver_control.last_step()\\n                << \\\" GMRES iterations for Stokes subsystem.\\\" << std::endl;\\n    }\\n \\n    old_time_step                 = time_step;\\n const double maximal_velocity = get_maximal_velocity();\\n \\n if (maximal_velocity >= 0.01)\\n      time_step = 1. / (1.7 * dim * std::sqrt(1. * dim)) / temperature_degree *\\n GridTools::minimal_cell_diameter(triangulation) /\\n                  maximal_velocity;\\n else\\n      time_step = 1. / (1.7 * dim * std::sqrt(1. * dim)) / temperature_degree *\\n GridTools::minimal_cell_diameter(triangulation) / .01;\\n \\n    std::cout << \\\"   \\\"\\n              << \\\"Time step: \\\" << time_step << std::endl;\\n \\n    temperature_solution = old_temperature_solution;\\n \\n    assemble_temperature_system(maximal_velocity);\\n    {\\n SolverControl solver_control(temperature_matrix.m(),\\n                                   1e-8 * temperature_rhs.l2_norm());\\n SolverCG<TrilinosWrappers::MPI::Vector> cg(solver_control);\\n \\n TrilinosWrappers::PreconditionIC preconditioner;\\n      preconditioner.initialize(temperature_matrix);\\n \\n      cg.solve(temperature_matrix,\\n               temperature_solution,\\n               temperature_rhs,\\n               preconditioner);\\n \\n      temperature_constraints.distribute(temperature_solution);\\n \\n      std::cout << \\\"   \\\" << solver_control.last_step()\\n                << \\\" CG iterations for temperature.\\\" << std::endl;\\n \\n double min_temperature = temperature_solution(0),\\n             max_temperature = temperature_solution(0);\\n for (unsigned int i = 0; i < temperature_solution.size(); ++i)\\n        {\\n          min_temperature =\\n std::min<double>(min_temperature, temperature_solution(i));\\n          max_temperature =\\n std::max<double>(max_temperature, temperature_solution(i));\\n        }\\n \\n      std::cout << \\\"   Temperature range: \\\" << min_temperature << ' '\\n                << max_temperature << std::endl;\\n    }\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::output_results() const\\n {\\n if (timestep_number % 10 != 0)\\n return;\\n \\n    std::vector<std::string> stokes_names(dim, \\\"velocity\\\");\\n    stokes_names.emplace_back(\\\"p\\\");\\n    std::vector<DataComponentInterpretation::DataComponentInterpretation>\\n      stokes_component_interpretation(\\n        dim + 1, DataComponentInterpretation::component_is_scalar);\\n for (unsigned int i = 0; i < dim; ++i)\\n      stokes_component_interpretation[i] =\\n DataComponentInterpretation::component_is_part_of_vector;\\n \\n DataOut<dim> data_out;\\n    data_out.add_data_vector(stokes_dof_handler,\\n                             stokes_solution,\\n                             stokes_names,\\n                             stokes_component_interpretation);\\n    data_out.add_data_vector(temperature_dof_handler,\\n                             temperature_solution,\\n \\\"T\\\");\\n    data_out.build_patches(std::min(stokes_degree, temperature_degree));\\n \\n    std::ofstream output(\\\"solution-\\\" +\\n Utilities::int_to_string(timestep_number, 4) + \\\".vtk\\\");\\n    data_out.write_vtk(output);\\n  }\\n \\n \\n \\n template <int dim>\\n void\\n  BoussinesqFlowProblem<dim>::refine_mesh(const unsigned int max_grid_level)\\n  {\\n Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n \\n KellyErrorEstimator<dim>::estimate(temperature_dof_handler,\\n QGauss<dim - 1>(temperature_degree + 1),\\n                                       {},\\n                                       temperature_solution,\\n                                       estimated_error_per_cell);\\n \\n GridRefinement::refine_and_coarsen_fixed_fraction(triangulation,\\n                                                      estimated_error_per_cell,\\n                                                      0.8,\\n                                                      0.1);\\n if (triangulation.n_levels() > max_grid_level)\\n for (auto &cell :\\n triangulation.active_cell_iterators_on_level(max_grid_level))\\n        cell->clear_refine_flag();\\n \\n const std::vector<TrilinosWrappers::MPI::Vector> x_temperature = {\\n      temperature_solution, old_temperature_solution};\\n TrilinosWrappers::MPI::BlockVector x_stokes = stokes_solution;\\n \\n SolutionTransfer<dim, TrilinosWrappers::MPI::Vector> temperature_trans(\\n      temperature_dof_handler);\\n SolutionTransfer<dim, TrilinosWrappers::MPI::BlockVector> stokes_trans(\\n      stokes_dof_handler);\\n \\n triangulation.prepare_coarsening_and_refinement();\\n    temperature_trans.prepare_for_coarsening_and_refinement(x_temperature);\\n    stokes_trans.prepare_for_coarsening_and_refinement(x_stokes);\\n \\n triangulation.execute_coarsening_and_refinement();\\n    setup_dofs();\\n \\n    std::vector<TrilinosWrappers::MPI::Vector> tmp = {\\n TrilinosWrappers::MPI::Vector(temperature_solution),\\n TrilinosWrappers::MPI::Vector(temperature_solution)};\\n    temperature_trans.interpolate(x_temperature, tmp);\\n \\n    temperature_solution     = tmp[0];\\n    old_temperature_solution = tmp[1];\\n \\n    temperature_constraints.distribute(temperature_solution);\\n    temperature_constraints.distribute(old_temperature_solution);\\n \\n    stokes_trans.interpolate(x_stokes, stokes_solution);\\n \\n    stokes_constraints.distribute(stokes_solution);\\n \\n    rebuild_stokes_matrix         = true;\\n    rebuild_temperature_matrices  = true;\\n    rebuild_stokes_preconditioner = true;\\n  }\\n \\n \\n \\n template <int dim>\\n void BoussinesqFlowProblem<dim>::run()\\n  {\\n const unsigned int initial_refinement     = (dim == 2 ? 4 : 2);\\n const unsigned int n_pre_refinement_steps = (dim == 2 ? 4 : 3);\\n \\n \\n GridGenerator::hyper_cube(triangulation);\\n    global_Omega_diameter = GridTools::diameter(triangulation);\\n \\n triangulation.refine_global(initial_refinement);\\n \\n    setup_dofs();\\n \\n unsigned int pre_refinement_step = 0;\\n \\n  start_time_iteration:\\n \\n VectorTools::project(temperature_dof_handler,\\n                         temperature_constraints,\\n QGauss<dim>(temperature_degree + 2),\\n                         EquationData::TemperatureInitialValues<dim>(),\\n                         old_temperature_solution);\\n \\n    timestep_number = 0;\\n    time_step = old_time_step = 0;\\n \\n double time = 0;\\n \\n do\\n      {\\n        std::cout << \\\"Timestep \\\" << timestep_number << \\\":  t=\\\" << time\\n                  << std::endl;\\n \\n        assemble_stokes_system();\\n        build_stokes_preconditioner();\\n        assemble_temperature_matrix();\\n \\n        solve();\\n \\n        output_results();\\n \\n        std::cout << std::endl;\\n \\n if ((timestep_number == 0) &&\\n            (pre_refinement_step < n_pre_refinement_steps))\\n          {\\n            refine_mesh(initial_refinement + n_pre_refinement_steps);\\n            ++pre_refinement_step;\\n goto start_time_iteration;\\n          }\\n else if ((timestep_number > 0) && (timestep_number % 5 == 0))\\n          refine_mesh(initial_refinement + n_pre_refinement_steps);\\n \\n        time += time_step;\\n        ++timestep_number;\\n \\n        old_stokes_solution          = stokes_solution;\\n        old_old_temperature_solution = old_temperature_solution;\\n        old_temperature_solution     = temperature_solution;\\n      }\\n while (time <= 100);\\n  }\\n} // namespace Step31\\n \\n \\n \\nint main(int argc, char *argv[])\\n{\\n try\\n    {\\n using namespace dealii;\\n using namespace Step31;\\n \\n Utilities::MPI::MPI_InitFinalize mpi_initialization(\\n        argc, argv, numbers::invalid_unsigned_int);\\n \\n AssertThrow(Utilities::MPI::n_mpi_processes(MPI_COMM_WORLD) == 1,\\n                  ExcMessage(\\n \\\"This program can only be run in serial, use ./step-31\\\"));\\n \\n      BoussinesqFlowProblem<2> flow_problem;\\n      flow_problem.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nblock_sparsity_pattern.h\\nBlockVectorBase::blockBlockType & block(const unsigned int i)\\nDataOutInterface::write_vtkvoid write_vtk(std::ostream &out) constDefinition data_out_base.cc:7681\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nFEValuesBase::get_function_valuesvoid get_function_values(const ReadVector< Number > &fe_function, std::vector< Number > &values) constDefinition fe_values_base.cc:716\\nFEValuesBase::JxWdouble JxW(const unsigned int q_point) const\\nFEValues::reinitvoid reinit(const TriaIterator< DoFCellAccessor< dim, spacedim, level_dof_access > > &cell)\\nPoint::distancenumbers::NumberTraits< Number >::real_type distance(const Point< dim, Number > &p) const\\ndof_handler.h\\ndof_renumbering.h\\ndof_tools.h\\nerror_estimator.h\\nfe_values.h\\nfe_q.h\\nfe_system.h\\nfull_matrix.h\\ngrid_refinement.h\\ntria.h\\ngrid_generator.h\\ngrid_tools.h\\nutilities.h\\nindex_set.h\\nLAPACKSupport::matrix@ matrixContents is actually a matrix.Definition lapack_support.h:57\\nLocalIntegrators::Divergence::normdouble norm(const FEValuesBase< dim > &fe, const ArrayView< const std::vector< Tensor< 1, dim > > > &Du)Definition divergence.h:471\\nPhysics::Elasticity::Kinematics::dSymmetricTensor< 2, dim, Number > d(const Tensor< 2, dim, Number > &F, const Tensor< 2, dim, Number > &dF_dt)\\nWorkStream::internal::tbb_no_coloring::runvoid run(const Iterator &begin, const std_cxx20::type_identity_t< Iterator > &end, Worker worker, Copier copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const unsigned int queue_length, const unsigned int chunk_size)Definition work_stream.h:471\\ndata_out.h\\nsolution_transfer.h\\nquadrature_lib.h\\nsolver_cg.h\\nsolver_gmres.h\\nTrilinosWrappers::PreconditionAMG::AdditionalData::aggregation_thresholddouble aggregation_thresholdDefinition trilinos_precondition.h:1474\\nTrilinosWrappers::PreconditionAMG::AdditionalData::smoother_sweepsunsigned int smoother_sweepsDefinition trilinos_precondition.h:1512\\nTrilinosWrappers::PreconditionAMG::AdditionalData::ellipticbool ellipticDefinition trilinos_precondition.h:1445\\nTrilinosWrappers::PreconditionAMG::AdditionalData::higher_order_elementsbool higher_order_elementsDefinition trilinos_precondition.h:1451\\ntrilinos_block_sparse_matrix.h\\ntrilinos_parallel_block_vector.h\\ntrilinos_precondition.h\\ntrilinos_sparse_matrix.h\\ntrilinos_vector.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"