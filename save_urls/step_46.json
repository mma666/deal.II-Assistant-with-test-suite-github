"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_46.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-46 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-46 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-46 tutorial program\\n\\n\\nThis tutorial depends on step-8, step-22, step-27.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\nThe general idea\\nImplementation\\n Specifics of the implementation \\n\\nDealing with the interface terms\\nVelocity boundary conditions on the interface\\n\\nThe testcase\\n\\nIdentifying which subdomain a cell is in\\nLinear solvers\\nMesh refinement\\n\\n\\n The commented program\\n\\nInclude files\\nThe FluidStructureProblem class template\\nBoundary values and right hand side\\nThe FluidStructureProblem implementation\\n\\nConstructors and helper functions\\nMeshes and assigning subdomains\\nFluidStructureProblem::setup_dofs\\nFluidStructureProblem::assemble_system\\nFluidStructureProblem::solve\\nFluidStructureProblem::output_results\\nFluidStructureProblem::refine_mesh\\nFluidStructureProblem::run\\nThe main() function\\n\\n\\n\\n Results\\n\\n2d results\\n3d results\\nPossibilities for extensions\\n\\nLinear solvers and preconditioners\\nRefinement indicators\\nVerification\\nBetter models\\n\\n\\n The plain program\\n   \\n\\n\\nThis program was contributed by Wolfgang Bangerth. \\n This material is based upon work partly supported by the National Science Foundation under Award No. EAR-0949446 and The University of California \\u2013 Davis. Any opinions, findings, and conclusions or recommendations expressed in this publication are those of the author and do not necessarily reflect the views of the National Science Foundation or of The University of California \\u2013 Davis. \\n Introduction\\nThis program deals with the problem of coupling different physics in different parts of the domain. Specifically, let us consider the following situation that couples a Stokes fluid with an elastic solid (these two problems were previously discussed separately in step-22 and step-8, where you may want to read up on the individual equations):\\n\\nIn a part \\\\(\\\\Omega_f\\\\) of \\\\(\\\\Omega\\\\), we have a fluid flowing that satisfies the time independent Stokes equations (in the form that involves the strain tensor):     \\n\\\\begin{align*}\\n    -2\\\\eta\\\\nabla \\\\cdot \\\\varepsilon(\\\\mathbf v) + \\\\nabla p &= 0,\\n          \\\\qquad \\\\qquad && \\\\text{in}\\\\ \\\\Omega_f\\\\\\\\\\n    -\\\\nabla \\\\cdot \\\\mathbf v &= 0  && \\\\text{in}\\\\ \\\\Omega_f.\\n  \\\\end{align*}\\n\\n Here, \\\\(\\\\mathbf v, p\\\\) are the fluid velocity and pressure, respectively. We prescribe the velocity on part of the external boundary,    \\n\\\\begin{align*}\\n    \\\\mathbf v = \\\\mathbf v_0 \\\\qquad\\\\qquad\\n     \\\\text{on}\\\\ \\\\Gamma_{f,1} \\\\subset \\\\partial\\\\Omega \\\\cap \\\\partial\\\\Omega_f\\n  \\\\end{align*}\\n\\n while we assume free-flow conditions on the remainder of the external boundary,      \\n\\\\begin{align*}\\n    (2\\\\eta \\\\varepsilon(\\\\mathbf v) - p \\\\mathbf 1) \\\\cdot \\\\mathbf n = 0\\n     \\\\qquad\\\\qquad\\n     \\\\text{on}\\\\ \\\\Gamma_{f,2} = \\\\partial\\\\Omega \\\\cap \\\\partial\\\\Omega_f \\\\backslash\\n     \\\\Gamma_{f,1}.\\n  \\\\end{align*}\\n\\n\\nThe remainder of the domain, \\\\(\\\\Omega_s = \\\\Omega \\\\backslash \\\\Omega_f\\\\) is occupied by a solid whose deformation field \\\\(\\\\mathbf u\\\\) satisfies the elasticity equation,    \\n\\\\begin{align*}\\n    -\\\\nabla \\\\cdot C \\\\varepsilon(\\\\mathbf u) = 0 \\\\qquad\\\\qquad\\n    & \\\\text{in}\\\\ \\\\Omega_s,\\n  \\\\end{align*}\\n\\n where \\\\(C\\\\) is the rank-4 elasticity tensor (for which we will use a particularly simple form by assuming that the solid is isotropic). It deforms in reaction to the forces exerted by the fluid flowing along the boundary of the solid. We assume this deformation to be so small that it has no feedback effect on the fluid, i.e. the coupling is only in one direction. For simplicity, we will assume that the solid's external boundary is clamped, i.e.    \\n\\\\begin{align*}\\n    \\\\mathbf u = \\\\mathbf 0 \\\\qquad\\\\qquad\\n     \\\\text{on}\\\\ \\\\Gamma_{s,1} = \\\\partial\\\\Omega \\\\cap \\\\partial\\\\Omega_s\\n  \\\\end{align*}\\n\\n\\nAs a consequence of the small displacement assumption, we will pose the following boundary conditions on the interface between the fluid and solid: first, we have no slip boundary conditions for the fluid,    \\n\\\\begin{align*}\\n    \\\\mathbf v = \\\\mathbf 0 \\\\qquad\\\\qquad\\n     \\\\text{on}\\\\ \\\\Gamma_{i} = \\\\partial\\\\Omega_s \\\\cap \\\\partial\\\\Omega_f.\\n  \\\\end{align*}\\n\\n Secondly, the forces (traction) on the solid equal the normal stress from the fluid,     \\n\\\\begin{align*}\\n    (C \\\\varepsilon(\\\\mathbf u)) \\\\mathbf n =\\n    (2 \\\\eta \\\\varepsilon(\\\\mathbf v) - p \\\\mathbf 1) \\\\mathbf n \\\\qquad\\\\qquad\\n     \\\\text{on}\\\\ \\\\Gamma_{i} = \\\\partial\\\\Omega_s \\\\cap \\\\partial\\\\Omega_f,\\n  \\\\end{align*}\\n\\n where \\\\(\\\\mathbf{n}\\\\) is the normal vector on \\\\(\\\\Gamma_{i}\\\\) pointing from the solid to the fluid.\\n\\nWe get a weak formulation of this problem by following our usual rule of multiplying from the left by a test function and integrating over the domain. It then looks like this: Find   \\\\(y = \\\\{\\\\mathbf v, p,\\n\\\\mathbf u\\\\} \\\\in Y \\\\subset H^1(\\\\Omega_f)^d \\\\times L_2(\\\\Omega_f) \\\\times\\nH^1(\\\\Omega_s)^d\\\\) such that            \\n\\\\begin{align*}\\n        2 \\\\eta (\\\\varepsilon(\\\\mathbf a), \\\\varepsilon(\\\\mathbf v))_{\\\\Omega_f}\\n        - (\\\\nabla \\\\cdot \\\\mathbf a, p)_{\\\\Omega_f}\\n        - (q, \\\\nabla \\\\cdot \\\\mathbf v)_{\\\\Omega_f} &\\n        \\\\\\\\\\n        + (\\\\varepsilon(\\\\mathbf b), C \\\\varepsilon(\\\\mathbf u))_{\\\\Omega_s} &\\n        \\\\\\\\\\n        - (\\\\mathbf b,\\n           (2 \\\\eta \\\\varepsilon(\\\\mathbf v) - p \\\\mathbf 1) \\\\mathbf n)_{\\\\Gamma_i}\\n        &=\\n        0,\\n\\\\end{align*}\\n\\n for all test functions \\\\(\\\\mathbf a, q, \\\\mathbf b\\\\); the first, second, and third lines correspond to the fluid, solid, and interface contributions, respectively. Note that \\\\(Y\\\\) is only a subspace of the spaces listed above to accommodate for the various Dirichlet boundary conditions.\\nThis sort of coupling is of course possible by simply having two Triangulation and two DoFHandler objects, one each for each of the two subdomains. On the other hand, deal.II is much simpler to use if there is a single DoFHandler object that knows about the discretization of the entire problem.\\nThis program is about how this can be achieved. Note that the goal is not to present a particularly useful physical model (a realistic fluid-structure interaction model would have to take into account the finite deformation of the solid and the effect this has on the fluid): this is, after all, just a tutorial program intended to demonstrate techniques, not to solve actual problems. Furthermore, we will make the assumption that the interface between the subdomains is aligned with coarse mesh cell faces.\\nThe general idea\\nBefore going into more details let us state the obvious: this is a problem with multiple solution variables; for this, you will probably want to read the Handling vector valued problems documentation topic first, which presents the basic philosophical framework in which we address problems with more than one solution variable. But back to the problem at hand:\\nThe fundamental idea to implement these sort of problems in deal.II goes as follows: in the problem formulation, the velocity and pressure variables \\\\(\\\\mathbf v, p\\\\) only live in the fluid subdomain \\\\(\\\\Omega_f\\\\). But let's assume that we extend them by zero to the entire domain \\\\(\\\\Omega\\\\) (in the general case this means that they will be discontinuous along \\\\(\\\\Gamma_i\\\\)). So what is the appropriate function space for these variables? We know that on \\\\(\\\\Omega_f\\\\) we should require \\\\(\\\\mathbf v \\\\in H^1(\\\\Omega_f)^d, p \\\\in L_2(\\\\Omega_f)\\\\), so for the extensions \\\\(\\\\tilde{\\\\mathbf v}, \\\\tilde p\\\\) to the whole domain the following appears a useful set of function spaces:         \\n\\\\begin{align*}\\n  \\\\tilde {\\\\mathbf v} &\\\\in V\\n   = \\\\{\\\\tilde {\\\\mathbf v}|_{\\\\Omega_f} \\\\in H^1(\\\\Omega_f)^d, \\\\quad\\n       \\\\tilde {\\\\mathbf v}|_{\\\\Omega_s} = 0 \\\\}\\n  \\\\\\\\\\n  \\\\tilde p &\\\\in P\\n  = \\\\{\\\\tilde p|_{\\\\Omega_f} \\\\in L_2(\\\\Omega_f), \\\\quad\\n       \\\\tilde p|_{\\\\Omega_s} = 0 \\\\}.\\n\\\\end{align*}\\n\\n (Since this is not important for the current discussion, we have omitted the question of boundary values from the choice of function spaces; this question also affects whether we can choose \\\\(L_2\\\\) for the pressure or whether we have to choose the space  \\\\(L_{2,0}(\\\\Omega_f)=\\\\{q\\\\in L_2(\\\\Omega_f): \\\\int_{\\\\Omega_f} q\\n= 0\\\\}\\\\) for the pressure. None of these questions are relevant to the following discussion, however.)\\nNote that these are indeed a linear function spaces with obvious norm. Since no confusion is possible in practice, we will henceforth omit the tilde again to denote the extension of a function to the whole domain and simply refer by \\\\(\\\\mathbf v, p\\\\) to both the original and the extended function.\\nFor discretization, we need finite dimensional subspaces \\\\(V_h,P_h\\\\) of \\\\(V, P\\\\). For Stokes, we know from step-22 that an appropriate choice is \\\\(Q_{p+1}^d\\\\times Q_P\\\\) but this only holds for that part of the domain occupied by the fluid. For the extended field, let's use the following subspaces defined on the triangulation \\\\(\\\\mathbb T\\\\):                 \\n\\\\begin{align*}\\n  V_h\\n   &= \\\\{{\\\\mathbf v}_h \\\\quad | \\\\quad\\n       \\\\forall K \\\\in {\\\\mathbb T}:\\n       {\\\\mathbf v}_h|_K \\\\in Q_{p+1}^d\\\\  \\\\text{if}\\\\ K\\\\subset {\\\\Omega_f}, \\\\quad\\n       {\\\\mathbf v}_h|_{\\\\Omega_f}\\\\ \\\\text{is continuous}, \\\\quad\\n       {\\\\mathbf v}_h|_K = 0\\\\ \\\\text{if}\\\\ K\\\\subset {\\\\Omega_s}\\\\}\\n   && \\\\subset V\\n  \\\\\\\\\\n  P_h\\n  &= \\\\{ p_h \\\\quad | \\\\quad\\n       \\\\forall K \\\\in {\\\\mathbb T}:\\n       p_h|_K \\\\in Q_p\\\\  \\\\text{if}\\\\ K\\\\subset {\\\\Omega_f}, \\\\quad\\n       p_h|_{\\\\Omega_f}\\\\ \\\\text{is continuous}, \\\\quad\\n       p_h|_K = 0\\\\ \\\\text{if}\\\\ K\\\\subset {\\\\Omega_s}\\\\ \\\\}\\n   && \\\\subset P.\\n\\\\end{align*}\\n\\n In other words, on \\\\(\\\\Omega_f\\\\) we choose the usual discrete spaces but we keep the (discontinuous) extension by zero. The point to make is that we now need a description of a finite element space for functions that are zero on a cell \\u2014 and this is where the FE_Nothing class comes in: it describes a finite dimensional function space of functions that are constant zero. A particular property of this peculiar linear vector space is that it has no degrees of freedom: it isn't just finite dimensional, it is in fact zero dimensional, and consequently for objects of this type, FiniteElement::n_dofs_per_cell() will return zero. For discussion below, let us give this space a proper symbol:   \\n\\\\[\\n  Z = \\\\{ \\\\varphi: \\\\varphi(x)=0 \\\\}.\\n\\\\]\\n\\n The symbol \\\\(Z\\\\) reminds of the fact that functions in this space are zero. Obviously, we choose \\\\(Z_h=Z\\\\).\\nThis entire discussion above can be repeated for the variables we use to describe the elasticity equation. Here, for the extended variables, we have     \\n\\\\begin{align*}\\n  \\\\tilde {\\\\mathbf u} &\\\\in U\\n   = \\\\{\\\\tilde {\\\\mathbf u}|_{\\\\Omega_s} \\\\in H^1(\\\\Omega_f)^d, \\\\quad\\n       \\\\tilde {\\\\mathbf u}|_{\\\\Omega_f} \\\\in Z(\\\\Omega_s)^d \\\\},\\n\\\\end{align*}\\n\\n and we will typically use a finite element space of the kind         \\n\\\\begin{align*}\\n  U_h\\n   &= \\\\{{\\\\mathbf u}_h \\\\quad | \\\\quad\\n       \\\\forall K \\\\in {\\\\mathbb T}:\\n       {\\\\mathbf u}_h|_K \\\\in Q_r^d\\\\  \\\\text{if}\\\\ K\\\\subset {\\\\Omega_s}, \\\\quad\\n       {\\\\mathbf u}_h|_{\\\\Omega_f}\\\\ \\\\text{is continuous}, \\\\quad\\n       {\\\\mathbf u}_h|_K \\\\in Z^d\\\\ \\\\text{if}\\\\ K\\\\subset {\\\\Omega_f}\\\\}\\n   && \\\\subset U\\n\\\\end{align*}\\n\\n of polynomial degree \\\\(r\\\\).\\nSo to sum up, we are going to look for a discrete vector-valued solution \\\\(y_h = \\\\{\\\\mathbf v_h, p_h, \\\\mathbf u_h\\\\}\\\\) in the following space:      \\n\\\\begin{align*}\\n  Y_h = \\\\{\\n      & y_h = \\\\{\\\\mathbf v_h, p_h, \\\\mathbf u_h\\\\} : \\\\\\\\\\n      & y_h|_{\\\\Omega_f} \\\\in Q_{p+1}^d \\\\times Q_p \\\\times Z^d, \\\\\\\\\\n      & y_h|_{\\\\Omega_s} \\\\in Z^d \\\\times Z \\\\times Q_r^d \\\\}.\\n\\\\end{align*}\\n\\nImplementation\\nSo how do we implement this sort of thing? First, we realize that the discrete space \\\\(Y_h\\\\) essentially calls for two different finite elements: First, on the fluid subdomain, we need the element \\\\(Q_{p+1}^d \\\\times Q_p \\\\times Z^d\\\\) which in deal.II is readily implemented by FESystem<dim> (FE_Q<dim>(p+1), dim,\\n FE_Q<dim>(p), 1,\\n FE_Nothing<dim>(), dim),\\nFESystemDefinition fe_system.h:208\\nFE_NothingDefinition fe_nothing.h:131\\nFE_QDefinition fe_q.h:554\\n where FE_Nothing implements the space of functions that are always zero. Second, on the solid subdomain, we need the element \\\\(\\\\in Z^d \\\\times Z \\\\times Q_r^d\\\\), which we get using FESystem<dim> (FE_Nothing<dim>(), dim,\\n FE_Nothing<dim>(), 1,\\n FE_Q<dim>(r), dim),\\nThe next step is that we associate each of these two elements with the cells that occupy each of the two subdomains. For this we realize that in a sense the two elements are just variations of each other in that they have the same number of vector components but have different polynomial degrees \\u2014 this smells very much like what one would do in \\\\(hp\\\\) finite element methods, and it is exactly what we are going to do here: we are going to (ab)use the classes and facilities of the hp-namespace to assign different elements to different cells. In other words, we will use collect the two finite elements in an hp::FECollection, will integrate with an appropriate hp::QCollection using an hp::FEValues object, and our DoFHandler will be in hp-mode. You may wish to take a look at step-27 for an overview of all of these concepts.\\nBefore going on describing the testcase, let us clarify a bit why this approach of extending the functions by zero to the entire domain and then mapping the problem on to the hp-framework makes sense:\\n\\nIt makes things uniform: On all cells, the number of vector components is the same (here, 2*dim+1). This makes all sorts of things possible since a uniform description allows for code re-use. For example, counting degrees of freedom per vector component (DoFTools::count_dofs_per_fe_component), sorting degrees of freedom by component (DoFRenumbering::component_wise), subsequent partitioning of matrices and vectors into blocks and many other functions work as they always did without the need to add special logic to them that describes cases where some of the variables only live on parts of the domain. Consequently, you have all sorts of tools already available to you in programs like the current one that weren't originally written for the multiphysics case but work just fine in the current context.\\nIt allows for easy graphical output: All graphical output formats we support require that each field in the output is defined on all nodes of the mesh. But given that now all solution components live everywhere, our existing DataOut routines work as they always did, and produce graphical output suitable for visualization \\u2013 the fields will simply be extended by zero, a value that can easily be filtered out by visualization programs if not desired.\\nThere is essentially no cost: The trick with the FE_Nothing does not add any degrees of freedom to the overall problem, nor do we ever have to handle a shape function that belongs to these components \\u2014 the FE_Nothing has no degrees of freedom, not does it have shape functions, all it does is take up vector components.\\n\\nSpecifics of the implementation \\nMore specifically, in the program we have to address the following points:\\nImplementing the bilinear form, and in particular dealing with the interface term, both in the matrix and the sparsity pattern.\\nImplementing Dirichlet boundary conditions on the external and internal parts of the boundaries \\\\(\\\\partial\\\\Omega_f,\\\\partial\\\\Omega_s\\\\).\\n\\nDealing with the interface terms\\nLet us first discuss implementing the bilinear form, which at the discrete level we recall to be            \\n\\\\begin{align*}\\n        2 \\\\eta (\\\\varepsilon(\\\\mathbf a_h), \\\\varepsilon(\\\\mathbf v_h))_{\\\\Omega_f}\\n        - (\\\\nabla \\\\cdot \\\\mathbf a_h, p_h)_{\\\\Omega_f}\\n        - (q_h, \\\\nabla \\\\cdot \\\\mathbf v_h)_{\\\\Omega_f} &\\n        \\\\\\\\\\n        + (\\\\varepsilon(\\\\mathbf b_h), C \\\\varepsilon(\\\\mathbf u_h))_{\\\\Omega_s} &\\n        \\\\\\\\\\n        - (\\\\mathbf b_h,\\n           (2 \\\\eta \\\\varepsilon(\\\\mathbf v_h) - p \\\\mathbf 1) \\\\mathbf n)_{\\\\Gamma_i}\\n        &=\\n        0,\\n\\\\end{align*}\\n\\n Given that we have extended the fields by zero, we could in principle write the integrals over subdomains to the entire domain \\\\(\\\\Omega\\\\), though it is little additional effort to first ask whether a cell is part of the elastic or fluid region before deciding which terms to integrate. Actually integrating these terms is not very difficult; for the Stokes equations, the relevant steps have been shown in step-22, whereas for the elasticity equation we take essentially the form shown in the Handling vector valued problems topic (rather than the one from step-8).\\nThe term that is of more interest is the interface term,    \\n\\\\[\\n        -(\\\\mathbf b_h,\\n           (2 \\\\eta \\\\varepsilon(\\\\mathbf v_h) - p \\\\mathbf 1) \\\\mathbf n)_{\\\\Gamma_i}.\\n\\\\]\\n\\n Based on our assumption that the interface \\\\(\\\\Gamma_i\\\\) coincides with cell boundaries, this can in fact be written as a set of face integrals. If we denote the velocity, pressure and displacement components of shape function \\\\(\\\\psi_i\\\\in Y_h\\\\) using the extractor notation \\\\(\\\\psi_i[\\\\mathbf v],\\\\psi_i[p], \\\\psi_i[\\\\mathbf u]\\\\), then the term above yields the following contribution to the global matrix entry \\\\(i,j\\\\):     \\n\\\\[\\n        -\\\\sum_K (\\\\psi_i[\\\\mathbf u],\\n           (2 \\\\eta \\\\varepsilon(\\\\psi_j[\\\\mathbf v]) - \\\\psi_j[p] \\\\mathbf 1)\\n           \\\\mathbf n)_{\\\\partial K \\\\cap \\\\Gamma_i}.\\n\\\\]\\n\\n Although it isn't immediately obvious, this term presents a slight complication: while \\\\(\\\\psi_i[\\\\mathbf u]\\\\) and \\\\(\\\\mathbf n\\\\) are evaluated on the solid side of the interface (they are test functions for the displacement and the normal vector to \\\\(\\\\Omega_s\\\\), respectively, we need to evaluate \\\\(\\\\psi_j[\\\\mathbf v],\\\\psi_j[p]\\\\) on the fluid side of the interface since they correspond to the stress/force exerted by the fluid. In other words, in our implementation, we will need FEFaceValue objects for both sides of the interface. To make things slightly worse, we may also have to deal with the fact that one side or the other may be refined, leaving us with the need to integrate over parts of a face. Take a look at the implementation below on how to deal with this.\\nAs an additional complication, the matrix entries that result from this term need to be added to the sparsity pattern of the matrix somehow. This is the realm of various functions in the DoFTools namespace like DoFTools::make_sparsity_pattern and DoFTools::make_flux_sparsity_pattern. Essentially, what these functions do is simulate what happens during assembly of the system matrix: whenever assembly would write a nonzero entry into the global matrix, the functions in DoFTools would add an entry to the sparsity pattern. We could therefore do the following: let DoFTools::make_sparsity_pattern add all those entries to the sparsity pattern that arise from the regular cell-by-cell integration, and then do the same by hand that arise from the interface terms. If you look at the implementation of the interface integrals in the program below, it should be obvious how to do that and would require no more than maybe 100 lines of code at most.\\nBut we're lazy people: the interface term couples degrees of freedom from two adjacent cells along a face, which is exactly the kind of thing one would do in discontinuous Galerkin schemes for which the function DoFTools::make_flux_sparsity_pattern was written. This is a superset of matrix entries compared to the usual DoFTools::make_sparsity_pattern: it will also add all entries that result from computing terms coupling the degrees of freedom from both sides of all faces. Unfortunately, for the simplest version of this function, this is a pretty big superset. Consider for example the following mesh with two cells and a \\\\(Q_1\\\\) finite element: 2---3---5\\n|   |   |\\n0---1---4\\n Here, the sparsity pattern produced by DoFTools::make_sparsity_pattern will only have entries for degrees of freedom that couple on a cell. However, it will not have sparsity pattern entries \\\\((0,4),(0,5),(2,4),(2,5)\\\\). The sparsity pattern generated by DoFTools::make_flux_sparsity_pattern will have these entries, however: it assumes that you want to build a sparsity pattern for a bilinear form that couples all degrees of freedom from adjacent cells. This is not what we want: our interface term acts only on a small subset of cells, and we certainly don't need all the extra couplings between two adjacent fluid cells, or two adjacent solid cells. Furthermore, the fact that we use higher order elements means that we would really generate many many more entries than we actually need: on the coarsest mesh, in 2d, 44,207 nonzero entries instead of 16,635 for DoFTools::make_sparsity_pattern, leading to plenty of zeros in the matrix we later build (of course, the 16,635 are not enough since they don't include the interface entries). This ratio would be even worse in 3d.\\nSo being extremely lazy comes with a cost: too many entries in the matrix. But we can get away with being moderately lazy: there is a variant of DoFTools::make_flux_sparsity_pattern that allows us to specify which vector components of the finite element couple with which other components, both in cell terms as well as in face terms. For cells that are in the solid subdomain, we couple all displacements with each other; for fluid cells, all velocities with all velocities and the pressure, but not the pressure with itself. Since no cell has both sets of variables, there is no need to distinguish between the two kinds of cells, so we can write the mask like this: Table<2,DoFTools::Coupling> cell_coupling (fe_collection.n_components(),\\n                                           fe_collection.n_components());\\n \\nfor (unsigned int c=0; c<fe_collection.n_components(); ++c)\\n for (unsigned int d=0; d<fe_collection.n_components(); ++d)\\n if (((c<dim+1) && (d<dim+1)\\n         && !((c==dim) && (d==dim)))\\n        ||\\n        ((c>=dim+1) && (d>=dim+1)))\\n      cell_coupling[c][d] = DoFTools::Coupling::always;\\nTableDefinition array_view.h:39\\nDoFTools::always@ alwaysDefinition dof_tools.h:247\\n Here, we have used the fact that the first dim components of the finite element are the velocities, then the pressure, and then the dim displacements. (We could as well have stated that the velocities/pressure also couple with the displacements since no cell ever has both sets of variables.) On the other hand, the interface terms require a mask like this: Table<2,DoFTools::Coupling> face_coupling (fe_collection.n_components(),\\n                                           fe_collection.n_components());\\n \\nfor (unsigned int c=0; c<fe_collection.n_components(); ++c)\\n for (unsigned int d=0; d<fe_collection.n_components(); ++d)\\n if ((c>=dim+1) && (d<dim+1))\\n      face_coupling[c][d] = DoFTools::Coupling::always;\\n In other words, all displacement test functions (components c>=dim+1) couple with all velocity and pressure shape functions on the other side of an interface. This is not entirely true, though close: in fact, the exact form of the interface term only those pressure displacement shape functions that are indeed nonzero on the common interface, which is not true for all shape functions; on the other hand, it really couples all velocities (since the integral involves gradients of the velocity shape functions, which are all nonzero on all faces of the cell). However, the mask we build above, is not capable of these subtleties. Nevertheless, through these masks we manage to get the number of sparsity pattern entries down to 21,028 \\u2014 good enough for now.\\nVelocity boundary conditions on the interface\\nThe second difficulty is that while we know how to enforce a zero velocity or stress on the external boundary (using VectorTools::interpolate_boundary_values, called with an appropriate component mask and setting different boundary indicators for solid and fluid external boundaries), we now also needed the velocity to be zero on the interior interface, i.e. \\\\(\\\\mathbf v|_{\\\\Gamma_i}=0\\\\). At the time of writing this, there is no function in deal.II that handles this part, but it isn't particularly difficult to implement by hand: essentially, we just have to loop over all cells, and if it is a fluid cell and its neighbor is a solid cell, then add constraints that ensure that the velocity degrees of freedom on this face are zero. Some care is necessary to deal with the case that the adjacent solid cell is refined, yielding the following code: std::vector<unsigned int> local_face_dof_indices (stokes_fe.dofs_per_face);\\nfor (const auto &cell: dof_handler.active_cell_iterators())\\n  if (cell_is_in_fluid_domain (cell))\\n    for (const auto f : cell->face_indices())\\n      if (!cell->at_boundary(f))\\n        {\\n bool face_is_on_interface = false;\\n \\n if ((cell->neighbor(f)->has_children() == false)\\n                  &&\\n                  (cell_is_in_solid_domain (cell->neighbor(f))))\\n                face_is_on_interface = true;\\n else if (cell->neighbor(f)->has_children() == true)\\n                {\\n // The neighbor does have children. See if any of the cells\\n // on the other side are elastic\\n for (unsigned int sf=0; sf<cell->face(f)->n_children(); ++sf)\\n if (cell_is_in_solid_domain (cell->neighbor_child_on_subface(f, sf)))\\n                      {\\n                   face_is_on_interface = true;\\n break;\\n                      }\\n                }\\n \\n if (face_is_on_interface)\\n           {\\n             cell->face(f)->get_dof_indices (local_face_dof_indices, 0);\\n for (unsigned int i=0; i<local_face_dof_indices.size(); ++i)\\n if (stokes_fe.face_system_to_component_index(i).first < dim)\\n               constraints.constrain_dof_to_zero (local_face_dof_indices[i]);\\n           }\\n        }\\nThe last line adds the constraint xlocal_face_dof_indices[i]=0, which is exactly what we need in the current context. The call to FiniteElement::face_system_to_component_index() makes sure that we only set boundary values to zero for velocity but not pressure components.\\nNote that there are cases where this may yield incorrect results: notably, once we find a solid neighbor child to a current fluid cell, we assume that all neighbor children on the common face are in the solid subdomain. But that need not be so; consider, for example, the following mesh: +---------+----+----+\\n|         | f  |    |\\n|    f    +----+----+\\n|         | s  |    |\\n+---------+----+----+\\nIn this case, we would set all velocity degrees of freedom on the right face of the left cell to zero, which is incorrect for the top degree of freedom on that face. That said, that can only happen if the fluid and solid subdomains do not coincide with a set of complete coarse mesh cells \\u2014 but this is a contradiction to the assumption stated at the end of the first section of this introduction.\\nThe testcase\\nWe will consider the following situation as a testcase:\\n\\nAs discussed at the top of this document, we need to assume in a few places that a cell is either entirely in the fluid or solid part of the domain and, furthermore, that all children of an inactive cell also belong to the same subdomain. This can definitely be ensured if the coarse mesh already subdivides the mesh into solid and fluid coarse mesh cells; given the geometry outlined above, we can do that by using an \\\\(8\\\\times 8\\\\) coarse mesh, conveniently provided by the GridGenerator::subdivided_hyper_rectangle function.\\nThe fixed boundary at the bottom implies \\\\(\\\\mathbf u=0\\\\), and we also prescribe Dirichlet conditions for the flow at the top so that we get inflow at the left and outflow at the right. At the left and right boundaries, no boundary conditions are imposed explicitly for the flow, yielding the implicit no-stress condition  \\\\((2\\\\eta\\n\\\\varepsilon(\\\\mathbf v) - p \\\\mathbf 1) \\\\cdot \\\\mathbf n = 0\\\\). The conditions on the interface between the two domains has already been discussed above.\\nFor simplicity, we choose the material parameters to be \\\\(\\\\eta=\\\\lambda=\\\\mu=1\\\\). In the results section below, we will also show a 3d simulation that can be obtained from the same program. The boundary conditions and geometry are defined nearly analogously to the 2d situation above.\\nIdentifying which subdomain a cell is in\\nIn the program, we need a way to identify which part of the domain a cell is in. There are many different ways of doing this. A typical way would be to use the subdomain_id tag available with each cell, though this field has a special meaning in parallel computations. An alternative is the material_id field also available with every cell. It has the additional advantage that it is inherited from the mother to the child cell upon mesh refinement; in other words, we would set the material id once upon creating the mesh and it will be correct for all active cells even after several refinement cycles. We therefore go with this alternative: we define an enum with symbolic names for material_id numbers and will use them to identify which part of the domain a cell is on.\\nSecondly, we use an object of type DoFHandler operating in hp-mode. This class needs to know which cells will use the Stokes and which the elasticity finite element. At the beginning of each refinement cycle we will therefore have to walk over all cells and set the (in hp-parlance) active FE index to whatever is appropriate in the current situation. While we can use symbolic names for the material id, the active FE index is in fact a number that will frequently be used to index into collections of objects (e.g. of type hp::FECollection and hp::QCollection); that means that the active FE index actually has to have value zero for the fluid and one for the elastic part of the domain.\\nLinear solvers\\nThis program is primarily intended to show how to deal with different physics in different parts of the domain, and how to implement such models in deal.II. As a consequence, we won't bother coming up with a good solver: we'll just use the SparseDirectUMFPACK class which always works, even if not with optimal complexity. We will, however, comment on possible other solvers in the results section.\\nMesh refinement\\nOne of the trickier aspects of this program is how to estimate the error. Because it works on almost any program, we'd like to use the KellyErrorEstimator, and we can relatively easily do that here as well using code like the following: Vector<float> stokes_estimated_error_per_cell (triangulation.n_active_cells());\\nVector<float> elasticity_estimated_error_per_cell (triangulation.n_active_cells());\\n \\nstd::vector<bool> stokes_component_mask (dim+1+dim, false);\\nfor (unsigned int d=0; d<dim; ++d)\\n  stokes_component_mask[d] = true;\\nKellyErrorEstimator<dim>::estimate (dof_handler,\\n                                    face_q_collection,\\n                                    std::map<types::boundary_id, const Function<dim>*>(),\\n                                    solution,\\n                                    stokes_estimated_error_per_cell,\\n                                    stokes_component_mask);\\n \\nstd::vector<bool> elasticity_component_mask (dim+1+dim, false);\\nfor (unsigned int d=0; d<dim; ++d)\\n  elasticity_component_mask[dim+1+d] = true;\\nKellyErrorEstimator<dim>::estimate (dof_handler,\\n                                    face_q_collection,\\n                                    std::map<types::boundary_id, const Function<dim>*>(),\\n                                    solution,\\n                                    elasticity_estimated_error_per_cell,\\n                                    elasticity_component_mask);\\nFunctionDefinition function.h:152\\nKellyErrorEstimator::estimatestatic void estimate(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim - 1 > &quadrature, const std::map< types::boundary_id, const Function< spacedim, Number > * > &neumann_bc, const ReadVector< Number > &solution, Vector< float > &error, const ComponentMask &component_mask={}, const Function< spacedim > *coefficients=nullptr, const unsigned int n_threads=numbers::invalid_unsigned_int, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id, const types::material_id material_id=numbers::invalid_material_id, const Strategy strategy=cell_diameter_over_24)\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nVectorDefinition vector.h:120\\nunsigned int\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n This gives us two sets of error indicators for each cell. We would then somehow combine them into one for mesh refinement, for example using something like the following (note that we normalize the squared error indicator in the two vectors because error quantities have physical units that do not match in the current situation, leading to error indicators that may differ by orders of magnitude between the two subdomains): stokes_estimated_error_per_cell /= stokes_estimated_error_per_cell.l2_norm();\\nelasticity_estimated_error_per_cell /= elasticity_estimated_error_per_cell.l2_norm();\\n \\nVector<float> estimated_error_per_cell (triangulation.n_active_cells());\\nestimated_error_per_cell += stokes_estimated_error_per_cell;\\nestimated_error_per_cell += elasticity_estimated_error_per_cell;\\n (In the code, we actually weigh the error indicators 4:1 in favor of the ones computed on the Stokes subdomain since refinement is otherwise heavily biased towards the elastic subdomain, but this is just a technicality. The factor 4 has been determined heuristically to work reasonably well.)\\nWhile this principle is sound, it doesn't quite work as expected. The reason is that the KellyErrorEstimator class computes error indicators by integrating the jump in the solution's gradient around the faces of each cell. This jump is likely to be very large at the locations where the solution is discontinuous and extended by zero; it also doesn't become smaller as the mesh is refined. The KellyErrorEstimator class can't just ignore the interface because it essentially only sees a DoFHandler in hp-mode where the element type changes from one cell to another \\u2014 precisely the thing that the hp-mode was designed for, the interface in the current program looks no different than the interfaces in step-27, for example, and certainly no less legitimate. Be that as it may, the end results is that there is a layer of cells on both sides of the interface between the two subdomains where error indicators are irrationally large. Consequently, most of the mesh refinement is focused on the interface.\\nThis clearly wouldn't happen if we had a refinement indicator that actually understood something about the problem and simply ignore the interface between subdomains when integrating jump terms. On the other hand, this program is about showing how to represent problems where we have different physics in different subdomains, not about the peculiarities of the KellyErrorEstimator, and so we resort to the big hammer called \\\"heuristics\\\": we simply set the error indicators of cells at the interface to zero. This cuts off the spikes in the error indicators. At first sight one would also think that it prevents the mesh from being refined at the interface, but the requirement that neighboring cells may only differ by one level of refinement will still lead to a reasonably refined mesh.\\nWhile this is clearly a suboptimal solution, it works for now and leaves room for future improvement.\\n The commented program\\n Include files\\nThe include files for this program are the same as for many others before. The only new one is the one that declares FE_Nothing as discussed in the introduction. The ones in the hp directory have already been discussed in step-27.\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 #include <deal.II/base/utilities.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/sparse_direct.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 #include <deal.II/grid/grid_refinement.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 #include <deal.II/fe/fe_nothing.h>\\n\\u00a0 #include <deal.II/fe/fe_system.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/hp/fe_collection.h>\\n\\u00a0 #include <deal.II/hp/fe_values.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 #include <deal.II/numerics/error_estimator.h>\\n\\u00a0 \\n\\u00a0 #include <iostream>\\n\\u00a0 #include <fstream>\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 namespace Step46\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\nhpDefinition hp.h:117\\n The FluidStructureProblem class template\\nThis is the main class. It is, if you want, a combination of step-8 and step-22 in that it has member variables that either address the global problem (the Triangulation and DoFHandler objects, as well as the hp::FECollection and various linear algebra objects) or that pertain to either the elasticity or Stokes sub-problems. The general structure of the class, however, is like that of most of the other programs implementing stationary problems.\\nThere are a few helper functions (cell_is_in_fluid_domain, cell_is_in_solid_domain) of self-explanatory nature (operating on the symbolic names for the two subdomains that will be used as material_ids for cells belonging to the subdomains, as explained in the introduction) and a few functions (make_grid, set_active_fe_indices, assemble_interface_terms) that have been broken out of other functions that can be found in many of the other tutorial programs and that will be discussed as we get to their implementation.\\nThe final set of variables (viscosity, lambda, eta) describes the material properties used for the two physics models.\\n\\u00a0   template <int dim>\\n\\u00a0   class FluidStructureProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     FluidStructureProblem(const unsigned int stokes_degree,\\n\\u00a0                           const unsigned int elasticity_degree);\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     enum\\n\\u00a0     {\\n\\u00a0       fluid_domain_id,\\n\\u00a0       solid_domain_id\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     static bool cell_is_in_fluid_domain(\\n\\u00a0       const typename DoFHandler<dim>::cell_iterator &cell);\\n\\u00a0 \\n\\u00a0     static bool cell_is_in_solid_domain(\\n\\u00a0       const typename DoFHandler<dim>::cell_iterator &cell);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     void make_grid();\\n\\u00a0     void set_active_fe_indices();\\n\\u00a0     void setup_dofs();\\n\\u00a0     void assemble_system();\\n\\u00a0     void assemble_interface_term(\\n\\u00a0       const FEFaceValuesBase<dim>          &elasticity_fe_face_values,\\n\\u00a0       const FEFaceValuesBase<dim>          &stokes_fe_face_values,\\n\\u00a0       std::vector<Tensor<1, dim>>          &elasticity_phi,\\n\\u00a0       std::vector<SymmetricTensor<2, dim>> &stokes_symgrad_phi_u,\\n\\u00a0       std::vector<double>                  &stokes_phi_p,\\n\\u00a0       FullMatrix<double>                   &local_interface_matrix) const;\\n\\u00a0     void solve();\\n\\u00a0     void output_results(const unsigned int refinement_cycle) const;\\n\\u00a0     void refine_mesh();\\n\\u00a0 \\n\\u00a0     const unsigned int stokes_degree;\\n\\u00a0     const unsigned int elasticity_degree;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     const FESystem<dim>   stokes_fe;\\n\\u00a0     const FESystem<dim>   elasticity_fe;\\n\\u00a0     hp::FECollection<dim> fe_collection;\\n\\u00a0     DoFHandler<dim>       dof_handler;\\n\\u00a0 \\n\\u00a0     AffineConstraints<double> constraints;\\n\\u00a0 \\n\\u00a0     SparsityPattern      sparsity_pattern;\\n\\u00a0     SparseMatrix<double> system_matrix;\\n\\u00a0 \\n\\u00a0     Vector<double> solution;\\n\\u00a0     Vector<double> system_rhs;\\n\\u00a0 \\n\\u00a0     const double viscosity;\\n\\u00a0     const double lambda;\\n\\u00a0     const double mu;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nDoFHandlerDefinition dof_handler.h:317\\nFEFaceValuesBaseDefinition fe_values.h:202\\nFullMatrixDefinition full_matrix.h:79\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nSymmetricTensorDefinition symmetric_tensor.h:719\\nTensorDefinition tensor.h:471\\nTriangulationDefinition tria.h:1323\\nhp::FECollectionDefinition fe_collection.h:61\\nDoFHandler::cell_iteratortypename ActiveSelector::cell_iterator cell_iteratorDefinition dof_handler.h:468\\n Boundary values and right hand side\\nThe following class does as its name suggests. The boundary values for the velocity are \\\\(\\\\mathbf u=(0, \\\\sin(\\\\pi x))^T\\\\) in 2d and  \\\\(\\\\mathbf u=(0,\\n   0, \\\\sin(\\\\pi x)\\\\sin(\\\\pi y))^T\\\\) in 3d, respectively. The remaining boundary conditions for this problem are all homogeneous and have been discussed in the introduction. The right hand side forcing term is zero for both the fluid and the solid so we don't need an extra class for it.\\n\\u00a0   template <int dim>\\n\\u00a0   class StokesBoundaryValues : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     StokesBoundaryValues()\\n\\u00a0       : Function<dim>(dim + 1 + dim)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override;\\n\\u00a0 \\n\\u00a0     virtual void vector_value(const Point<dim> &p,\\n\\u00a0                               Vector<double>   &value) const override;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   double StokesBoundaryValues<dim>::value(const Point<dim>  &p,\\n\\u00a0                                           const unsigned int component) const\\n\\u00a0   {\\n\\u00a0     Assert(component < this->n_components,\\n\\u00a0            ExcIndexRange(component, 0, this->n_components));\\n\\u00a0 \\n\\u00a0     if (component == dim - 1)\\n\\u00a0       switch (dim)\\n\\u00a0         {\\n\\u00a0           case 2:\\n\\u00a0             return std::sin(numbers::PI * p[0]);\\n\\u00a0           case 3:\\n\\u00a0             return std::sin(numbers::PI * p[0]) * std::sin(numbers::PI * p[1]);\\n\\u00a0           default:\\n\\u00a0             DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0         }\\n\\u00a0 \\n\\u00a0     return 0;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void StokesBoundaryValues<dim>::vector_value(const Point<dim> &p,\\n\\u00a0                                                Vector<double>   &values) const\\n\\u00a0   {\\n\\u00a0     for (unsigned int c = 0; c < this->n_components; ++c)\\n\\u00a0       values(c) = StokesBoundaryValues<dim>::value(p, c);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const\\nFunction::vector_valuevirtual void vector_value(const Point< dim > &p, Vector< RangeNumberType > &values) const\\nPointDefinition point.h:111\\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\nDEAL_II_NOT_IMPLEMENTED#define DEAL_II_NOT_IMPLEMENTED()Definition exceptions.h:1814\\nnumbers::PIstatic constexpr double PIDefinition numbers.h:259\\nstd::sin::VectorizedArray< Number, width > sin(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6589\\n The FluidStructureProblem implementation\\n Constructors and helper functions\\nLet's now get to the implementation of the primary class of this program. The first few functions are the constructor and the helper functions that can be used to determine which part of the domain a cell is in. Given the discussion of these topics in the introduction, their implementation is rather obvious. In the constructor, note that we have to construct the hp::FECollection object from the base elements for Stokes and elasticity; using the hp::FECollection::push_back function assigns them spots zero and one in this collection, an order that we have to remember and use consistently in the rest of the program.\\n\\u00a0   template <int dim>\\n\\u00a0   FluidStructureProblem<dim>::FluidStructureProblem(\\n\\u00a0     const unsigned int stokes_degree,\\n\\u00a0     const unsigned int elasticity_degree)\\n\\u00a0     : stokes_degree(stokes_degree)\\n\\u00a0     , elasticity_degree(elasticity_degree)\\n\\u00a0     , triangulation(Triangulation<dim>::maximum_smoothing)\\n\\u00a0     , stokes_fe(FE_Q<dim>(stokes_degree + 1) ^ dim,     // fluid velocity\\n\\u00a0                 FE_Q<dim>(stokes_degree),               // fluid pressure\\n\\u00a0                 FE_Nothing<dim>() ^ dim)                // solid displacement\\n\\u00a0     , elasticity_fe(FE_Nothing<dim>() ^ dim,            // fluid velocity\\n\\u00a0                     FE_Nothing<dim>(),                  // fluid pressure\\n\\u00a0                     FE_Q<dim>(elasticity_degree) ^ dim) // solid displacement\\n\\u00a0     , dof_handler(triangulation)\\n\\u00a0     , viscosity(2)\\n\\u00a0     , lambda(1)\\n\\u00a0     , mu(1)\\n\\u00a0   {\\n\\u00a0     fe_collection.push_back(stokes_fe);\\n\\u00a0     fe_collection.push_back(elasticity_fe);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   bool FluidStructureProblem<dim>::cell_is_in_fluid_domain(\\n\\u00a0     const typename DoFHandler<dim>::cell_iterator &cell)\\n\\u00a0   {\\n\\u00a0     return (cell->material_id() == fluid_domain_id);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   bool FluidStructureProblem<dim>::cell_is_in_solid_domain(\\n\\u00a0     const typename DoFHandler<dim>::cell_iterator &cell)\\n\\u00a0   {\\n\\u00a0     return (cell->material_id() == solid_domain_id);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n Meshes and assigning subdomains\\nThe next pair of functions deals with generating a mesh and making sure all flags that denote subdomains are correct. make_grid, as discussed in the introduction, generates an \\\\(8\\\\times 8\\\\) mesh (or an \\\\(8\\\\times 8\\\\times 8\\\\) mesh in 3d) to make sure that each coarse mesh cell is completely within one of the subdomains. After generating this mesh, we loop over its boundary and set the boundary indicator to one at the top boundary, the only place where we set nonzero Dirichlet boundary conditions. After this, we loop again over all cells to set the material indicator \\u2014 used to denote which part of the domain we are in, to either the fluid or solid indicator.\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::make_grid()\\n\\u00a0   {\\n\\u00a0     GridGenerator::subdivided_hyper_cube(triangulation, 8, -1, 1);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : triangulation.active_cell_iterators())\\n\\u00a0       for (const auto &face : cell->face_iterators())\\n\\u00a0         if (face->at_boundary() && (face->center()[dim - 1] == 1))\\n\\u00a0           face->set_all_boundary_ids(1);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       if (((std::fabs(cell->center()[0]) < 0.25) &&\\n\\u00a0            (cell->center()[dim - 1] > 0.5)) ||\\n\\u00a0           ((std::fabs(cell->center()[0]) >= 0.25) &&\\n\\u00a0            (cell->center()[dim - 1] > -0.5)))\\n\\u00a0         cell->set_material_id(fluid_domain_id);\\n\\u00a0       else\\n\\u00a0         cell->set_material_id(solid_domain_id);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\ncenterPoint< 3 > centerDefinition data_out_base.cc:267\\nGridGenerator::subdivided_hyper_cubevoid subdivided_hyper_cube(Triangulation< dim, spacedim > &tria, const unsigned int repetitions, const double left=0., const double right=1., const bool colorize=false)\\nstdSTL namespace.\\nThe second part of this pair of functions determines which finite element to use on each cell. Above we have set the material indicator for each coarse mesh cell, and as mentioned in the introduction, this information is inherited from mother to child cell upon mesh refinement.\\nIn other words, whenever we have refined (or created) the mesh, we can rely on the material indicators to be a correct description of which part of the domain a cell is in. We then use this to set the active FE index of the cell to the corresponding element of the hp::FECollection member variable of this class: zero for fluid cells, one for solid cells.\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::set_active_fe_indices()\\n\\u00a0   {\\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         if (cell_is_in_fluid_domain(cell))\\n\\u00a0           cell->set_active_fe_index(0);\\n\\u00a0         else if (cell_is_in_solid_domain(cell))\\n\\u00a0           cell->set_active_fe_index(1);\\n\\u00a0         else\\n\\u00a0           DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n FluidStructureProblem::setup_dofs\\nThe next step is to set up the data structures for the linear system. To this end, we first have to set the active FE indices with the function immediately above, then distribute degrees of freedom, and then determine constraints on the linear system. The latter includes hanging node constraints as usual, but also the inhomogeneous boundary values at the top fluid boundary, and zero boundary values along the perimeter of the solid subdomain.\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::setup_dofs()\\n\\u00a0   {\\n\\u00a0     set_active_fe_indices();\\n\\u00a0     dof_handler.distribute_dofs(fe_collection);\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       constraints.clear();\\n\\u00a0       DoFTools::make_hanging_node_constraints(dof_handler, constraints);\\n\\u00a0 \\n\\u00a0       const FEValuesExtractors::Vector velocities(0);\\n\\u00a0       VectorTools::interpolate_boundary_values(dof_handler,\\n\\u00a0                                                1,\\n\\u00a0                                                StokesBoundaryValues<dim>(),\\n\\u00a0                                                constraints,\\n\\u00a0                                                fe_collection.component_mask(\\n\\u00a0                                                  velocities));\\n\\u00a0 \\n\\u00a0       const FEValuesExtractors::Vector displacements(dim + 1);\\n\\u00a0       VectorTools::interpolate_boundary_values(\\n\\u00a0         dof_handler,\\n\\u00a0         0,\\n\\u00a0         Functions::ZeroFunction<dim>(dim + 1 + dim),\\n\\u00a0         constraints,\\n\\u00a0         fe_collection.component_mask(displacements));\\n\\u00a0     }\\n\\u00a0 \\nFunctions::ZeroFunctionDefinition function.h:510\\nDoFTools::make_hanging_node_constraintsvoid make_hanging_node_constraints(const DoFHandler< dim, spacedim > &dof_handler, AffineConstraints< number > &constraints)Definition dof_tools_constraints.cc:3073\\nVectorTools::interpolate_boundary_valuesvoid interpolate_boundary_values(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const std::map< types::boundary_id, const Function< spacedim, number > * > &function_map, std::map< types::global_dof_index, number > &boundary_values, const ComponentMask &component_mask={})\\nFEValuesExtractors::VectorDefinition fe_values_extractors.h:150\\nThere are more constraints we have to handle, though: we have to make sure that the velocity is zero at the interface between fluid and solid. The following piece of code was already presented in the introduction:\\n\\u00a0     {\\n\\u00a0       std::vector<types::global_dof_index> local_face_dof_indices(\\n\\u00a0         stokes_fe.n_dofs_per_face());\\n\\u00a0       for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0         if (cell_is_in_fluid_domain(cell))\\n\\u00a0           for (const auto face_no : cell->face_indices())\\n\\u00a0             if (cell->face(face_no)->at_boundary() == false)\\n\\u00a0               {\\n\\u00a0                 bool face_is_on_interface = false;\\n\\u00a0 \\n\\u00a0                 if ((cell->neighbor(face_no)->has_children() == false) &&\\n\\u00a0                     (cell_is_in_solid_domain(cell->neighbor(face_no))))\\n\\u00a0                   face_is_on_interface = true;\\n\\u00a0                 else if (cell->neighbor(face_no)->has_children() == true)\\n\\u00a0                   {\\n\\u00a0                     for (unsigned int sf = 0;\\n\\u00a0                          sf < cell->face(face_no)->n_children();\\n\\u00a0                          ++sf)\\n\\u00a0                       if (cell_is_in_solid_domain(\\n\\u00a0                             cell->neighbor_child_on_subface(face_no, sf)))\\n\\u00a0                         {\\n\\u00a0                           face_is_on_interface = true;\\n\\u00a0                           break;\\n\\u00a0                         }\\n\\u00a0                   }\\n\\u00a0 \\n\\u00a0                 if (face_is_on_interface)\\n\\u00a0                   {\\n\\u00a0                     cell->face(face_no)->get_dof_indices(local_face_dof_indices,\\n\\u00a0                                                          0);\\n\\u00a0                     for (unsigned int i = 0; i < local_face_dof_indices.size();\\n\\u00a0                          ++i)\\n\\u00a0                       if (stokes_fe.face_system_to_component_index(i).first <\\n\\u00a0                           dim)\\n\\u00a0                         constraints.constrain_dof_to_zero(\\n\\u00a0                           local_face_dof_indices[i]);\\n\\u00a0                   }\\n\\u00a0               }\\n\\u00a0     }\\n\\u00a0 \\nbool\\nAt the end of all this, we can declare to the constraints object that we now have all constraints ready to go and that the object can rebuild its internal data structures for better efficiency:\\n\\u00a0     constraints.close();\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << std::endl\\n\\u00a0               << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n\\u00a0               << std::endl;\\n\\u00a0 \\nIn the rest of this function we create a sparsity pattern as discussed extensively in the introduction, and use it to initialize the matrix; then also set vectors to their correct sizes:\\n\\u00a0     {\\n\\u00a0       DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n\\u00a0 \\n\\u00a0       Table<2, DoFTools::Coupling> cell_coupling(fe_collection.n_components(),\\n\\u00a0                                                  fe_collection.n_components());\\n\\u00a0       Table<2, DoFTools::Coupling> face_coupling(fe_collection.n_components(),\\n\\u00a0                                                  fe_collection.n_components());\\n\\u00a0 \\n\\u00a0       for (unsigned int c = 0; c < fe_collection.n_components(); ++c)\\n\\u00a0         for (unsigned int d = 0; d < fe_collection.n_components(); ++d)\\n\\u00a0           {\\n\\u00a0             if (((c < dim + 1) && (d < dim + 1) &&\\n\\u00a0                  !((c == dim) && (d == dim))) ||\\n\\u00a0                 ((c >= dim + 1) && (d >= dim + 1)))\\n\\u00a0               cell_coupling[c][d] = DoFTools::always;\\n\\u00a0 \\n\\u00a0             if ((c >= dim + 1) && (d < dim + 1))\\n\\u00a0               face_coupling[c][d] = DoFTools::always;\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0       DoFTools::make_flux_sparsity_pattern(dof_handler,\\n\\u00a0                                            dsp,\\n\\u00a0                                            cell_coupling,\\n\\u00a0                                            face_coupling);\\n\\u00a0       constraints.condense(dsp);\\n\\u00a0       sparsity_pattern.copy_from(dsp);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     system_matrix.reinit(sparsity_pattern);\\n\\u00a0 \\n\\u00a0     solution.reinit(dof_handler.n_dofs());\\n\\u00a0     system_rhs.reinit(dof_handler.n_dofs());\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nDoFTools::make_flux_sparsity_patternvoid make_flux_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern)Definition dof_tools_sparsity.cc:697\\n FluidStructureProblem::assemble_system\\nFollowing is the central function of this program: the one that assembles the linear system. It has a long section of setting up auxiliary functions at the beginning: from creating the quadrature formulas and setting up the FEValues, FEFaceValues and FESubfaceValues objects necessary to integrate the cell terms as well as the interface terms for the case where cells along the interface come together at same size or with differing levels of refinement...\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::assemble_system()\\n\\u00a0   {\\n\\u00a0     system_matrix = 0;\\n\\u00a0     system_rhs    = 0;\\n\\u00a0 \\n\\u00a0     const QGauss<dim> stokes_quadrature(stokes_degree + 2);\\n\\u00a0     const QGauss<dim> elasticity_quadrature(elasticity_degree + 2);\\n\\u00a0 \\n\\u00a0     hp::QCollection<dim> q_collection;\\n\\u00a0     q_collection.push_back(stokes_quadrature);\\n\\u00a0     q_collection.push_back(elasticity_quadrature);\\n\\u00a0 \\n\\u00a0     hp::FEValues<dim> hp_fe_values(fe_collection,\\n\\u00a0                                    q_collection,\\n\\u00a0                                    update_values | update_quadrature_points |\\n\\u00a0                                      update_JxW_values | update_gradients);\\n\\u00a0 \\n\\u00a0     const QGauss<dim - 1> common_face_quadrature(\\n\\u00a0       std::max(stokes_degree + 2, elasticity_degree + 2));\\n\\u00a0 \\n\\u00a0     FEFaceValues<dim>    stokes_fe_face_values(stokes_fe,\\n\\u00a0                                             common_face_quadrature,\\n\\u00a0                                             update_JxW_values |\\n\\u00a0                                               update_gradients | update_values);\\n\\u00a0     FEFaceValues<dim>    elasticity_fe_face_values(elasticity_fe,\\n\\u00a0                                                 common_face_quadrature,\\n\\u00a0                                                 update_normal_vectors |\\n\\u00a0                                                   update_values);\\n\\u00a0     FESubfaceValues<dim> stokes_fe_subface_values(stokes_fe,\\n\\u00a0                                                   common_face_quadrature,\\n\\u00a0                                                   update_JxW_values |\\n\\u00a0                                                     update_gradients |\\n\\u00a0                                                     update_values);\\n\\u00a0     FESubfaceValues<dim> elasticity_fe_subface_values(elasticity_fe,\\n\\u00a0                                                       common_face_quadrature,\\n\\u00a0                                                       update_normal_vectors |\\n\\u00a0                                                         update_values);\\n\\u00a0 \\nFEFaceValuesDefinition fe_values.h:322\\nFESubfaceValuesDefinition fe_values.h:488\\nQGaussDefinition quadrature_lib.h:40\\nhp::FEValuesDefinition fe_values.h:315\\nhp::QCollectionDefinition vector_tools_rhs.h:42\\nhp::QCollection::push_backvoid push_back(const Quadrature< dim_in > &new_quadrature)Definition q_collection.h:215\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_normal_vectors@ update_normal_vectorsNormal vectors.Definition fe_update_flags.h:141\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nstd::max::VectorizedArray< Number, width > max(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6943\\n...to objects that are needed to describe the local contributions to the global linear system...\\n\\u00a0     const unsigned int stokes_dofs_per_cell = stokes_fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int elasticity_dofs_per_cell =\\n\\u00a0       elasticity_fe.n_dofs_per_cell();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> local_matrix;\\n\\u00a0     FullMatrix<double> local_interface_matrix(elasticity_dofs_per_cell,\\n\\u00a0                                               stokes_dofs_per_cell);\\n\\u00a0     Vector<double>     local_rhs;\\n\\u00a0 \\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices;\\n\\u00a0     std::vector<types::global_dof_index> neighbor_dof_indices(\\n\\u00a0       stokes_dofs_per_cell);\\n\\u00a0 \\n\\u00a0     const Functions::ZeroFunction<dim> right_hand_side(dim + 1);\\n\\u00a0 \\n...to variables that allow us to extract certain components of the shape functions and cache their values rather than having to recompute them at every quadrature point:\\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0     const FEValuesExtractors::Scalar pressure(dim);\\n\\u00a0     const FEValuesExtractors::Vector displacements(dim + 1);\\n\\u00a0 \\n\\u00a0     std::vector<SymmetricTensor<2, dim>> stokes_symgrad_phi_u(\\n\\u00a0       stokes_dofs_per_cell);\\n\\u00a0     std::vector<double> stokes_div_phi_u(stokes_dofs_per_cell);\\n\\u00a0     std::vector<double> stokes_phi_p(stokes_dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<Tensor<2, dim>> elasticity_grad_phi(elasticity_dofs_per_cell);\\n\\u00a0     std::vector<double>         elasticity_div_phi(elasticity_dofs_per_cell);\\n\\u00a0     std::vector<Tensor<1, dim>> elasticity_phi(elasticity_dofs_per_cell);\\n\\u00a0 \\nFEValuesExtractors::ScalarDefinition fe_values_extractors.h:95\\nThen comes the main loop over all cells and, as in step-27, the initialization of the hp::FEValues object for the current cell and the extraction of a FEValues object that is appropriate for the current cell:\\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         hp_fe_values.reinit(cell);\\n\\u00a0 \\n\\u00a0         const FEValues<dim> &fe_values = hp_fe_values.get_present_fe_values();\\n\\u00a0 \\n\\u00a0         local_matrix.reinit(cell->get_fe().n_dofs_per_cell(),\\n\\u00a0                             cell->get_fe().n_dofs_per_cell());\\n\\u00a0         local_rhs.reinit(cell->get_fe().n_dofs_per_cell());\\n\\u00a0 \\nFEValuesDefinition fe_values.h:63\\nFEValues::get_present_fe_valuesconst FEValues< dim, spacedim > & get_present_fe_values() const\\nFEValues::reinitvoid reinit(const TriaIterator< DoFCellAccessor< dim, spacedim, level_dof_access > > &cell)\\nWith all of this done, we continue to assemble the cell terms for cells that are part of the Stokes and elastic regions. While we could in principle do this in one formula, in effect implementing the one bilinear form stated in the introduction, we realize that our finite element spaces are chosen in such a way that on each cell, one set of variables (either velocities and pressure, or displacements) are always zero, and consequently a more efficient way of computing local integrals is to do only what's necessary based on an if clause that tests which part of the domain we are in.\\nThe actual computation of the local matrix is the same as in step-22 as well as that given in the Handling vector valued problems documentation topic for the elasticity equations:\\n\\u00a0         if (cell_is_in_fluid_domain(cell))\\n\\u00a0           {\\n\\u00a0             const unsigned int dofs_per_cell = cell->get_fe().n_dofs_per_cell();\\n\\u00a0             Assert(dofs_per_cell == stokes_dofs_per_cell, ExcInternalError());\\n\\u00a0 \\n\\u00a0             for (unsigned int q = 0; q < fe_values.n_quadrature_points; ++q)\\n\\u00a0               {\\n\\u00a0                 for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n\\u00a0                   {\\n\\u00a0                     stokes_symgrad_phi_u[k] =\\n\\u00a0                       fe_values[velocities].symmetric_gradient(k, q);\\n\\u00a0                     stokes_div_phi_u[k] =\\n\\u00a0                       fe_values[velocities].divergence(k, q);\\n\\u00a0                     stokes_phi_p[k] = fe_values[pressure].value(k, q);\\n\\u00a0                   }\\n\\u00a0 \\n\\u00a0                 for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0                   for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                     local_matrix(i, j) +=\\n\\u00a0                       (2 * viscosity * stokes_symgrad_phi_u[i] *\\n\\u00a0                          stokes_symgrad_phi_u[j] -\\n\\u00a0                        stokes_div_phi_u[i] * stokes_phi_p[j] -\\n\\u00a0                        stokes_phi_p[i] * stokes_div_phi_u[j]) *\\n\\u00a0                       fe_values.JxW(q);\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0         else\\n\\u00a0           {\\n\\u00a0             const unsigned int dofs_per_cell = cell->get_fe().n_dofs_per_cell();\\n\\u00a0             Assert(dofs_per_cell == elasticity_dofs_per_cell,\\n\\u00a0                    ExcInternalError());\\n\\u00a0 \\n\\u00a0             for (unsigned int q = 0; q < fe_values.n_quadrature_points; ++q)\\n\\u00a0               {\\n\\u00a0                 for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n\\u00a0                   {\\n\\u00a0                     elasticity_grad_phi[k] =\\n\\u00a0                       fe_values[displacements].gradient(k, q);\\n\\u00a0                     elasticity_div_phi[k] =\\n\\u00a0                       fe_values[displacements].divergence(k, q);\\n\\u00a0                   }\\n\\u00a0 \\n\\u00a0                 for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0                   for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                     {\\n\\u00a0                       local_matrix(i, j) +=\\n\\u00a0                         (lambda * elasticity_div_phi[i] *\\n\\u00a0                            elasticity_div_phi[j] +\\n\\u00a0                          mu * scalar_product(elasticity_grad_phi[i],\\n\\u00a0                                              elasticity_grad_phi[j]) +\\n\\u00a0                          mu *\\n\\u00a0                            scalar_product(elasticity_grad_phi[i],\\n\\u00a0                                           transpose(elasticity_grad_phi[j]))) *\\n\\u00a0                         fe_values.JxW(q);\\n\\u00a0                     }\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0 \\ntransposeDerivativeForm< 1, spacedim, dim, Number > transpose(const DerivativeForm< 1, dim, spacedim, Number > &DF)Definition derivative_form.h:610\\nOnce we have the contributions from cell integrals, we copy them into the global matrix (taking care of constraints right away, through the AffineConstraints::distribute_local_to_global function). Note that we have not written anything into the local_rhs variable, though we still need to pass it along since the elimination of nonzero boundary values requires the modification of local and consequently also global right hand side values:\\n\\u00a0         local_dof_indices.resize(cell->get_fe().n_dofs_per_cell());\\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0         constraints.distribute_local_to_global(local_matrix,\\n\\u00a0                                                local_rhs,\\n\\u00a0                                                local_dof_indices,\\n\\u00a0                                                system_matrix,\\n\\u00a0                                                system_rhs);\\n\\u00a0 \\nThe more interesting part of this function is where we see about face terms along the interface between the two subdomains. To this end, we first have to make sure that we only assemble them once even though a loop over all faces of all cells would encounter each part of the interface twice. We arbitrarily make the decision that we will only evaluate interface terms if the current cell is part of the solid subdomain and if, consequently, a face is not at the boundary and the potential neighbor behind it is part of the fluid domain. Let's start with these conditions:\\n\\u00a0         if (cell_is_in_solid_domain(cell))\\n\\u00a0           for (const auto f : cell->face_indices())\\n\\u00a0             if (cell->face(f)->at_boundary() == false)\\n\\u00a0               {\\nAt this point we know that the current cell is a candidate for integration and that a neighbor behind face f exists. There are now three possibilities:\\n\\nThe neighbor is at the same refinement level and has no children.\\nThe neighbor has children.\\nThe neighbor is coarser.\\n\\nIn all three cases, we are only interested in it if it is part of the fluid subdomain. So let us start with the first and simplest case: if the neighbor is at the same level, has no children, and is a fluid cell, then the two cells share a boundary that is part of the interface along which we want to integrate interface terms. All we have to do is initialize two FEFaceValues object with the current face and the face of the neighboring cell (note how we find out which face of the neighboring cell borders on the current cell) and pass things off to the function that evaluates the interface terms (the third through fifth arguments to this function provide it with scratch arrays). The result is then again copied into the global matrix, using a function that knows that the DoF indices of rows and columns of the local matrix result from different cells:\\n\\u00a0                 if ((cell->neighbor(f)->level() == cell->level()) &&\\n\\u00a0                     (cell->neighbor(f)->has_children() == false) &&\\n\\u00a0                     cell_is_in_fluid_domain(cell->neighbor(f)))\\n\\u00a0                   {\\n\\u00a0                     elasticity_fe_face_values.reinit(cell, f);\\n\\u00a0                     stokes_fe_face_values.reinit(cell->neighbor(f),\\n\\u00a0                                                  cell->neighbor_of_neighbor(f));\\n\\u00a0 \\n\\u00a0                     assemble_interface_term(elasticity_fe_face_values,\\n\\u00a0                                             stokes_fe_face_values,\\n\\u00a0                                             elasticity_phi,\\n\\u00a0                                             stokes_symgrad_phi_u,\\n\\u00a0                                             stokes_phi_p,\\n\\u00a0                                             local_interface_matrix);\\n\\u00a0 \\n\\u00a0                     cell->neighbor(f)->get_dof_indices(neighbor_dof_indices);\\n\\u00a0                     constraints.distribute_local_to_global(\\n\\u00a0                       local_interface_matrix,\\n\\u00a0                       local_dof_indices,\\n\\u00a0                       neighbor_dof_indices,\\n\\u00a0                       system_matrix);\\n\\u00a0                   }\\n\\u00a0 \\nThe second case is if the neighbor has further children. In that case, we have to loop over all the children of the neighbor to see if they are part of the fluid subdomain. If they are, then we integrate over the common interface, which is a face for the neighbor and a subface of the current cell, requiring us to use an FEFaceValues for the neighbor and an FESubfaceValues for the current cell:\\n\\u00a0                 else if ((cell->neighbor(f)->level() == cell->level()) &&\\n\\u00a0                          (cell->neighbor(f)->has_children() == true))\\n\\u00a0                   {\\n\\u00a0                     for (unsigned int subface = 0;\\n\\u00a0                          subface < cell->face(f)->n_children();\\n\\u00a0                          ++subface)\\n\\u00a0                       if (cell_is_in_fluid_domain(\\n\\u00a0                             cell->neighbor_child_on_subface(f, subface)))\\n\\u00a0                         {\\n\\u00a0                           elasticity_fe_subface_values.reinit(cell, f, subface);\\n\\u00a0                           stokes_fe_face_values.reinit(\\n\\u00a0                             cell->neighbor_child_on_subface(f, subface),\\n\\u00a0                             cell->neighbor_of_neighbor(f));\\n\\u00a0 \\n\\u00a0                           assemble_interface_term(elasticity_fe_subface_values,\\n\\u00a0                                                   stokes_fe_face_values,\\n\\u00a0                                                   elasticity_phi,\\n\\u00a0                                                   stokes_symgrad_phi_u,\\n\\u00a0                                                   stokes_phi_p,\\n\\u00a0                                                   local_interface_matrix);\\n\\u00a0 \\n\\u00a0                           cell->neighbor_child_on_subface(f, subface)\\n\\u00a0                             ->get_dof_indices(neighbor_dof_indices);\\n\\u00a0                           constraints.distribute_local_to_global(\\n\\u00a0                             local_interface_matrix,\\n\\u00a0                             local_dof_indices,\\n\\u00a0                             neighbor_dof_indices,\\n\\u00a0                             system_matrix);\\n\\u00a0                         }\\n\\u00a0                   }\\n\\u00a0 \\nThe last option is that the neighbor is coarser. In that case we have to use an FESubfaceValues object for the neighbor and a FEFaceValues for the current cell; the rest is the same as before:\\n\\u00a0                 else if (cell->neighbor_is_coarser(f) &&\\n\\u00a0                          cell_is_in_fluid_domain(cell->neighbor(f)))\\n\\u00a0                   {\\n\\u00a0                     elasticity_fe_face_values.reinit(cell, f);\\n\\u00a0                     stokes_fe_subface_values.reinit(\\n\\u00a0                       cell->neighbor(f),\\n\\u00a0                       cell->neighbor_of_coarser_neighbor(f).first,\\n\\u00a0                       cell->neighbor_of_coarser_neighbor(f).second);\\n\\u00a0 \\n\\u00a0                     assemble_interface_term(elasticity_fe_face_values,\\n\\u00a0                                             stokes_fe_subface_values,\\n\\u00a0                                             elasticity_phi,\\n\\u00a0                                             stokes_symgrad_phi_u,\\n\\u00a0                                             stokes_phi_p,\\n\\u00a0                                             local_interface_matrix);\\n\\u00a0 \\n\\u00a0                     cell->neighbor(f)->get_dof_indices(neighbor_dof_indices);\\n\\u00a0                     constraints.distribute_local_to_global(\\n\\u00a0                       local_interface_matrix,\\n\\u00a0                       local_dof_indices,\\n\\u00a0                       neighbor_dof_indices,\\n\\u00a0                       system_matrix);\\n\\u00a0                   }\\n\\u00a0               }\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nIn the function that assembles the global system, we passed computing interface terms to a separate function we discuss here. The key is that even though we can't predict the combination of FEFaceValues and FESubfaceValues objects, they are both derived from the FEFaceValuesBase class and consequently we don't have to care: the function is simply called with two such objects denoting the values of the shape functions on the quadrature points of the two sides of the face. We then do what we always do: we fill the scratch arrays with the values of shape functions and their derivatives, and then loop over all entries of the matrix to compute the local integrals. The details of the bilinear form we evaluate here are given in the introduction.\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::assemble_interface_term(\\n\\u00a0     const FEFaceValuesBase<dim>          &elasticity_fe_face_values,\\n\\u00a0     const FEFaceValuesBase<dim>          &stokes_fe_face_values,\\n\\u00a0     std::vector<Tensor<1, dim>>          &elasticity_phi,\\n\\u00a0     std::vector<SymmetricTensor<2, dim>> &stokes_symgrad_phi_u,\\n\\u00a0     std::vector<double>                  &stokes_phi_p,\\n\\u00a0     FullMatrix<double>                   &local_interface_matrix) const\\n\\u00a0   {\\n\\u00a0     Assert(stokes_fe_face_values.n_quadrature_points ==\\n\\u00a0              elasticity_fe_face_values.n_quadrature_points,\\n\\u00a0            ExcInternalError());\\n\\u00a0     const unsigned int n_face_quadrature_points =\\n\\u00a0       elasticity_fe_face_values.n_quadrature_points;\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0     const FEValuesExtractors::Scalar pressure(dim);\\n\\u00a0     const FEValuesExtractors::Vector displacements(dim + 1);\\n\\u00a0 \\n\\u00a0     local_interface_matrix = 0;\\n\\u00a0     for (unsigned int q = 0; q < n_face_quadrature_points; ++q)\\n\\u00a0       {\\n\\u00a0         const Tensor<1, dim> normal_vector =\\n\\u00a0           elasticity_fe_face_values.normal_vector(q);\\n\\u00a0 \\n\\u00a0         for (unsigned int k = 0; k < stokes_fe_face_values.dofs_per_cell; ++k)\\n\\u00a0           {\\n\\u00a0             stokes_symgrad_phi_u[k] =\\n\\u00a0               stokes_fe_face_values[velocities].symmetric_gradient(k, q);\\n\\u00a0             stokes_phi_p[k] = stokes_fe_face_values[pressure].value(k, q);\\n\\u00a0           }\\n\\u00a0         for (unsigned int k = 0; k < elasticity_fe_face_values.dofs_per_cell;\\n\\u00a0              ++k)\\n\\u00a0           elasticity_phi[k] =\\n\\u00a0             elasticity_fe_face_values[displacements].value(k, q);\\n\\u00a0 \\n\\u00a0         for (unsigned int i = 0; i < elasticity_fe_face_values.dofs_per_cell;\\n\\u00a0              ++i)\\n\\u00a0           for (unsigned int j = 0; j < stokes_fe_face_values.dofs_per_cell; ++j)\\n\\u00a0             local_interface_matrix(i, j) +=\\n\\u00a0               -((2 * viscosity * (stokes_symgrad_phi_u[j] * normal_vector) -\\n\\u00a0                  stokes_phi_p[j] * normal_vector) *\\n\\u00a0                 elasticity_phi[i] * stokes_fe_face_values.JxW(q));\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n FluidStructureProblem::solve\\nAs discussed in the introduction, we use a rather trivial solver here: we just pass the linear system off to the SparseDirectUMFPACK direct solver (see, for example, step-29). The only thing we have to do after solving is ensure that hanging node and boundary value constraints are correct.\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     SparseDirectUMFPACK direct_solver;\\n\\u00a0     direct_solver.initialize(system_matrix);\\n\\u00a0     direct_solver.vmult(solution, system_rhs);\\n\\u00a0 \\n\\u00a0     constraints.distribute(solution);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nSparseDirectUMFPACKDefinition sparse_direct.h:92\\nSparseDirectUMFPACK::initializevoid initialize(const SparsityPattern &sparsity_pattern)Definition sparse_direct.cc:67\\n FluidStructureProblem::output_results\\nGenerating graphical output is rather trivial here: all we have to do is identify which components of the solution vector belong to scalars and/or vectors (see, for example, step-22 for a previous example), and then pass it all on to the DataOut class:\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::output_results(\\n\\u00a0     const unsigned int refinement_cycle) const\\n\\u00a0   {\\n\\u00a0     std::vector<std::string> solution_names(dim, \\\"velocity\\\");\\n\\u00a0     solution_names.emplace_back(\\\"pressure\\\");\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       solution_names.emplace_back(\\\"displacement\\\");\\n\\u00a0 \\n\\u00a0     std::vector<DataComponentInterpretation::DataComponentInterpretation>\\n\\u00a0       data_component_interpretation(\\n\\u00a0         dim, DataComponentInterpretation::component_is_part_of_vector);\\n\\u00a0     data_component_interpretation.push_back(\\n\\u00a0       DataComponentInterpretation::component_is_scalar);\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       data_component_interpretation.push_back(\\n\\u00a0         DataComponentInterpretation::component_is_part_of_vector);\\n\\u00a0 \\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0     data_out.attach_dof_handler(dof_handler);\\n\\u00a0 \\n\\u00a0     data_out.add_data_vector(solution,\\n\\u00a0                              solution_names,\\n\\u00a0                              DataOut<dim>::type_dof_data,\\n\\u00a0                              data_component_interpretation);\\n\\u00a0     data_out.build_patches();\\n\\u00a0 \\n\\u00a0     std::ofstream output(\\n\\u00a0       \\\"solution-\\\" + Utilities::int_to_string(refinement_cycle, 2) + \\\".vtk\\\");\\n\\u00a0     data_out.write_vtk(output);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nDataComponentInterpretation::component_is_scalar@ component_is_scalarDefinition data_component_interpretation.h:52\\nDataComponentInterpretation::component_is_part_of_vector@ component_is_part_of_vectorDefinition data_component_interpretation.h:58\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\n FluidStructureProblem::refine_mesh\\nThe next step is to refine the mesh. As was discussed in the introduction, this is a bit tricky primarily because the fluid and the solid subdomains use variables that have different physical dimensions and for which the absolute magnitude of error estimates is consequently not directly comparable. We will therefore have to scale them. At the top of the function, we therefore first compute error estimates for the different variables separately (using the velocities but not the pressure for the fluid domain, and the displacements in the solid domain):\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::refine_mesh()\\n\\u00a0   {\\n\\u00a0     Vector<float> stokes_estimated_error_per_cell(\\n\\u00a0       triangulation.n_active_cells());\\n\\u00a0     Vector<float> elasticity_estimated_error_per_cell(\\n\\u00a0       triangulation.n_active_cells());\\n\\u00a0 \\n\\u00a0     const QGauss<dim - 1> stokes_face_quadrature(stokes_degree + 2);\\n\\u00a0     const QGauss<dim - 1> elasticity_face_quadrature(elasticity_degree + 2);\\n\\u00a0 \\n\\u00a0     hp::QCollection<dim - 1> face_q_collection;\\n\\u00a0     face_q_collection.push_back(stokes_face_quadrature);\\n\\u00a0     face_q_collection.push_back(elasticity_face_quadrature);\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0     KellyErrorEstimator<dim>::estimate(\\n\\u00a0       dof_handler,\\n\\u00a0       face_q_collection,\\n\\u00a0       std::map<types::boundary_id, const Function<dim> *>(),\\n\\u00a0       solution,\\n\\u00a0       stokes_estimated_error_per_cell,\\n\\u00a0       fe_collection.component_mask(velocities));\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector displacements(dim + 1);\\n\\u00a0     KellyErrorEstimator<dim>::estimate(\\n\\u00a0       dof_handler,\\n\\u00a0       face_q_collection,\\n\\u00a0       std::map<types::boundary_id, const Function<dim> *>(),\\n\\u00a0       solution,\\n\\u00a0       elasticity_estimated_error_per_cell,\\n\\u00a0       fe_collection.component_mask(displacements));\\n\\u00a0 \\nWe then normalize error estimates by dividing by their norm and scale the fluid error indicators by a factor of 4 as discussed in the introduction. The results are then added together into a vector that contains error indicators for all cells:\\n\\u00a0     stokes_estimated_error_per_cell *=\\n\\u00a0       4. / stokes_estimated_error_per_cell.l2_norm();\\n\\u00a0     elasticity_estimated_error_per_cell *=\\n\\u00a0       1. / elasticity_estimated_error_per_cell.l2_norm();\\n\\u00a0 \\n\\u00a0     Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n\\u00a0 \\n\\u00a0     estimated_error_per_cell += stokes_estimated_error_per_cell;\\n\\u00a0     estimated_error_per_cell += elasticity_estimated_error_per_cell;\\n\\u00a0 \\nThe second to last part of the function, before actually refining the mesh, involves a heuristic that we have already mentioned in the introduction: because the solution is discontinuous, the KellyErrorEstimator class gets all confused about cells that sit at the boundary between subdomains: it believes that the error is large there because the jump in the gradient is large, even though this is entirely expected and a feature that is in fact present in the exact solution as well and therefore not indicative of any numerical error.\\nConsequently, we set the error indicators to zero for all cells at the interface; the conditions determining which cells this affects are slightly awkward because we have to account for the possibility of adaptively refined meshes, meaning that the neighboring cell can be coarser than the current one, or could in fact be refined some more. The structure of these nested conditions is much the same as we encountered when assembling interface terms in assemble_system.\\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       for (const auto f : cell->face_indices())\\n\\u00a0         if (cell_is_in_solid_domain(cell))\\n\\u00a0           {\\n\\u00a0             if ((cell->at_boundary(f) == false) &&\\n\\u00a0                 (((cell->neighbor(f)->level() == cell->level()) &&\\n\\u00a0                   (cell->neighbor(f)->has_children() == false) &&\\n\\u00a0                   cell_is_in_fluid_domain(cell->neighbor(f))) ||\\n\\u00a0                  ((cell->neighbor(f)->level() == cell->level()) &&\\n\\u00a0                   (cell->neighbor(f)->has_children() == true) &&\\n\\u00a0                   (cell_is_in_fluid_domain(\\n\\u00a0                     cell->neighbor_child_on_subface(f, 0)))) ||\\n\\u00a0                  (cell->neighbor_is_coarser(f) &&\\n\\u00a0                   cell_is_in_fluid_domain(cell->neighbor(f)))))\\n\\u00a0               estimated_error_per_cell(cell->active_cell_index()) = 0;\\n\\u00a0           }\\n\\u00a0         else\\n\\u00a0           {\\n\\u00a0             if ((cell->at_boundary(f) == false) &&\\n\\u00a0                 (((cell->neighbor(f)->level() == cell->level()) &&\\n\\u00a0                   (cell->neighbor(f)->has_children() == false) &&\\n\\u00a0                   cell_is_in_solid_domain(cell->neighbor(f))) ||\\n\\u00a0                  ((cell->neighbor(f)->level() == cell->level()) &&\\n\\u00a0                   (cell->neighbor(f)->has_children() == true) &&\\n\\u00a0                   (cell_is_in_solid_domain(\\n\\u00a0                     cell->neighbor_child_on_subface(f, 0)))) ||\\n\\u00a0                  (cell->neighbor_is_coarser(f) &&\\n\\u00a0                   cell_is_in_solid_domain(cell->neighbor(f)))))\\n\\u00a0               estimated_error_per_cell(cell->active_cell_index()) = 0;\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0     GridRefinement::refine_and_coarsen_fixed_number(triangulation,\\n\\u00a0                                                     estimated_error_per_cell,\\n\\u00a0                                                     0.3,\\n\\u00a0                                                     0.0);\\n\\u00a0     triangulation.execute_coarsening_and_refinement();\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nparallel::distributed::Triangulation::execute_coarsening_and_refinementvirtual void execute_coarsening_and_refinement() overrideDefinition tria.cc:3320\\nlevelunsigned int levelDefinition grid_out.cc:4626\\nGridRefinement::refine_and_coarsen_fixed_numbervoid refine_and_coarsen_fixed_number(Triangulation< dim, spacedim > &triangulation, const Vector< Number > &criteria, const double top_fraction_of_cells, const double bottom_fraction_of_cells, const unsigned int max_n_cells=std::numeric_limits< unsigned int >::max())Definition grid_refinement.cc:318\\n FluidStructureProblem::run\\nThis is, as usual, the function that controls the overall flow of operation. If you've read through tutorial programs step-1 through step-6, for example, then you are already quite familiar with the following structure:\\n\\u00a0   template <int dim>\\n\\u00a0   void FluidStructureProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     make_grid();\\n\\u00a0 \\n\\u00a0     for (unsigned int refinement_cycle = 0; refinement_cycle < 10 - 2 * dim;\\n\\u00a0          ++refinement_cycle)\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Refinement cycle \\\" << refinement_cycle << std::endl;\\n\\u00a0 \\n\\u00a0         if (refinement_cycle > 0)\\n\\u00a0           refine_mesh();\\n\\u00a0 \\n\\u00a0         setup_dofs();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Assembling...\\\" << std::endl;\\n\\u00a0         assemble_system();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Solving...\\\" << std::endl;\\n\\u00a0         solve();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Writing output...\\\" << std::endl;\\n\\u00a0         output_results(refinement_cycle);\\n\\u00a0 \\n\\u00a0         std::cout << std::endl;\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 } // namespace Step46\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n The main() function\\nThis, final, function contains pretty much exactly what most of the other tutorial programs have:\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace Step46;\\n\\u00a0 \\n\\u00a0       FluidStructureProblem<2> flow_problem(1, 1);\\n\\u00a0       flow_problem.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\n Results\\n2d results\\nWhen running the program, you should get output like the following: Refinement cycle 0\\n   Number of active cells: 64\\n   Number of degrees of freedom: 531\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 1\\n   Number of active cells: 136\\n   Number of degrees of freedom: 1260\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 2\\n   Number of active cells: 436\\n   Number of degrees of freedom: 3723\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 3\\n   Number of active cells: 1072\\n   Number of degrees of freedom: 7493\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 4\\n   Number of active cells: 2632\\n   Number of degrees of freedom: 15005\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 5\\n   Number of active cells: 5944\\n   Number of degrees of freedom: 29437\\n   Assembling...\\n   Solving...\\n   Writing output...\\nThe results are easily visualized:\\n\\n\\n \\nMagnitude and vectors for the fluid velocity. \\n\\n \\nFluid pressure. The dynamic range has been truncated to cut off the pressure singularities at the top left and right corners of the domain as well as the top corners of the solid that forms re-entrant corners into the fluid domain. \\n\\n \\nMagnitude and vectors for the solid displacement. \\n\\n\\n\\nThe plots are easily interpreted: as the flow drives down on the left side and up on the right side of the upright part of the solid, it produces a pressure that is high on the left and low on the right, and these forces bend the vertical part of the solid to the right.\\n3d results\\nBy changing the dimension of the FluidStructureProblem class in main() to 3, we can also run the same problem 3d. You'd get output along the following lines: Refinement cycle 0\\n   Number of active cells: 512\\n   Number of degrees of freedom: 11631\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 1\\n   Number of active cells: 1716\\n   Number of degrees of freedom: 48984\\n   Assembling...\\n   Solving...\\n   Writing output...\\n \\nRefinement cycle 2\\n   Number of active cells: 8548\\n   Number of degrees of freedom: 245746\\n   Assembling...\\n   Solving...\\n You'll notice that the big bottleneck is the solver: SparseDirectUmfpack needs nearly 5 hours and some 80 GB of memory to solve the last iteration of this problem on a 2016 workstation (the second to last iteration took only 16 minutes). Clearly a better solver is needed here, a topic discussed below.\\nThe results can also be visualized and yield good pictures as well. Here is one, showing both a vector plot for the velocity (in oranges), the solid displacement (in blues), and shading the solid region:\\n\\n \\nIn addition to the lack of a good solver, the mesh is a bit unbalanced: mesh refinement heavily favors the fluid subdomain (in 2d, it was the other way around, prompting us to weigh the fluid error indicators higher). Clearly, some tweaking of the relative importance of error indicators in the two subdomains is important if one wanted to go on doing more 3d computations.\\n Possibilities for extensions\\nLinear solvers and preconditioners\\nAn obvious place to improve the program would be to use a more sophisticated solver \\u2014 in particular one that scales well and will also work for realistic 3d problems. This shouldn't actually be too hard to achieve here, because of the one-way coupling from fluid into solid. To this end, assume we had re-ordered degrees of freedom in such a way that we first have all velocity and pressure degrees of freedom, and then all displacements (this is easily possible using DoFRenumbering::component_wise). Then the system matrix could be split into the following block form:        \\n\\\\[\\n  A_\\\\text{global}\\n  =\\n  \\\\begin{pmatrix}\\n    A_{\\\\text{fluid}} & 0 \\\\\\\\\\n    B & A_{\\\\text{solid}}\\n  \\\\end{pmatrix}\\n\\\\]\\n\\n where \\\\(A_{\\\\text{fluid}}\\\\) is the Stokes matrix for velocity and pressure (it could be further subdivided into a \\\\(2\\\\times 2\\\\) matrix as in step-22, though this is immaterial for the current purpose), \\\\(A_{\\\\text{solid}}\\\\) results from the elasticity equations for the displacements, and \\\\(B\\\\) is the matrix that comes from the interface conditions. Now notice that the matrix         \\n\\\\[\\n  A_\\\\text{global}^{-1}\\n  =\\n  \\\\begin{pmatrix}\\n    A_{\\\\text{fluid}}^{-1} & 0 \\\\\\\\\\n    -A_\\\\text{solid}^{-1} B\\n      A_\\\\text{fluid}^{-1} & A_{\\\\text{solid}}^{-1}\\n  \\\\end{pmatrix}\\n\\\\]\\n\\n is the inverse of \\\\(A_\\\\text{global}\\\\). Applying this matrix requires only one solve with \\\\(A_\\\\text{fluid}\\\\) and \\\\(A_\\\\text{solid}\\\\) each since              \\n\\\\[\\n  \\\\begin{pmatrix}\\n    p_x \\\\\\\\ p_y\\n  \\\\end{pmatrix}\\n  =\\n  \\\\begin{pmatrix}\\n    A_{\\\\text{fluid}}^{-1} & 0 \\\\\\\\\\n    -A_\\\\text{solid}^{-1} B\\n      A_\\\\text{fluid}^{-1} & A_{\\\\text{solid}}^{-1}\\n  \\\\end{pmatrix}\\n  \\\\begin{pmatrix}\\n    x \\\\\\\\ y\\n  \\\\end{pmatrix}\\n\\\\]\\n\\n can be computed as \\\\(p_x = A_{\\\\text{fluid}}^{-1} x\\\\) followed by \\\\(p_y = A_{\\\\text{solid}}^{-1} (y-Bp_x)\\\\).\\nOne can therefore expect that         \\n\\\\[\\n  \\\\widetilde{A_\\\\text{global}^{-1}}\\n  =\\n  \\\\begin{pmatrix}\\n    \\\\widetilde{A_{\\\\text{fluid}}^{-1}} & 0 \\\\\\\\\\n    -\\\\widetilde{A_\\\\text{solid}^{-1}} B\\n      \\\\widetilde{A_\\\\text{fluid}^{-1}} & \\\\widetilde{A_{\\\\text{solid}}^{-1}}\\n  \\\\end{pmatrix}\\n\\\\]\\n\\n would be a good preconditioner if   \\\\(\\\\widetilde{A_{\\\\text{fluid}}^{-1}}\\n\\\\approx A_{\\\\text{fluid}}^{-1}, \\\\widetilde{A_{\\\\text{solid}}^{-1}}\\n\\\\approx A_{\\\\text{solid}}^{-1}\\\\).\\nThat means, we only need good preconditioners for Stokes and the elasticity equations separately. These are well known: for Stokes, we can use the preconditioner discussed in the results section of step-22; for elasticity, a good preconditioner would be a single V-cycle of a geometric or algebraic multigrid. There are more open questions, however: For an \\\"optimized\\\" solver block-triangular preconditioner built from two sub-preconditioners, one point that often comes up is that, when choosing parameters for the sub-preconditioners, values that work well when solving the two problems separately may not be optimal when combined into a multiphysics preconditioner. In particular, when solving just a solid or fluid mechanics problem separately, the balancing act between the number of iterations to convergence and the cost of applying the preconditioner on a per iteration basis may lead one to choose an expensive preconditioner for the Stokes problem and a cheap preconditioner for the elasticity problem (or vice versa). When combined, however, there is the additional constraint that you want the two sub-preconditioners to converge at roughly the same rate, or else the cheap one may drive up the global number of iterations while the expensive one drives up the cost-per-iteration. For example, while a single AMG V-cycle is a good approach for elasticity by itself, when combined into a multiphysics problem there may be an incentive to using a full W-cycle or multiple cycles to help drive down the total solve time.\\nRefinement indicators\\nAs mentioned in the introduction, the refinement indicator we use for this program is rather ad hoc. A better one would understand that the jump in the gradient of the solution across the interface is not indicative of the error but to be expected and ignore the interface when integrating the jump terms. Nevertheless, this is not what the KellyErrorEstimator class does. Another, bigger question, is whether this kind of estimator is a good strategy in the first place: for example, if we want to have maximal accuracy in one particular aspect of the displacement (e.g. the displacement at the top right corner of the solid), then is it appropriate to scale the error indicators for fluid and solid to the same magnitude? Maybe it is necessary to solve the fluid problem with more accuracy than the solid because the fluid solution directly affects the solids solution? Maybe the other way around?\\nConsequently, an obvious possibility for improving the program would be to implement a better refinement criterion. There is some literature on this topic; one of a variety of possible starting points would be the paper by Thomas Wick on \\\"Adaptive finite elements for monolithic fluid-structure\\ninteraction on a prolongated domain: Applied to an heart valve simulation\\\", Proceedings of the Computer Methods in Mechanics Conference 2011 (CMM-2011), 9-12 May 2011, Warszaw, Poland.\\nVerification\\nThe results above are purely qualitative as there is no evidence that our scheme in fact converges. An obvious thing to do would therefore be to add some quantitative measures to check that the scheme at least converges to something. For example, we could output for each refinement cycle the deflection of the top right corner of the part of the solid that protrudes into the fluid subdomain. Or we could compute the net force vector or torque the fluid exerts on the solid.\\nBetter models\\nIn reality, most fluid structure interaction problems are so that the movement of the solid does affect the flow of the fluid. For example, the forces of the air around an air foil cause it to flex and to change its shape. Likewise, a flag flaps in the wind, completely changing its shape.\\nSuch problems where the coupling goes both ways are typically handled in an Arbitrary Lagrangian Eulerian (ALE) framework, in which the displacement of the solid is extended into the fluid domain in some smooth way, rather than by zero as we do here. The extended displacement field is then used to deform the mesh on which we compute the fluid flow. Furthermore, the boundary conditions for the fluid on the interface are no longer that the velocity is zero; rather, in a time dependent program, the fluid velocity must be equal to the time derivative of the displacement along the interface.\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2011 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Author: Wolfgang Bangerth, Texas A&M University, 2011\\n */\\n \\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n#include <deal.II/base/utilities.h>\\n \\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/sparse_direct.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n#include <deal.II/grid/grid_refinement.h>\\n \\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/fe/fe_q.h>\\n#include <deal.II/fe/fe_nothing.h>\\n#include <deal.II/fe/fe_system.h>\\n#include <deal.II/fe/fe_values.h>\\n \\n#include <deal.II/hp/fe_collection.h>\\n#include <deal.II/hp/fe_values.h>\\n \\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n#include <deal.II/numerics/error_estimator.h>\\n \\n#include <iostream>\\n#include <fstream>\\n \\n \\nnamespace Step46\\n{\\n using namespace dealii;\\n \\n \\n template <int dim>\\n class FluidStructureProblem\\n  {\\n public:\\n    FluidStructureProblem(const unsigned int stokes_degree,\\n const unsigned int elasticity_degree);\\n void run();\\n \\n private:\\n enum\\n    {\\n      fluid_domain_id,\\n      solid_domain_id\\n    };\\n \\n static bool cell_is_in_fluid_domain(\\n const typename DoFHandler<dim>::cell_iterator &cell);\\n \\n static bool cell_is_in_solid_domain(\\n const typename DoFHandler<dim>::cell_iterator &cell);\\n \\n \\n void make_grid();\\n void set_active_fe_indices();\\n void setup_dofs();\\n void assemble_system();\\n void assemble_interface_term(\\n const FEFaceValuesBase<dim>          &elasticity_fe_face_values,\\n const FEFaceValuesBase<dim>          &stokes_fe_face_values,\\n      std::vector<Tensor<1, dim>>          &elasticity_phi,\\n      std::vector<SymmetricTensor<2, dim>> &stokes_symgrad_phi_u,\\n      std::vector<double>                  &stokes_phi_p,\\n FullMatrix<double>                   &local_interface_matrix) const;\\n void solve();\\n void output_results(const unsigned int refinement_cycle) const;\\n void refine_mesh();\\n \\n const unsigned int stokes_degree;\\n const unsigned int elasticity_degree;\\n \\n Triangulation<dim> triangulation;\\n const FESystem<dim>   stokes_fe;\\n const FESystem<dim>   elasticity_fe;\\n hp::FECollection<dim> fe_collection;\\n DoFHandler<dim>       dof_handler;\\n \\n AffineConstraints<double> constraints;\\n \\n SparsityPattern      sparsity_pattern;\\n SparseMatrix<double> system_matrix;\\n \\n Vector<double> solution;\\n Vector<double> system_rhs;\\n \\n const double viscosity;\\n const double lambda;\\n const double mu;\\n  };\\n \\n \\n \\n template <int dim>\\n class StokesBoundaryValues : public Function<dim>\\n  {\\n public:\\n    StokesBoundaryValues()\\n      : Function<dim>(dim + 1 + dim)\\n    {}\\n \\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override;\\n \\n virtual void vector_value(const Point<dim> &p,\\n Vector<double>   &value) const override;\\n  };\\n \\n \\n template <int dim>\\n double StokesBoundaryValues<dim>::value(const Point<dim>  &p,\\n const unsigned int component) const\\n {\\n Assert(component < this->n_components,\\n           ExcIndexRange(component, 0, this->n_components));\\n \\n if (component == dim - 1)\\n switch (dim)\\n        {\\n case 2:\\n return std::sin(numbers::PI * p[0]);\\n case 3:\\n return std::sin(numbers::PI * p[0]) * std::sin(numbers::PI * p[1]);\\n default:\\n DEAL_II_NOT_IMPLEMENTED();\\n        }\\n \\n return 0;\\n  }\\n \\n \\n template <int dim>\\n void StokesBoundaryValues<dim>::vector_value(const Point<dim> &p,\\n Vector<double>   &values) const\\n {\\n for (unsigned int c = 0; c < this->n_components; ++c)\\n      values(c) = StokesBoundaryValues<dim>::value(p, c);\\n  }\\n \\n \\n \\n \\n \\n template <int dim>\\n  FluidStructureProblem<dim>::FluidStructureProblem(\\n const unsigned int stokes_degree,\\n const unsigned int elasticity_degree)\\n    : stokes_degree(stokes_degree)\\n    , elasticity_degree(elasticity_degree)\\n    , triangulation(Triangulation<dim>::maximum_smoothing)\\n    , stokes_fe(FE_Q<dim>(stokes_degree + 1) ^ dim,     // fluid velocity\\n FE_Q<dim>(stokes_degree),               // fluid pressure\\n FE_Nothing<dim>() ^ dim)                // solid displacement\\n    , elasticity_fe(FE_Nothing<dim>() ^ dim,            // fluid velocity\\n FE_Nothing<dim>(),                  // fluid pressure\\n FE_Q<dim>(elasticity_degree) ^ dim) // solid displacement\\n    , dof_handler(triangulation)\\n    , viscosity(2)\\n    , lambda(1)\\n    , mu(1)\\n  {\\n    fe_collection.push_back(stokes_fe);\\n    fe_collection.push_back(elasticity_fe);\\n  }\\n \\n \\n \\n template <int dim>\\n bool FluidStructureProblem<dim>::cell_is_in_fluid_domain(\\n const typename DoFHandler<dim>::cell_iterator &cell)\\n  {\\n return (cell->material_id() == fluid_domain_id);\\n  }\\n \\n \\n template <int dim>\\n bool FluidStructureProblem<dim>::cell_is_in_solid_domain(\\n const typename DoFHandler<dim>::cell_iterator &cell)\\n  {\\n return (cell->material_id() == solid_domain_id);\\n  }\\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::make_grid()\\n  {\\n GridGenerator::subdivided_hyper_cube(triangulation, 8, -1, 1);\\n \\n for (const auto &cell : triangulation.active_cell_iterators())\\n      for (const auto &face : cell->face_iterators())\\n        if (face->at_boundary() && (face->center()[dim - 1] == 1))\\n          face->set_all_boundary_ids(1);\\n \\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      if (((std::fabs(cell->center()[0]) < 0.25) &&\\n           (cell->center()[dim - 1] > 0.5)) ||\\n          ((std::fabs(cell->center()[0]) >= 0.25) &&\\n           (cell->center()[dim - 1] > -0.5)))\\n        cell->set_material_id(fluid_domain_id);\\n else\\n        cell->set_material_id(solid_domain_id);\\n  }\\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::set_active_fe_indices()\\n  {\\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n if (cell_is_in_fluid_domain(cell))\\n          cell->set_active_fe_index(0);\\n else if (cell_is_in_solid_domain(cell))\\n          cell->set_active_fe_index(1);\\n else\\n DEAL_II_NOT_IMPLEMENTED();\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::setup_dofs()\\n  {\\n    set_active_fe_indices();\\n    dof_handler.distribute_dofs(fe_collection);\\n \\n    {\\n      constraints.clear();\\n DoFTools::make_hanging_node_constraints(dof_handler, constraints);\\n \\n const FEValuesExtractors::Vector velocities(0);\\n VectorTools::interpolate_boundary_values(dof_handler,\\n                                               1,\\n                                               StokesBoundaryValues<dim>(),\\n                                               constraints,\\n                                               fe_collection.component_mask(\\n                                                 velocities));\\n \\n const FEValuesExtractors::Vector displacements(dim + 1);\\n VectorTools::interpolate_boundary_values(\\n        dof_handler,\\n        0,\\n Functions::ZeroFunction<dim>(dim + 1 + dim),\\n        constraints,\\n        fe_collection.component_mask(displacements));\\n    }\\n \\n    {\\n      std::vector<types::global_dof_index> local_face_dof_indices(\\n        stokes_fe.n_dofs_per_face());\\n for (const auto &cell : dof_handler.active_cell_iterators())\\n        if (cell_is_in_fluid_domain(cell))\\n          for (const auto face_no : cell->face_indices())\\n            if (cell->face(face_no)->at_boundary() == false)\\n              {\\n bool face_is_on_interface = false;\\n \\n if ((cell->neighbor(face_no)->has_children() == false) &&\\n                    (cell_is_in_solid_domain(cell->neighbor(face_no))))\\n                  face_is_on_interface = true;\\n else if (cell->neighbor(face_no)->has_children() == true)\\n                  {\\n for (unsigned int sf = 0;\\n                         sf < cell->face(face_no)->n_children();\\n                         ++sf)\\n if (cell_is_in_solid_domain(\\n                            cell->neighbor_child_on_subface(face_no, sf)))\\n                        {\\n                          face_is_on_interface = true;\\n break;\\n                        }\\n                  }\\n \\n if (face_is_on_interface)\\n                  {\\n                    cell->face(face_no)->get_dof_indices(local_face_dof_indices,\\n                                                         0);\\n for (unsigned int i = 0; i < local_face_dof_indices.size();\\n                         ++i)\\n if (stokes_fe.face_system_to_component_index(i).first <\\n                          dim)\\n                        constraints.constrain_dof_to_zero(\\n                          local_face_dof_indices[i]);\\n                  }\\n              }\\n    }\\n \\n    constraints.close();\\n \\n    std::cout << \\\"   Number of active cells: \\\" << triangulation.n_active_cells()\\n              << std::endl\\n              << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n              << std::endl;\\n \\n    {\\n DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n \\n Table<2, DoFTools::Coupling> cell_coupling(fe_collection.n_components(),\\n                                                 fe_collection.n_components());\\n Table<2, DoFTools::Coupling> face_coupling(fe_collection.n_components(),\\n                                                 fe_collection.n_components());\\n \\n for (unsigned int c = 0; c < fe_collection.n_components(); ++c)\\n for (unsigned int d = 0; d < fe_collection.n_components(); ++d)\\n          {\\n if (((c < dim + 1) && (d < dim + 1) &&\\n                 !((c == dim) && (d == dim))) ||\\n                ((c >= dim + 1) && (d >= dim + 1)))\\n              cell_coupling[c][d] = DoFTools::always;\\n \\n if ((c >= dim + 1) && (d < dim + 1))\\n              face_coupling[c][d] = DoFTools::always;\\n          }\\n \\n DoFTools::make_flux_sparsity_pattern(dof_handler,\\n                                           dsp,\\n                                           cell_coupling,\\n                                           face_coupling);\\n      constraints.condense(dsp);\\n      sparsity_pattern.copy_from(dsp);\\n    }\\n \\n    system_matrix.reinit(sparsity_pattern);\\n \\n    solution.reinit(dof_handler.n_dofs());\\n    system_rhs.reinit(dof_handler.n_dofs());\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::assemble_system()\\n  {\\n    system_matrix = 0;\\n    system_rhs    = 0;\\n \\n const QGauss<dim> stokes_quadrature(stokes_degree + 2);\\n const QGauss<dim> elasticity_quadrature(elasticity_degree + 2);\\n \\n hp::QCollection<dim> q_collection;\\n    q_collection.push_back(stokes_quadrature);\\n    q_collection.push_back(elasticity_quadrature);\\n \\n hp::FEValues<dim> hp_fe_values(fe_collection,\\n                                   q_collection,\\n update_values | update_quadrature_points |\\n update_JxW_values | update_gradients);\\n \\n const QGauss<dim - 1> common_face_quadrature(\\n std::max(stokes_degree + 2, elasticity_degree + 2));\\n \\n FEFaceValues<dim>    stokes_fe_face_values(stokes_fe,\\n                                            common_face_quadrature,\\n update_JxW_values |\\n update_gradients | update_values);\\n FEFaceValues<dim>    elasticity_fe_face_values(elasticity_fe,\\n                                                common_face_quadrature,\\n update_normal_vectors |\\n update_values);\\n FESubfaceValues<dim> stokes_fe_subface_values(stokes_fe,\\n                                                  common_face_quadrature,\\n update_JxW_values |\\n update_gradients |\\n update_values);\\n FESubfaceValues<dim> elasticity_fe_subface_values(elasticity_fe,\\n                                                      common_face_quadrature,\\n update_normal_vectors |\\n update_values);\\n \\n const unsigned int stokes_dofs_per_cell = stokes_fe.n_dofs_per_cell();\\n const unsigned int elasticity_dofs_per_cell =\\n      elasticity_fe.n_dofs_per_cell();\\n \\n FullMatrix<double> local_matrix;\\n FullMatrix<double> local_interface_matrix(elasticity_dofs_per_cell,\\n                                              stokes_dofs_per_cell);\\n Vector<double>     local_rhs;\\n \\n    std::vector<types::global_dof_index> local_dof_indices;\\n    std::vector<types::global_dof_index> neighbor_dof_indices(\\n      stokes_dofs_per_cell);\\n \\n const Functions::ZeroFunction<dim> right_hand_side(dim + 1);\\n \\n const FEValuesExtractors::Vector velocities(0);\\n const FEValuesExtractors::Scalar pressure(dim);\\n const FEValuesExtractors::Vector displacements(dim + 1);\\n \\n    std::vector<SymmetricTensor<2, dim>> stokes_symgrad_phi_u(\\n      stokes_dofs_per_cell);\\n    std::vector<double> stokes_div_phi_u(stokes_dofs_per_cell);\\n    std::vector<double> stokes_phi_p(stokes_dofs_per_cell);\\n \\n    std::vector<Tensor<2, dim>> elasticity_grad_phi(elasticity_dofs_per_cell);\\n    std::vector<double>         elasticity_div_phi(elasticity_dofs_per_cell);\\n    std::vector<Tensor<1, dim>> elasticity_phi(elasticity_dofs_per_cell);\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        hp_fe_values.reinit(cell);\\n \\n const FEValues<dim> &fe_values = hp_fe_values.get_present_fe_values();\\n \\n        local_matrix.reinit(cell->get_fe().n_dofs_per_cell(),\\n                            cell->get_fe().n_dofs_per_cell());\\n        local_rhs.reinit(cell->get_fe().n_dofs_per_cell());\\n \\n if (cell_is_in_fluid_domain(cell))\\n          {\\n const unsigned int dofs_per_cell = cell->get_fe().n_dofs_per_cell();\\n Assert(dofs_per_cell == stokes_dofs_per_cell, ExcInternalError());\\n \\n for (unsigned int q = 0; q < fe_values.n_quadrature_points; ++q)\\n              {\\n for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n                  {\\n                    stokes_symgrad_phi_u[k] =\\n                      fe_values[velocities].symmetric_gradient(k, q);\\n                    stokes_div_phi_u[k] =\\n                      fe_values[velocities].divergence(k, q);\\n                    stokes_phi_p[k] = fe_values[pressure].value(k, q);\\n                  }\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                    local_matrix(i, j) +=\\n                      (2 * viscosity * stokes_symgrad_phi_u[i] *\\n                         stokes_symgrad_phi_u[j] -\\n                       stokes_div_phi_u[i] * stokes_phi_p[j] -\\n                       stokes_phi_p[i] * stokes_div_phi_u[j]) *\\n                      fe_values.JxW(q);\\n              }\\n          }\\n else\\n          {\\n const unsigned int dofs_per_cell = cell->get_fe().n_dofs_per_cell();\\n Assert(dofs_per_cell == elasticity_dofs_per_cell,\\n                   ExcInternalError());\\n \\n for (unsigned int q = 0; q < fe_values.n_quadrature_points; ++q)\\n              {\\n for (unsigned int k = 0; k < dofs_per_cell; ++k)\\n                  {\\n                    elasticity_grad_phi[k] =\\n                      fe_values[displacements].gradient(k, q);\\n                    elasticity_div_phi[k] =\\n                      fe_values[displacements].divergence(k, q);\\n                  }\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                    {\\n                      local_matrix(i, j) +=\\n                        (lambda * elasticity_div_phi[i] *\\n                           elasticity_div_phi[j] +\\n                         mu * scalar_product(elasticity_grad_phi[i],\\n                                             elasticity_grad_phi[j]) +\\n                         mu *\\n                           scalar_product(elasticity_grad_phi[i],\\n transpose(elasticity_grad_phi[j]))) *\\n                        fe_values.JxW(q);\\n                    }\\n              }\\n          }\\n \\n        local_dof_indices.resize(cell->get_fe().n_dofs_per_cell());\\n        cell->get_dof_indices(local_dof_indices);\\n        constraints.distribute_local_to_global(local_matrix,\\n                                               local_rhs,\\n                                               local_dof_indices,\\n                                               system_matrix,\\n                                               system_rhs);\\n \\n if (cell_is_in_solid_domain(cell))\\n for (const auto f : cell->face_indices())\\n            if (cell->face(f)->at_boundary() == false)\\n              {\\n if ((cell->neighbor(f)->level() == cell->level()) &&\\n                    (cell->neighbor(f)->has_children() == false) &&\\n                    cell_is_in_fluid_domain(cell->neighbor(f)))\\n                  {\\n                    elasticity_fe_face_values.reinit(cell, f);\\n                    stokes_fe_face_values.reinit(cell->neighbor(f),\\n                                                 cell->neighbor_of_neighbor(f));\\n \\n                    assemble_interface_term(elasticity_fe_face_values,\\n                                            stokes_fe_face_values,\\n                                            elasticity_phi,\\n                                            stokes_symgrad_phi_u,\\n                                            stokes_phi_p,\\n                                            local_interface_matrix);\\n \\n                    cell->neighbor(f)->get_dof_indices(neighbor_dof_indices);\\n                    constraints.distribute_local_to_global(\\n                      local_interface_matrix,\\n                      local_dof_indices,\\n                      neighbor_dof_indices,\\n                      system_matrix);\\n                  }\\n \\n else if ((cell->neighbor(f)->level() == cell->level()) &&\\n                         (cell->neighbor(f)->has_children() == true))\\n                  {\\n for (unsigned int subface = 0;\\n                         subface < cell->face(f)->n_children();\\n                         ++subface)\\n if (cell_is_in_fluid_domain(\\n                            cell->neighbor_child_on_subface(f, subface)))\\n                        {\\n                          elasticity_fe_subface_values.reinit(cell, f, subface);\\n                          stokes_fe_face_values.reinit(\\n                            cell->neighbor_child_on_subface(f, subface),\\n                            cell->neighbor_of_neighbor(f));\\n \\n                          assemble_interface_term(elasticity_fe_subface_values,\\n                                                  stokes_fe_face_values,\\n                                                  elasticity_phi,\\n                                                  stokes_symgrad_phi_u,\\n                                                  stokes_phi_p,\\n                                                  local_interface_matrix);\\n \\n                          cell->neighbor_child_on_subface(f, subface)\\n                            ->get_dof_indices(neighbor_dof_indices);\\n                          constraints.distribute_local_to_global(\\n                            local_interface_matrix,\\n                            local_dof_indices,\\n                            neighbor_dof_indices,\\n                            system_matrix);\\n                        }\\n                  }\\n \\n else if (cell->neighbor_is_coarser(f) &&\\n                         cell_is_in_fluid_domain(cell->neighbor(f)))\\n                  {\\n                    elasticity_fe_face_values.reinit(cell, f);\\n                    stokes_fe_subface_values.reinit(\\n                      cell->neighbor(f),\\n                      cell->neighbor_of_coarser_neighbor(f).first,\\n                      cell->neighbor_of_coarser_neighbor(f).second);\\n \\n                    assemble_interface_term(elasticity_fe_face_values,\\n                                            stokes_fe_subface_values,\\n                                            elasticity_phi,\\n                                            stokes_symgrad_phi_u,\\n                                            stokes_phi_p,\\n                                            local_interface_matrix);\\n \\n                    cell->neighbor(f)->get_dof_indices(neighbor_dof_indices);\\n                    constraints.distribute_local_to_global(\\n                      local_interface_matrix,\\n                      local_dof_indices,\\n                      neighbor_dof_indices,\\n                      system_matrix);\\n                  }\\n              }\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::assemble_interface_term(\\n const FEFaceValuesBase<dim>          &elasticity_fe_face_values,\\n const FEFaceValuesBase<dim>          &stokes_fe_face_values,\\n    std::vector<Tensor<1, dim>>          &elasticity_phi,\\n    std::vector<SymmetricTensor<2, dim>> &stokes_symgrad_phi_u,\\n    std::vector<double>                  &stokes_phi_p,\\n FullMatrix<double>                   &local_interface_matrix) const\\n {\\n Assert(stokes_fe_face_values.n_quadrature_points ==\\n             elasticity_fe_face_values.n_quadrature_points,\\n           ExcInternalError());\\n const unsigned int n_face_quadrature_points =\\n      elasticity_fe_face_values.n_quadrature_points;\\n \\n const FEValuesExtractors::Vector velocities(0);\\n const FEValuesExtractors::Scalar pressure(dim);\\n const FEValuesExtractors::Vector displacements(dim + 1);\\n \\n    local_interface_matrix = 0;\\n for (unsigned int q = 0; q < n_face_quadrature_points; ++q)\\n      {\\n const Tensor<1, dim> normal_vector =\\n          elasticity_fe_face_values.normal_vector(q);\\n \\n for (unsigned int k = 0; k < stokes_fe_face_values.dofs_per_cell; ++k)\\n          {\\n            stokes_symgrad_phi_u[k] =\\n              stokes_fe_face_values[velocities].symmetric_gradient(k, q);\\n            stokes_phi_p[k] = stokes_fe_face_values[pressure].value(k, q);\\n          }\\n for (unsigned int k = 0; k < elasticity_fe_face_values.dofs_per_cell;\\n             ++k)\\n          elasticity_phi[k] =\\n            elasticity_fe_face_values[displacements].value(k, q);\\n \\n for (unsigned int i = 0; i < elasticity_fe_face_values.dofs_per_cell;\\n             ++i)\\n for (unsigned int j = 0; j < stokes_fe_face_values.dofs_per_cell; ++j)\\n            local_interface_matrix(i, j) +=\\n              -((2 * viscosity * (stokes_symgrad_phi_u[j] * normal_vector) -\\n                 stokes_phi_p[j] * normal_vector) *\\n                elasticity_phi[i] * stokes_fe_face_values.JxW(q));\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::solve()\\n  {\\n SparseDirectUMFPACK direct_solver;\\n    direct_solver.initialize(system_matrix);\\n    direct_solver.vmult(solution, system_rhs);\\n \\n    constraints.distribute(solution);\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::output_results(\\n const unsigned int refinement_cycle) const\\n {\\n    std::vector<std::string> solution_names(dim, \\\"velocity\\\");\\n    solution_names.emplace_back(\\\"pressure\\\");\\n for (unsigned int d = 0; d < dim; ++d)\\n      solution_names.emplace_back(\\\"displacement\\\");\\n \\n    std::vector<DataComponentInterpretation::DataComponentInterpretation>\\n      data_component_interpretation(\\n        dim, DataComponentInterpretation::component_is_part_of_vector);\\n    data_component_interpretation.push_back(\\n DataComponentInterpretation::component_is_scalar);\\n for (unsigned int d = 0; d < dim; ++d)\\n      data_component_interpretation.push_back(\\n DataComponentInterpretation::component_is_part_of_vector);\\n \\n DataOut<dim> data_out;\\n    data_out.attach_dof_handler(dof_handler);\\n \\n    data_out.add_data_vector(solution,\\n                             solution_names,\\n DataOut<dim>::type_dof_data,\\n                             data_component_interpretation);\\n    data_out.build_patches();\\n \\n    std::ofstream output(\\n \\\"solution-\\\" + Utilities::int_to_string(refinement_cycle, 2) + \\\".vtk\\\");\\n    data_out.write_vtk(output);\\n  }\\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::refine_mesh()\\n  {\\n Vector<float> stokes_estimated_error_per_cell(\\n triangulation.n_active_cells());\\n Vector<float> elasticity_estimated_error_per_cell(\\n triangulation.n_active_cells());\\n \\n const QGauss<dim - 1> stokes_face_quadrature(stokes_degree + 2);\\n const QGauss<dim - 1> elasticity_face_quadrature(elasticity_degree + 2);\\n \\n hp::QCollection<dim - 1> face_q_collection;\\n    face_q_collection.push_back(stokes_face_quadrature);\\n    face_q_collection.push_back(elasticity_face_quadrature);\\n \\n const FEValuesExtractors::Vector velocities(0);\\n KellyErrorEstimator<dim>::estimate(\\n      dof_handler,\\n      face_q_collection,\\n      std::map<types::boundary_id, const Function<dim> *>(),\\n      solution,\\n      stokes_estimated_error_per_cell,\\n      fe_collection.component_mask(velocities));\\n \\n const FEValuesExtractors::Vector displacements(dim + 1);\\n KellyErrorEstimator<dim>::estimate(\\n      dof_handler,\\n      face_q_collection,\\n      std::map<types::boundary_id, const Function<dim> *>(),\\n      solution,\\n      elasticity_estimated_error_per_cell,\\n      fe_collection.component_mask(displacements));\\n \\n    stokes_estimated_error_per_cell *=\\n      4. / stokes_estimated_error_per_cell.l2_norm();\\n    elasticity_estimated_error_per_cell *=\\n      1. / elasticity_estimated_error_per_cell.l2_norm();\\n \\n Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n \\n    estimated_error_per_cell += stokes_estimated_error_per_cell;\\n    estimated_error_per_cell += elasticity_estimated_error_per_cell;\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      for (const auto f : cell->face_indices())\\n        if (cell_is_in_solid_domain(cell))\\n          {\\n if ((cell->at_boundary(f) == false) &&\\n                (((cell->neighbor(f)->level() == cell->level()) &&\\n                  (cell->neighbor(f)->has_children() == false) &&\\n                  cell_is_in_fluid_domain(cell->neighbor(f))) ||\\n                 ((cell->neighbor(f)->level() == cell->level()) &&\\n                  (cell->neighbor(f)->has_children() == true) &&\\n                  (cell_is_in_fluid_domain(\\n                    cell->neighbor_child_on_subface(f, 0)))) ||\\n                 (cell->neighbor_is_coarser(f) &&\\n                  cell_is_in_fluid_domain(cell->neighbor(f)))))\\n              estimated_error_per_cell(cell->active_cell_index()) = 0;\\n          }\\n else\\n          {\\n if ((cell->at_boundary(f) == false) &&\\n                (((cell->neighbor(f)->level() == cell->level()) &&\\n                  (cell->neighbor(f)->has_children() == false) &&\\n                  cell_is_in_solid_domain(cell->neighbor(f))) ||\\n                 ((cell->neighbor(f)->level() == cell->level()) &&\\n                  (cell->neighbor(f)->has_children() == true) &&\\n                  (cell_is_in_solid_domain(\\n                    cell->neighbor_child_on_subface(f, 0)))) ||\\n                 (cell->neighbor_is_coarser(f) &&\\n                  cell_is_in_solid_domain(cell->neighbor(f)))))\\n              estimated_error_per_cell(cell->active_cell_index()) = 0;\\n          }\\n \\n GridRefinement::refine_and_coarsen_fixed_number(triangulation,\\n                                                    estimated_error_per_cell,\\n                                                    0.3,\\n                                                    0.0);\\n triangulation.execute_coarsening_and_refinement();\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void FluidStructureProblem<dim>::run()\\n  {\\n    make_grid();\\n \\n for (unsigned int refinement_cycle = 0; refinement_cycle < 10 - 2 * dim;\\n         ++refinement_cycle)\\n      {\\n        std::cout << \\\"Refinement cycle \\\" << refinement_cycle << std::endl;\\n \\n if (refinement_cycle > 0)\\n          refine_mesh();\\n \\n        setup_dofs();\\n \\n        std::cout << \\\"   Assembling...\\\" << std::endl;\\n        assemble_system();\\n \\n        std::cout << \\\"   Solving...\\\" << std::endl;\\n        solve();\\n \\n        std::cout << \\\"   Writing output...\\\" << std::endl;\\n        output_results(refinement_cycle);\\n \\n        std::cout << std::endl;\\n      }\\n  }\\n} // namespace Step46\\n \\n \\n \\n \\nint main()\\n{\\n try\\n    {\\n using namespace Step46;\\n \\n      FluidStructureProblem<2> flow_problem(1, 1);\\n      flow_problem.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nDataOutInterface::write_vtkvoid write_vtk(std::ostream &out) constDefinition data_out_base.cc:7681\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nDoFHandler::get_feconst FiniteElement< dim, spacedim > & get_fe(const types::fe_index index=0) const\\nDoFHandler::reinitvoid reinit(const Triangulation< dim, spacedim > &tria)\\nFEValuesBase::dofs_per_cellconst unsigned int dofs_per_cellDefinition fe_values_base.h:192\\nFEValuesBase::normal_vectorconst Tensor< 1, spacedim > & normal_vector(const unsigned int q_point) const\\nFEValuesBase::n_quadrature_pointsconst unsigned int n_quadrature_pointsDefinition fe_values_base.h:174\\nFEValuesBase::JxWdouble JxW(const unsigned int q_point) const\\nFiniteElementData::n_dofs_per_cellunsigned int n_dofs_per_cell() const\\nSparseDirectUMFPACK::vmultvoid vmult(Vector< double > &dst, const Vector< double > &src) constDefinition sparse_direct.cc:795\\nVector::reinitvirtual void reinit(const size_type N, const bool omit_zeroing_entries=false)\\ndof_tools.h\\nerror_estimator.h\\nfe_values.h\\nfe_collection.h\\nfe_nothing.h\\nfe_q.h\\nfe_system.h\\nfull_matrix.h\\nfunction.h\\ngrid_refinement.h\\ntria.h\\ngrid_generator.h\\nfe_values.h\\nutilities.h\\nDifferentiation::SD::fabsExpression fabs(const Expression &x)Definition symengine_math.cc:269\\nDifferentiation::SD::OptimizerType::lambda@ lambda\\nPhysics::Elasticity::Kinematics::dSymmetricTensor< 2, dim, Number > d(const Tensor< 2, dim, Number > &F, const Tensor< 2, dim, Number > &dF_dt)\\ninternal::EvaluatorQuantity::value@ value\\ndata_out.h\\nquadrature_lib.h\\nsparse_direct.h\\nsparse_matrix.h\\nvector.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"