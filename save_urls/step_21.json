"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_21.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-21 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-21 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-21 tutorial program\\n\\n\\nThis tutorial depends on step-20.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\nThe two phase flow problem\\nTime discretization\\nSpace discretization\\nLinear solvers\\nChoosing a time step\\nThe test case\\n\\n The commented program\\n\\nInclude files\\nThe TwoPhaseFlowProblem class\\nEquation data\\n\\nPressure right hand side\\nPressure boundary values\\nSaturation boundary values\\nInitial data\\n\\nThe inverse permeability tensor\\n\\nSingle curving crack permeability\\nRandom medium permeability\\n\\nThe inverse mobility and saturation functions\\nLinear solvers and preconditioners\\nTwoPhaseFlowProblem class implementation\\n\\nTwoPhaseFlowProblem::TwoPhaseFlowProblem\\nTwoPhaseFlowProblem::make_grid_and_dofs\\nTwoPhaseFlowProblem::assemble_system\\nTwoPhaseFlowProblem::assemble_rhs_S\\nTwoPhaseFlowProblem::solve\\nTwoPhaseFlowProblem::output_results\\nTwoPhaseFlowProblem::project_back_saturation\\nTwoPhaseFlowProblem::get_maximal_velocity\\nTwoPhaseFlowProblem::run\\n\\nThe main function\\n\\n\\n Results\\n\\nPossibilities for extensions\\n\\nSolvers\\nTime stepping\\nAdaptivity\\n\\n\\n The plain program\\n   \\n Introduction\\nThis program grew out of a student project by Yan Li at Texas A&M University. Most of the work for this program is by her.\\nIn this project, we propose a numerical simulation for two phase flow problems in porous media. This problem includes one elliptic equation and one nonlinear, time dependent transport equation. This is therefore also the first time-dependent tutorial program (besides the somewhat strange time-dependence of step-18).\\nThe equations covered here are an extension of the material already covered in step-20. In particular, they fall into the class of vector-valued problems. A toplevel overview of this topic can be found in the Handling vector valued problems topic.\\nThe two phase flow problem\\nModeling of two phase flow in porous media is important for both environmental remediation and the management of petroleum and groundwater reservoirs. Practical situations involving two phase flow include the dispersal of a nonaqueous phase liquid in an aquifer, or the joint movement of a mixture of fluids such as oil and water in a reservoir. Simulation models, if they are to provide realistic predictions, must accurately account for these effects.\\nTo derive the governing equations, consider two phase flow in a reservoir \\\\(\\\\Omega\\\\) under the assumption that the movement of fluids is dominated by viscous effects; i.e. we neglect the effects of gravity, compressibility, and capillary pressure. Porosity will be considered to be constant. We will denote variables referring to either of the two phases using subscripts \\\\(w\\\\) and \\\\(o\\\\), short for water and oil. The derivation of the equations holds for other pairs of fluids as well, however.\\nThe velocity with which molecules of each of the two phases move is determined by Darcy's law that states that the velocity is proportional to the pressure gradient:     \\n\\\\begin{eqnarray*}\\n  \\\\mathbf{u}_{j}\\n  =\\n  -\\\\frac{k_{rj}(S)}{\\\\mu_{j}} \\\\mathbf{K} \\\\cdot \\\\nabla p\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\mathbf{u}_{j}\\\\) is the velocity of phase \\\\(j=o,w\\\\), \\\\(K\\\\) is the permeability tensor, \\\\(k_{rj}\\\\) is the relative permeability of phase \\\\(j\\\\), \\\\(p\\\\) is the pressure and \\\\(\\\\mu_{j}\\\\) is the viscosity of phase \\\\(j\\\\). Finally, \\\\(S\\\\) is the saturation (volume fraction), i.e. a function with values between 0 and 1 indicating the composition of the mixture of fluids. In general, the coefficients \\\\(K, k_{rj}, \\\\mu\\\\) may be spatially dependent variables, and we will always treat them as non-constant functions in the following.\\nWe combine Darcy's law with the statement of conservation of mass for each phase,   \\n\\\\[\\n  \\\\textrm{div}\\\\ \\\\mathbf{u}_{j} = q_j,\\n\\\\]\\n\\n with a source term for each phase. By summing over the two phases, we can express the governing equations in terms of the so-called pressure equation:   \\n\\\\begin{eqnarray*}\\n- \\\\nabla \\\\cdot (\\\\mathbf{K}\\\\lambda(S) \\\\nabla p)= q.\\n\\\\end{eqnarray*}\\n\\n Here, \\\\(q\\\\) is the sum source term, and   \\n\\\\[\\n  \\\\lambda(S) = \\\\frac{k_{rw}(S)}{\\\\mu_{w}}+\\\\frac{k_{ro}(S)}{\\\\mu_{o}}\\n\\\\]\\n\\n is the total mobility.\\nSo far, this looks like an ordinary stationary, Poisson-like equation that we can solve right away with the techniques of the first few tutorial programs (take a look at step-6, for example, for something very similar). However, we have not said anything yet about the saturation, which of course is going to change as the fluids move around.\\nThe second part of the equations is the description of the dynamics of the saturation, i.e., how the relative concentration of the two fluids changes with time. The saturation equation for the displacing fluid (water) is given by the following conservation law:   \\n\\\\begin{eqnarray*}\\n  S_{t} + \\\\nabla \\\\cdot (F(S) \\\\mathbf{u}) = q_{w},\\n\\\\end{eqnarray*}\\n\\n which can be rewritten by using the product rule of the divergence operator in the previous equation:     \\n\\\\begin{eqnarray*}\\n  S_{t} + F(S) \\\\left[\\\\nabla \\\\cdot \\\\mathbf{u}\\\\right]\\n        + \\\\mathbf{u} \\\\cdot \\\\left[ \\\\nabla F(S)\\\\right]\\n  = S_{t} + F(S) q + \\\\mathbf{u} \\\\cdot \\\\nabla F(S) = q_{w}.\\n\\\\end{eqnarray*}\\n\\n Here, \\\\(q=\\\\nabla\\\\cdot \\\\mathbf{u}\\\\) is the total influx introduced above, and \\\\(q_{w}\\\\) is the flow rate of the displacing fluid (water). These two are related to the fractional flow \\\\(F(S)\\\\) in the following way:   \\n\\\\[\\n  q_{w} = F(S) q,\\n\\\\]\\n\\n where the fractional flow is often parameterized via the (heuristic) expression     \\n\\\\[\\n  F(S)\\n  =\\n  \\\\frac{k_{rw}(S)/\\\\mu_{w}}{k_{rw}(S)/\\\\mu_{w} + k_{ro}(S)/\\\\mu_{o}}.\\n\\\\]\\n\\n Putting it all together yields the saturation equation in the following, advected form:   \\n\\\\begin{eqnarray*}\\n  S_{t} + \\\\mathbf{u} \\\\cdot \\\\nabla F(S) = 0,\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\mathbf u\\\\) is the total velocity    \\n\\\\[\\n  \\\\mathbf{u} =\\n  \\\\mathbf{u}_{o} + \\\\mathbf{u}_{w} = -\\\\lambda(S) \\\\mathbf{K}\\\\cdot\\\\nabla p.\\n\\\\]\\n\\n Note that the advection equation contains the term  \\\\(\\\\mathbf{u} \\\\cdot \\\\nabla\\nF(S)\\\\) rather than \\\\(\\\\mathbf{u} \\\\cdot \\\\nabla S\\\\) to indicate that the saturation is not simply transported along; rather, since the two phases move with different velocities, the saturation can actually change even in the advected coordinate system. To see this, rewrite  \\\\(\\\\mathbf{u} \\\\cdot \\\\nabla F(S)\\n= \\\\mathbf{u} F'(S) \\\\cdot \\\\nabla S\\\\) to observe that the actual velocity with which the phase with saturation \\\\(S\\\\) is transported is \\\\(\\\\mathbf u F'(S)\\\\) whereas the other phase is transported at velocity \\\\(\\\\mathbf u (1-F'(S))\\\\). \\\\(F(S)\\\\) is consequently often referred to as the fractional flow.\\nIn summary, what we get are the following two equations:       \\n\\\\begin{eqnarray*}\\n  - \\\\nabla \\\\cdot (\\\\mathbf{K}\\\\lambda(S) \\\\nabla p) &=& q\\n  \\\\qquad \\\\textrm{in}\\\\ \\\\Omega\\\\times[0,T],\\n  \\\\\\\\\\n  S_{t} + \\\\mathbf{u} \\\\cdot \\\\nabla F(S) &=& 0\\n  \\\\qquad \\\\textrm{in}\\\\ \\\\Omega\\\\times[0,T].\\n\\\\end{eqnarray*}\\n\\n Here, \\\\(p=p(\\\\mathbf x, t), S=S(\\\\mathbf x, t)\\\\) are now time dependent functions: while at every time instant the flow field is in equilibrium with the pressure (i.e. we neglect dynamic accelerations), the saturation is transported along with the flow and therefore changes over time, in turn affected the flow field again through the dependence of the first equation on \\\\(S\\\\).\\nThis set of equations has a peculiar character: one of the two equations has a time derivative, the other one doesn't. This corresponds to the character that the pressure and velocities are coupled through an instantaneous constraint, whereas the saturation evolves over finite time scales.\\nSuch systems of equations are called Differential Algebraic Equations (DAEs), since one of the equations is a differential equation, the other is not (at least not with respect to the time variable) and is therefore an \\\"algebraic\\\" equation. (The notation comes from the field of ordinary differential equations, where everything that does not have derivatives with respect to the time variable is necessarily an algebraic equation.) This class of equations contains pretty well-known cases: for example, the time dependent Stokes and Navier-Stokes equations (where the algebraic constraint is that the divergence of the flow field, \\\\(\\\\textrm{div}\\\\ \\\\mathbf u\\\\), must be zero) as well as the time dependent Maxwell equations (here, the algebraic constraint is that the divergence of the electric displacement field equals the charge density, \\\\(\\\\textrm{div}\\\\ \\\\mathbf D = \\\\rho\\\\) and that the divergence of the magnetic flux density is zero:  \\\\(\\\\textrm{div}\\\\ \\\\mathbf\\nB = 0\\\\)); even the quasistatic model of step-18 falls into this category. We will see that the different character of the two equations will inform our discretization strategy for the two equations.\\nTime discretization\\nIn the reservoir simulation community, it is common to solve the equations derived above by going back to the first order, mixed formulation. To this end, we re-introduce the total velocity \\\\(\\\\mathbf u\\\\) and write the equations in the following form:     \\n\\\\begin{eqnarray*}\\n  \\\\mathbf{u}+\\\\mathbf{K}\\\\lambda(S) \\\\nabla p&=&0 \\\\\\\\\\n  \\\\nabla \\\\cdot\\\\mathbf{u} &=& q \\\\\\\\\\n  S_{t} + \\\\mathbf{u} \\\\cdot \\\\nabla F(S) &=& 0.\\n\\\\end{eqnarray*}\\n\\n This formulation has the additional benefit that we do not have to express the total velocity \\\\(\\\\mathbf u\\\\) appearing in the transport equation as a function of the pressure, but can rather take the primary variable for it. Given the saddle point structure of the first two equations and their similarity to the mixed Laplace formulation we have introduced in step-20, it will come as no surprise that we will use a mixed discretization again.\\nBut let's postpone this for a moment. The first business we have with these equations is to think about the time discretization. In reservoir simulation, there is a rather standard algorithm that we will use here. It first solves the pressure using an implicit equation, then the saturation using an explicit time stepping scheme. The algorithm is called IMPES for IMplicit Pressure Explicit Saturation and was first proposed a long time ago: by Sheldon et al. in 1959 and Stone and Gardner in 1961 (J. W. Sheldon, B. Zondek and W. T. Cardwell: One-dimensional, incompressible, non-capillary, two-phase fluid flow in a porous medium, Trans. SPE AIME, 216 (1959), pp. 290-296; H. L. Stone and A. O. Gardner Jr: Analysis of gas-cap or dissolved-gas reservoirs, Trans. SPE AIME, 222 (1961), pp. 92-104). In a slightly modified form, this algorithm can be written as follows: for each time step, solve     \\n\\\\begin{eqnarray*}\\n  \\\\mathbf{u}^{n+1}+\\\\mathbf{K}\\\\lambda(S^n) \\\\nabla p^{n+1}&=&0 \\\\\\\\\\n  \\\\nabla \\\\cdot\\\\mathbf{u}^{n+1} &=& q^{n+1} \\\\\\\\\\n  \\\\frac {S^{n+1}-S^n}{\\\\triangle t} + \\\\mathbf{u}^{n+1} \\\\cdot \\\\nabla F(S^n) &=& 0,\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\triangle t\\\\) is the length of a time step. Note how we solve the implicit pressure-velocity system that only depends on the previously computed saturation \\\\(S^n\\\\), and then do an explicit time step for \\\\(S^{n+1}\\\\) that only depends on the previously known \\\\(S^n\\\\) and the just computed \\\\(\\\\mathbf{u}^{n+1}\\\\). This way, we never have to iterate for the nonlinearities of the system as we would have if we used a fully implicit method. (In a more modern perspective, this should be seen as an \\\"operator\\nsplitting\\\" method. step-58 has a long description of the idea behind this.)\\nWe can then state the problem in weak form as follows, by multiplying each equation with test functions \\\\(\\\\mathbf v\\\\), \\\\(\\\\phi\\\\), and \\\\(\\\\sigma\\\\) and integrating terms by parts:       \\n\\\\begin{eqnarray*}\\n  \\\\left((\\\\mathbf{K}\\\\lambda(S^n))^{-1} \\\\mathbf{u}^{n+1},\\\\mathbf v\\\\right)_\\\\Omega -\\n  (p^{n+1}, \\\\nabla\\\\cdot\\\\mathbf v)_\\\\Omega &=&\\n  - (p^{n+1}, \\\\mathbf v)_{\\\\partial\\\\Omega}\\n  \\\\\\\\\\n  (\\\\nabla \\\\cdot\\\\mathbf{u}^{n+1}, \\\\phi)_\\\\Omega &=& (q^{n+1},\\\\phi)_\\\\Omega\\n\\\\end{eqnarray*}\\n\\n Note that in the first term, we have to prescribe the pressure \\\\(p^{n+1}\\\\) on the boundary \\\\(\\\\partial\\\\Omega\\\\) as boundary values for our problem. \\\\(\\\\mathbf n\\\\) denotes the unit outward normal vector to \\\\(\\\\partial K\\\\), as usual.\\nFor the saturation equation, we obtain after integrating by parts             \\n\\\\begin{eqnarray*}\\n  (S^{n+1}, \\\\sigma)_\\\\Omega\\n  -\\n  \\\\triangle t\\n  \\\\sum_K\\n  \\\\left\\\\{\\n  \\\\left(F(S^n), \\\\nabla \\\\cdot (\\\\mathbf{u}^{n+1} \\\\sigma)\\\\right)_K\\n  -\\n  \\\\left(F(S^n) (\\\\mathbf n \\\\cdot \\\\mathbf{u}^{n+1}, \\\\sigma\\\\right)_{\\\\partial K}\\n  \\\\right\\\\}\\n  &=&\\n  (S^n,\\\\sigma)_\\\\Omega.\\n\\\\end{eqnarray*}\\n\\n Using the fact that \\\\(\\\\nabla \\\\cdot \\\\mathbf{u}^{n+1}=q^{n+1}\\\\), we can rewrite the cell term to get an equation as follows:              \\n\\\\begin{eqnarray*}\\n  (S^{n+1}, \\\\sigma)_\\\\Omega\\n  -\\n  \\\\triangle t\\n  \\\\sum_K\\n  \\\\left\\\\{\\n  \\\\left(F(S^n) \\\\mathbf{u}^{n+1}, \\\\nabla \\\\sigma\\\\right)_K\\n  -\\n  \\\\left(F(S^n) (\\\\mathbf n \\\\cdot \\\\mathbf{u}^{n+1}), \\\\sigma\\\\right)_{\\\\partial K}\\n  \\\\right\\\\}\\n  &=&\\n  (S^n,\\\\sigma)_\\\\Omega +\\n  \\\\triangle t \\\\sum_K  \\\\left(F(S^n) q^{n+1}, \\\\sigma\\\\right)_K.\\n\\\\end{eqnarray*}\\n\\n We introduce an object of type DiscreteTime in order to keep track of the current value of time and time step in the code. This class encapsulates many complexities regarding adjusting time step size and stopping at a specified final time.\\nSpace discretization\\nIn each time step, we then apply the mixed finite method of step-20 to the velocity and pressure. To be well-posed, we choose Raviart-Thomas spaces \\\\(RT_{k}\\\\) for \\\\(\\\\mathbf{u}\\\\) and discontinuous elements of class \\\\(DGQ_{k}\\\\) for \\\\(p\\\\). For the saturation, we will also choose \\\\(DGQ_{k}\\\\) spaces.\\nSince we have discontinuous spaces, we have to think about how to evaluate terms on the interfaces between cells, since discontinuous functions are not really defined there. In particular, we have to give a meaning to the last term on the left hand side of the saturation equation. To this end, let us define that we want to evaluate it in the following sense:        \\n\\\\begin{eqnarray*}\\n  &&\\\\left(F(S^n) (\\\\mathbf n \\\\cdot \\\\mathbf{u}^{n+1}), \\\\sigma\\\\right)_{\\\\partial K}\\n  \\\\\\\\\\n  &&\\\\qquad =\\n  \\\\left(F(S^n_+) (\\\\mathbf n \\\\cdot \\\\mathbf{u}^{n+1}_+), \\\\sigma\\\\right)_{\\\\partial K_+}\\n  +\\n  \\\\left(F(S^n_-) (\\\\mathbf n \\\\cdot \\\\mathbf{u}^{n+1}_-), \\\\sigma\\\\right)_{\\\\partial K_-},\\n\\\\end{eqnarray*}\\n\\n where \\\\(\\\\partial K_{-} \\\\dealcoloneq \\\\{x\\\\in \\\\partial K, \\\\mathbf{u}(x) \\\\cdot \\\\mathbf{n}<0\\\\}\\\\) denotes the inflow boundary and  \\\\(\\\\partial K_{+} \\\\dealcoloneq \\\\{\\\\partial K \\\\setminus\\n\\\\partial K_{-}\\\\}\\\\) is the outflow part of the boundary. The quantities \\\\(S_+,\\\\mathbf{u}_+\\\\) then correspond to the values of these variables on the present cell, whereas \\\\(S_-,\\\\mathbf{u}_-\\\\) (needed on the inflow part of the boundary of \\\\(K\\\\)) are quantities taken from the neighboring cell. Some more context on discontinuous element techniques and evaluation of fluxes can also be found in step-12.\\nLinear solvers\\nThe linear solvers used in this program are a straightforward extension of the ones used in step-20 (but without LinearOperator). Essentially, we simply have to extend everything from two to three solution components. If we use the discrete spaces mentioned above and put shape functions into the bilinear forms, we arrive at the following linear system to be solved for time step \\\\(n+1\\\\):                    \\n\\\\[\\n\\\\left(\\n\\\\begin{array}{ccc}\\nM^u(S^{n}) & B^{T}& 0\\\\\\\\\\nB &    0 & 0\\\\\\\\\\n\\\\triangle t\\\\; H &    0& M^S\\n\\\\end{array}\\n\\\\right)\\n\\\\left(\\n\\\\begin{array}{c}\\n\\\\mathbf{U}^{n+1} \\\\\\\\ P^{n+1} \\\\\\\\ S^{n+1}\\n\\\\end{array}\\n\\\\right)\\n=\\n\\\\left(\\n\\\\begin{array}{c}\\n0 \\\\\\\\ F_2 \\\\\\\\ F_3\\n\\\\end{array}\\n\\\\right)\\n\\\\]\\n\\n where the individual matrices and vectors are defined as follows using shape functions \\\\(\\\\mathbf v_i\\\\) (of type Raviart Thomas \\\\(RT_k\\\\)) for velocities and \\\\(\\\\phi_i\\\\) (of type \\\\(DGQ_k\\\\)) for both pressures and saturations:                            \\n\\\\begin{eqnarray*}\\nM^u(S^n)_{ij} &=&\\n\\\\left((\\\\mathbf{K}\\\\lambda(S^n))^{-1} \\\\mathbf{v}_i,\\\\mathbf\\nv_j\\\\right)_\\\\Omega,\\n\\\\\\\\\\nB_{ij} &=&\\n-(\\\\nabla \\\\cdot \\\\mathbf v_j, \\\\phi_i)_\\\\Omega,\\n\\\\\\\\\\nH_{ij} &=&\\n  -\\n  \\\\sum_K\\n  \\\\left\\\\{\\n  \\\\left(F(S^n) \\\\mathbf v_i, \\\\nabla \\\\phi_j)\\\\right)_K\\n  -\\n  \\\\left(F(S^n_+) (\\\\mathbf n \\\\cdot (\\\\mathbf v_i)_+), \\\\phi_j\\\\right)_{\\\\partial K_+}\\n  -\\n  \\\\left(F(S^n_-) (\\\\mathbf n \\\\cdot (\\\\mathbf v_i)_-), \\\\phi_j\\\\right)_{\\\\partial K_-},\\n  \\\\right\\\\}\\n\\\\\\\\\\nM^S_{ij} &=&\\n(\\\\phi_i, \\\\phi_j)_\\\\Omega,\\n\\\\\\\\\\n(F_2)_i &=&\\n-(q^{n+1},\\\\phi_i)_\\\\Omega,\\n\\\\\\\\\\n(F_3)_i &=&\\n(S^n,\\\\phi_i)_\\\\Omega +\\\\triangle t \\\\sum_K  \\\\left(F(S^n) q^{n+1}, \\\\phi_i\\\\right)_K.\\n\\\\end{eqnarray*}\\n\\nNoteDue to historical accidents, the role of matrices \\\\(B\\\\) and \\\\(B^T\\\\) has been reverted in this program compared to step-20. In other words, here \\\\(B\\\\) refers to the divergence and \\\\(B^T\\\\) to the gradient operators when it was the other way around in step-20.\\nThe system above presents a complication: Since the matrix \\\\(H_{ij}\\\\) depends on \\\\(\\\\mathbf u^{n+1}\\\\) implicitly (the velocities are needed to determine which parts of the boundaries \\\\(\\\\partial K\\\\) of cells are influx or outflux parts), we can only assemble this matrix after we have solved for the velocities.\\nThe solution scheme then involves the following steps: \\n\\nSolve for the pressure \\\\(p^{n+1}\\\\) using the Schur complement technique introduced in step-20.\\n\\n\\n\\nSolve for the velocity \\\\(\\\\mathbf u^{n+1}\\\\) as also discussed in step-20.\\n\\n\\n\\nCompute the term \\\\(F_3-\\\\triangle t\\\\; H \\\\mathbf u^{n+1}\\\\), using the just computed velocities.\\n\\n\\n\\nSolve for the saturation \\\\(S^{n+1}\\\\). \\n\\nIn this scheme, we never actually build the matrix \\\\(H\\\\), but rather generate the right hand side of the third equation once we are ready to do so.\\nIn the program, we use a variable solution to store the solution of the present time step. At the end of each step, we copy its content, i.e. all three of its block components, into the variable old_solution for use in the next time step.\\nChoosing a time step\\nA general rule of thumb in hyperbolic transport equations like the equation we have to solve for the saturation equation is that if we use an explicit time stepping scheme, then we should use a time step such that the distance that a particle can travel within one time step is no larger than the diameter of a single cell. In other words, here, we should choose   \\n\\\\[\\n  \\\\triangle t_{n+1} \\\\le \\\\frac h{|\\\\mathbf{u}^{n+1}(\\\\mathbf{x})|}.\\n\\\\]\\n\\n Fortunately, we are in a position where we can do that: we only need the time step when we want to assemble the right hand side of the saturation equation, which is after we have already solved for \\\\(\\\\mathbf{u}^{n+1}\\\\). All we therefore have to do after solving for the velocity is to loop over all quadrature points in the domain and determine the maximal magnitude of the velocity. We can then set the time step for the saturation equation to   \\n\\\\[\\n  \\\\triangle t_{n+1} = \\\\frac {\\\\min_K h_K}{\\\\max_{\\\\mathbf{x}}|\\\\mathbf{u}^{n+1}(\\\\mathbf{x})|}.\\n\\\\]\\n\\nWhy is it important to do this? If we don't, then we will end up with lots of places where our saturation is larger than one or less than zero, as can easily be verified. (Remember that the saturation corresponds to something like the water fraction in the fluid mixture, and therefore must physically be between 0 and 1.) On the other hand, if we choose our time step according to the criterion listed above, this only happens very very infrequently \\u2014 in fact only once for the entire run of the program. However, to be on the safe side, however, we run a function project_back_saturation at the end of each time step, that simply projects the saturation back onto the interval \\\\([0,1]\\\\), should it have gotten out of the physical range. This is useful since the functions \\\\(\\\\lambda(S)\\\\) and \\\\(F(S)\\\\) do not represent anything physical outside this range, and we should not expect the program to do anything useful once we have negative saturations or ones larger than one.\\nNote that we will have similar restrictions on the time step also in step-23 and step-24 where we solve the time dependent wave equation, another hyperbolic problem. We will also come back to the issue of time step choice below in the section on possible extensions to this program.\\nThe test case\\nFor simplicity, this program assumes that there is no source, \\\\(q=0\\\\), and that the heterogeneous porous medium is isotropic  \\\\(\\\\mathbf{K}(\\\\mathbf{x}) =\\nk(\\\\mathbf{x}) \\\\mathbf{I}\\\\). The first one of these is a realistic assumption in oil reservoirs: apart from injection and production wells, there are usually no mechanisms for fluids to appear or disappear out of the blue. The second one is harder to justify: on a microscopic level, most rocks are isotropic, because they consist of a network of interconnected pores. However, this microscopic scale is out of the range of today's computer simulations, and we have to be content with simulating things on the scale of meters. On that scale, however, fluid transport typically happens through a network of cracks in the rock, rather than through pores. However, cracks often result from external stress fields in the rock layer (for example from tectonic faulting) and the cracks are therefore roughly aligned. This leads to a situation where the permeability is often orders of magnitude larger in the direction parallel to the cracks than perpendicular to the cracks. A problem typically faces in reservoir simulation, however, is that the modeler doesn't know the direction of cracks because oil reservoirs are not accessible to easy inspection. The only solution in that case is to assume an effective, isotropic permeability.\\nWhatever the matter, both of these restrictions, no sources and isotropy, would be easy to lift with a few lines of code in the program.\\nNext, for simplicity, our numerical simulation will be done on the unit cell \\\\(\\\\Omega = [0,1]\\\\times [0,1]\\\\) for \\\\(t\\\\in [0,T]\\\\). Our initial conditions are \\\\(S(\\\\mathbf{x},0)=0\\\\); in the oil reservoir picture, where \\\\(S\\\\) would indicate the water saturation, this means that the reservoir contains pure oil at the beginning. Note that we do not need any initial conditions for pressure or velocity, since the equations do not contain time derivatives of these variables. Finally, we impose the following pressure boundary conditions:   \\n\\\\[\\n  p(\\\\mathbf{x},t)=1-x_1 \\\\qquad \\\\textrm{on}\\\\ \\\\partial\\\\Omega.\\n\\\\]\\n\\n Since the pressure and velocity solve a mixed form Poisson equation, the imposed pressure leads to a resulting flow field for the velocity. On the other hand, this flow field determines whether a piece of the boundary is of inflow or outflow type, which is of relevance because we have to impose boundary conditions for the saturation on the inflow part of the boundary,    \\n\\\\[\\n  \\\\Gamma_{in}(t) = \\\\{\\\\mathbf{x}\\\\in\\\\partial\\\\Omega:\\n                     \\\\mathbf{n} \\\\cdot \\\\mathbf{u}(\\\\mathbf{x},t) < 0\\\\}.\\n\\\\]\\n\\n On this inflow boundary, we impose the following saturation values:     \\n\\\\begin{eqnarray}\\n  S(\\\\mathbf{x},t) = 1 & \\\\textrm{on}\\\\ \\\\Gamma_{in}\\\\cap\\\\{x_1=0\\\\},\\n  \\\\\\\\\\n  S(\\\\mathbf{x},t) = 0 & \\\\textrm{on}\\\\ \\\\Gamma_{in}\\\\backslash \\\\{x_1=0\\\\}.\\n\\\\end{eqnarray}\\n\\n In other words, we have pure water entering the reservoir at the left, whereas the other parts of the boundary are in contact with undisturbed parts of the reservoir and whenever influx occurs on these boundaries, pure oil will enter.\\nIn our simulations, we choose the total mobility as   \\n\\\\[\\n  \\\\lambda (S) = \\\\frac{1.0}{\\\\mu} S^2 +(1-S)^2\\n\\\\]\\n\\n where we use \\\\(\\\\mu=0.2\\\\) for the viscosity. In addition, the fractional flow of water is given by   \\n\\\\[\\n  F(S)=\\\\frac{S^2}{S^2+\\\\mu (1-S)^2}\\n\\\\]\\n\\nNoteComing back to this testcase in step-43 several years later revealed an oddity in the setup of this testcase. To this end, consider that we can rewrite the advection equation for the saturation as  \\\\(S_{t} + (\\\\mathbf{u}\\nF'(S)) \\\\cdot \\\\nabla S = 0\\\\). Now, at the initial time, we have \\\\(S=0\\\\), and with the given choice of function \\\\(F(S)\\\\), we happen to have \\\\(F'(0)=0\\\\). In other words, at \\\\(t=0\\\\), the equation reduces to \\\\(S_t=0\\\\) for all \\\\(\\\\mathbf x\\\\), so the saturation is zero everywhere and it is going to stay zero everywhere! This is despite the fact that \\\\(\\\\mathbf u\\\\) is not necessarily zero: the combined fluid is moving, but we've chosen our partial flux \\\\(F(S)\\\\) in such a way that infinitesimal amounts of wetting fluid also only move at infinitesimal speeds (i.e., they stick to the medium more than the non-wetting phase in which they are embedded). That said, how can we square this with the knowledge that wetting fluid is invading from the left, leading to the flow patterns seen in the results section? That's where we get into mathematics: Equations like the transport equation we are considering here have infinitely many solutions, but only one of them is physical: the one that results from the so-called viscosity limit, called the viscosity solution. The thing is that with discontinuous elements we arrive at this viscosity limit because using a numerical flux introduces a finite amount of artificial viscosity into the numerical scheme. On the other hand, in step-43, we use an artificial viscosity that is proportional to \\\\(\\\\|\\\\mathbf u F'(S)\\\\|\\\\) on every cell, which at the initial time is zero. Thus, the saturation there is zero and remains zero; the solution we then get is one solution of the advection equation, but the method does not converge to the viscosity solution without further changes. We will therefore use a different initial condition in that program.\\nFinally, to come back to the description of the testcase, we will show results for computations with the two permeability functions introduced at the end of the results section of step-20: \\n\\nA function that models a single, winding crack that snakes through the domain. In analogy to step-20, but taking care of the slightly different geometry we have here, we describe this by the following function:     \\n\\\\[\\n    k(\\\\mathbf x)\\n    =\\n    \\\\max \\\\left\\\\{ e^{-\\\\left(\\\\frac{x_2-\\\\frac 12 - 0.1\\\\sin(10x_1)}{0.1}\\\\right)^2}, 0.01 \\\\right\\\\}.\\n  \\\\]\\n\\n Taking the maximum is necessary to ensure that the ratio between maximal and minimal permeability remains bounded. If we don't do that, permeabilities will span many orders of magnitude. On the other hand, the ratio between maximal and minimal permeability is a factor in the condition number of the Schur complement matrix, and if too large leads to problems for which our linear solvers will no longer converge properly.\\n\\n\\n\\nA function that models a somewhat random medium. Here, we choose         \\n\\\\begin{eqnarray*}\\n    k(\\\\mathbf x)\\n    &=&\\n    \\\\min \\\\left\\\\{ \\\\max \\\\left\\\\{ \\\\sum_{i=1}^N \\\\sigma_i(\\\\mathbf{x}), 0.01 \\\\right\\\\}, 4\\\\right\\\\},\\n    \\\\\\\\\\n    \\\\sigma_i(\\\\mathbf x)\\n    &=&\\n    e^{-\\\\left(\\\\frac{|\\\\mathbf{x}-\\\\mathbf{x}_i|}{0.05}\\\\right)^2},\\n  \\\\end{eqnarray*}\\n\\n where the centers \\\\(\\\\mathbf{x}_i\\\\) are \\\\(N\\\\) randomly chosen locations inside the domain. This function models a domain in which there are \\\\(N\\\\) centers of higher permeability (for example where rock has cracked) embedded in a matrix of more pristine, unperturbed background rock. Note that here we have cut off the permeability function both above and below to ensure a bounded condition number. \\n\\n The commented program\\nThis program is an adaptation of step-20 and includes some technique of DG methods from step-12. A good part of the program is therefore very similar to step-20 and we will not comment again on these parts. Only the new stuff will be discussed in more detail.\\n Include files\\nAll of these include files have been used before:\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/block_vector.h>\\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/block_sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/precondition.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 #include <deal.II/grid/grid_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_renumbering.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_raviart_thomas.h>\\n\\u00a0 #include <deal.II/fe/fe_dgq.h>\\n\\u00a0 #include <deal.II/fe/fe_system.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 \\n\\u00a0 #include <iostream>\\n\\u00a0 #include <fstream>\\n\\u00a0 \\nIn this program, we use a tensor-valued coefficient. Since it may have a spatial dependence, we consider it a tensor-valued function. The following include file provides the TensorFunction class that offers such functionality:\\n\\u00a0 #include <deal.II/base/tensor_function.h>\\n\\u00a0 \\nAdditionally, we use the class DiscreteTime to perform operations related to time incrementation.\\n\\u00a0 #include <deal.II/base/discrete_time.h>\\n\\u00a0 \\nThe last step is as in all previous programs:\\n\\u00a0 namespace Step21\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n The TwoPhaseFlowProblem class\\nThis is the main class of the program. It is close to the one of step-20, but with a few additional functions:\\n\\n\\nassemble_rhs_S assembles the right hand side of the saturation equation. As explained in the introduction, this can't be integrated into assemble_rhs since it depends on the velocity that is computed in the first part of the time step.\\n\\n\\n\\nget_maximal_velocity does as its name suggests. This function is used in the computation of the time step size.\\n\\n\\n\\nproject_back_saturation resets all saturation degrees of freedom with values less than zero to zero, and all those with saturations greater than one to one. \\n\\nThe rest of the class should be pretty much obvious. The viscosity variable stores the viscosity \\\\(\\\\mu\\\\) that enters several of the formulas in the nonlinear equations. The variable time keeps track of the time information within the simulation.\\n\\u00a0   template <int dim>\\n\\u00a0   class TwoPhaseFlowProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     TwoPhaseFlowProblem(const unsigned int degree);\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void   make_grid_and_dofs();\\n\\u00a0     void   assemble_system();\\n\\u00a0     void   assemble_rhs_S();\\n\\u00a0     double get_maximal_velocity() const;\\n\\u00a0     void   solve();\\n\\u00a0     void   project_back_saturation();\\n\\u00a0     void   output_results() const;\\n\\u00a0 \\n\\u00a0     const unsigned int degree;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     const FESystem<dim> fe;\\n\\u00a0     DoFHandler<dim>     dof_handler;\\n\\u00a0 \\n\\u00a0     BlockSparsityPattern      sparsity_pattern;\\n\\u00a0     BlockSparseMatrix<double> system_matrix;\\n\\u00a0 \\n\\u00a0     const unsigned int n_refinement_steps;\\n\\u00a0 \\n\\u00a0     DiscreteTime time;\\n\\u00a0     double       viscosity;\\n\\u00a0 \\n\\u00a0     BlockVector<double> solution;\\n\\u00a0     BlockVector<double> old_solution;\\n\\u00a0     BlockVector<double> system_rhs;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\nBlockSparseMatrixDefinition block_sparse_matrix.h:50\\nBlockSparsityPatternDefinition block_sparsity_pattern.h:437\\nBlockVectorDefinition block_vector.h:71\\nDiscreteTimeDefinition discrete_time.h:233\\nDoFHandlerDefinition dof_handler.h:317\\nFESystemDefinition fe_system.h:208\\nTriangulationDefinition tria.h:1323\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n Equation data\\n Pressure right hand side\\nAt present, the right hand side of the pressure equation is simply the zero function. However, the rest of the program is fully equipped to deal with anything else, if this is desired:\\n\\u00a0   template <int dim>\\n\\u00a0   class PressureRightHandSide : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     PressureRightHandSide()\\n\\u00a0       : Function<dim>(1)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim> & /*p*/,\\n\\u00a0                          const unsigned int /*component*/ = 0) const override\\n\\u00a0     {\\n\\u00a0       return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunctionDefinition function.h:152\\nFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const\\nPointDefinition point.h:111\\n Pressure boundary values\\nThe next are pressure boundary values. As mentioned in the introduction, we choose a linear pressure field:\\n\\u00a0   template <int dim>\\n\\u00a0   class PressureBoundaryValues : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     PressureBoundaryValues()\\n\\u00a0       : Function<dim>(1)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim> &p,\\n\\u00a0                          const unsigned int /*component*/ = 0) const override\\n\\u00a0     {\\n\\u00a0       return 1 - p[0];\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n Saturation boundary values\\nThen we also need boundary values on the inflow portions of the boundary. The question whether something is an inflow part is decided when assembling the right hand side, we only have to provide a functional description of the boundary values. This is as explained in the introduction:\\n\\u00a0   template <int dim>\\n\\u00a0   class SaturationBoundaryValues : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     SaturationBoundaryValues()\\n\\u00a0       : Function<dim>(1)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim> &p,\\n\\u00a0                          const unsigned int /*component*/ = 0) const override\\n\\u00a0     {\\n\\u00a0       if (p[0] == 0)\\n\\u00a0         return 1;\\n\\u00a0       else\\n\\u00a0         return 0;\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n Initial data\\nFinally, we need initial data. In reality, we only need initial data for the saturation, but we are lazy, so we will later, before the first time step, simply interpolate the entire solution for the previous time step from a function that contains all vector components.\\nWe therefore simply create a function that returns zero in all components. We do that by simply forward every function to the Functions::ZeroFunction class. Why not use that right away in the places of this program where we presently use the InitialValues class? Because this way it is simpler to later go back and choose a different function for initial values.\\n\\u00a0   template <int dim>\\n\\u00a0   class InitialValues : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     InitialValues()\\n\\u00a0       : Function<dim>(dim + 2)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override\\n\\u00a0     {\\n\\u00a0       return Functions::ZeroFunction<dim>(dim + 2).value(p, component);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     virtual void vector_value(const Point<dim> &p,\\n\\u00a0                               Vector<double>   &values) const override\\n\\u00a0     {\\n\\u00a0       Functions::ZeroFunction<dim>(dim + 2).vector_value(p, values);\\n\\u00a0     }\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunction::vector_valuevirtual void vector_value(const Point< dim > &p, Vector< RangeNumberType > &values) const\\nFunctions::ConstantFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const override\\nFunctions::ConstantFunction::vector_valuevirtual void vector_value(const Point< dim > &p, Vector< RangeNumberType > &return_value) const override\\nFunctions::ZeroFunctionDefinition function.h:510\\nVectorDefinition vector.h:120\\n The inverse permeability tensor\\nAs announced in the introduction, we implement two different permeability tensor fields. Each of them we put into a namespace of its own, so that it will be easy later to replace use of one by the other in the code.\\n Single curving crack permeability\\nThe first function for the permeability was the one that models a single curving crack. It was already used at the end of step-20, and its functional form is given in the introduction of the present tutorial program. As in some previous programs, we have to declare a (seemingly unnecessary) default constructor of the KInverse class to avoid warnings from some compilers:\\n\\u00a0   namespace SingleCurvingCrack\\n\\u00a0   {\\n\\u00a0     template <int dim>\\n\\u00a0     class KInverse : public TensorFunction<2, dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       KInverse()\\n\\u00a0         : TensorFunction<2, dim>()\\n\\u00a0       {}\\n\\u00a0 \\n\\u00a0       virtual void\\n\\u00a0       value_list(const std::vector<Point<dim>> &points,\\n\\u00a0                  std::vector<Tensor<2, dim>>   &values) const override\\n\\u00a0       {\\n\\u00a0         AssertDimension(points.size(), values.size());\\n\\u00a0 \\n\\u00a0         for (unsigned int p = 0; p < points.size(); ++p)\\n\\u00a0           {\\n\\u00a0             values[p].clear();\\n\\u00a0 \\n\\u00a0             const double distance_to_flowline =\\n\\u00a0               std::fabs(points[p][1] - 0.5 - 0.1 * std::sin(10 * points[p][0]));\\n\\u00a0 \\n\\u00a0             const double permeability =\\n\\u00a0               std::max(std::exp(-(distance_to_flowline * distance_to_flowline) /\\n\\u00a0                                 (0.1 * 0.1)),\\n\\u00a0                        0.01);\\n\\u00a0 \\n\\u00a0             for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0               values[p][d][d] = 1. / permeability;\\n\\u00a0           }\\n\\u00a0       }\\n\\u00a0     };\\n\\u00a0   } // namespace SingleCurvingCrack\\n\\u00a0 \\n\\u00a0 \\nTensorFunctionDefinition tensor_function.h:58\\nTensorDefinition tensor.h:471\\nAssertDimension#define AssertDimension(dim1, dim2)Definition exceptions.h:1985\\nstd::exp::VectorizedArray< Number, width > exp(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6829\\nstd::max::VectorizedArray< Number, width > max(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6943\\nstd::sin::VectorizedArray< Number, width > sin(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6589\\n Random medium permeability\\nThis function does as announced in the introduction, i.e. it creates an overlay of exponentials at random places. There is one thing worth considering for this class. The issue centers around the problem that the class creates the centers of the exponentials using a random function. If we therefore created the centers each time we create an object of the present type, we would get a different list of centers each time. That's not what we expect from classes of this type: they should reliably represent the same function.\\nThe solution to this problem is to make the list of centers a static member variable of this class, i.e. there exists exactly one such variable for the entire program, rather than for each object of this type. That's exactly what we are going to do.\\nThe next problem, however, is that we need a way to initialize this variable. Since this variable is initialized at the beginning of the program, we can't use a regular member function for that since there may not be an object of this type around at the time. The C++ standard therefore says that only non-member and static member functions can be used to initialize a static variable. We use the latter possibility by defining a function get_centers that computes the list of center points when called.\\nNote that this class works just fine in both 2d and 3d, with the only difference being that we use more points in 3d: by experimenting we find that we need more exponentials in 3d than in 2d (we have more ground to cover, after all, if we want to keep the distance between centers roughly equal), so we choose 40 in 2d and 100 in 3d. For any other dimension, the function does presently not know what to do so simply throws an exception indicating exactly this.\\n\\u00a0   namespace RandomMedium\\n\\u00a0   {\\n\\u00a0     template <int dim>\\n\\u00a0     class KInverse : public TensorFunction<2, dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       KInverse()\\n\\u00a0         : TensorFunction<2, dim>()\\n\\u00a0       {}\\n\\u00a0 \\n\\u00a0       virtual void\\n\\u00a0       value_list(const std::vector<Point<dim>> &points,\\n\\u00a0                  std::vector<Tensor<2, dim>>   &values) const override\\n\\u00a0       {\\n\\u00a0         AssertDimension(points.size(), values.size());\\n\\u00a0 \\n\\u00a0         for (unsigned int p = 0; p < points.size(); ++p)\\n\\u00a0           {\\n\\u00a0             values[p].clear();\\n\\u00a0 \\n\\u00a0             double permeability = 0;\\n\\u00a0             for (unsigned int i = 0; i < centers.size(); ++i)\\n\\u00a0               permeability += std::exp(-(points[p] - centers[i]).norm_square() /\\n\\u00a0                                        (0.05 * 0.05));\\n\\u00a0 \\n\\u00a0             const double normalized_permeability =\\n\\u00a0               std::min(std::max(permeability, 0.01), 4.);\\n\\u00a0 \\n\\u00a0             for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0               values[p][d][d] = 1. / normalized_permeability;\\n\\u00a0           }\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     private:\\n\\u00a0       static std::vector<Point<dim>> centers;\\n\\u00a0 \\n\\u00a0       static std::vector<Point<dim>> get_centers()\\n\\u00a0       {\\n\\u00a0         const unsigned int N =\\n\\u00a0           (dim == 2 ? 40 : (dim == 3 ? 100 : throw ExcNotImplemented()));\\n\\u00a0 \\n\\u00a0         std::vector<Point<dim>> centers_list(N);\\n\\u00a0         for (unsigned int i = 0; i < N; ++i)\\n\\u00a0           for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0             centers_list[i][d] = static_cast<double>(rand()) / RAND_MAX;\\n\\u00a0 \\n\\u00a0         return centers_list;\\n\\u00a0       }\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     std::vector<Point<dim>> KInverse<dim>::centers =\\n\\u00a0       KInverse<dim>::get_centers();\\n\\u00a0   } // namespace RandomMedium\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nPhysics::Elasticity::Kinematics::dSymmetricTensor< 2, dim, Number > d(const Tensor< 2, dim, Number > &F, const Tensor< 2, dim, Number > &dF_dt)\\nstd::min::VectorizedArray< Number, width > min(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6960\\n The inverse mobility and saturation functions\\nThere are two more pieces of data that we need to describe, namely the inverse mobility function and the saturation curve. Their form is also given in the introduction:\\n\\u00a0   double mobility_inverse(const double S, const double viscosity)\\n\\u00a0   {\\n\\u00a0     return 1.0 / (1.0 / viscosity * S * S + (1 - S) * (1 - S));\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0   double fractional_flow(const double S, const double viscosity)\\n\\u00a0   {\\n\\u00a0     return S * S / (S * S + viscosity * (1 - S) * (1 - S));\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n Linear solvers and preconditioners\\nThe linear solvers we use are also completely analogous to the ones used in step-20. The following classes are therefore copied verbatim from there. Note that the classes here are not only copied from step-20, but also duplicate classes in deal.II. In a future version of this example, they should be replaced by an efficient method, though. There is a single change: if the size of a linear system is small, i.e. when the mesh is very coarse, then it is sometimes not sufficient to set a maximum of src.size() CG iterations before the solver in the vmult() function converges. (This is, of course, a result of numerical round-off, since we know that on paper, the CG method converges in at most src.size() steps.) As a consequence, we set the maximum number of iterations equal to the maximum of the size of the linear system and 200.\\n\\u00a0   template <class MatrixType>\\n\\u00a0   class InverseMatrix : public Subscriptor\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     InverseMatrix(const MatrixType &m)\\n\\u00a0       : matrix(&m)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     void vmult(Vector<double> &dst, const Vector<double> &src) const\\n\\u00a0     {\\n\\u00a0       SolverControl solver_control(std::max<unsigned int>(src.size(), 200),\\n\\u00a0                                    1e-8 * src.l2_norm());\\n\\u00a0       SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0 \\n\\u00a0       dst = 0;\\n\\u00a0 \\n\\u00a0       cg.solve(*matrix, dst, src, PreconditionIdentity());\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     const SmartPointer<const MatrixType> matrix;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   class SchurComplement : public Subscriptor\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     SchurComplement(const BlockSparseMatrix<double>           &A,\\n\\u00a0                     const InverseMatrix<SparseMatrix<double>> &Minv)\\n\\u00a0       : system_matrix(&A)\\n\\u00a0       , m_inverse(&Minv)\\n\\u00a0       , tmp1(A.block(0, 0).m())\\n\\u00a0       , tmp2(A.block(0, 0).m())\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     void vmult(Vector<double> &dst, const Vector<double> &src) const\\n\\u00a0     {\\n\\u00a0       system_matrix->block(0, 1).vmult(tmp1, src);\\n\\u00a0       m_inverse->vmult(tmp2, tmp1);\\n\\u00a0       system_matrix->block(1, 0).vmult(dst, tmp2);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     const SmartPointer<const BlockSparseMatrix<double>>           system_matrix;\\n\\u00a0     const SmartPointer<const InverseMatrix<SparseMatrix<double>>> m_inverse;\\n\\u00a0 \\n\\u00a0     mutable Vector<double> tmp1, tmp2;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   class ApproximateSchurComplement : public Subscriptor\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     ApproximateSchurComplement(const BlockSparseMatrix<double> &A)\\n\\u00a0       : system_matrix(&A)\\n\\u00a0       , tmp1(A.block(0, 0).m())\\n\\u00a0       , tmp2(A.block(0, 0).m())\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     void vmult(Vector<double> &dst, const Vector<double> &src) const\\n\\u00a0     {\\n\\u00a0       system_matrix->block(0, 1).vmult(tmp1, src);\\n\\u00a0       system_matrix->block(0, 0).precondition_Jacobi(tmp2, tmp1);\\n\\u00a0       system_matrix->block(1, 0).vmult(dst, tmp2);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     const SmartPointer<const BlockSparseMatrix<double>> system_matrix;\\n\\u00a0 \\n\\u00a0     mutable Vector<double> tmp1, tmp2;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nPreconditionIdentityDefinition precondition.h:220\\nSmartPointerDefinition smartpointer.h:93\\nSolverCGDefinition solver_cg.h:179\\nSolverControlDefinition solver_control.h:67\\nSparseMatrixDefinition sparse_matrix.h:520\\nSubscriptorDefinition subscriptor.h:60\\nint\\nstdSTL namespace.\\n TwoPhaseFlowProblem class implementation\\nHere now the implementation of the main class. Much of it is actually copied from step-20, so we won't comment on it in much detail. You should try to get familiar with that program first, then most of what is happening here should be mostly clear.\\n TwoPhaseFlowProblem::TwoPhaseFlowProblem\\nFirst for the constructor. We use \\\\(RT_k \\\\times DQ_k \\\\times DQ_k\\\\) spaces. For initializing the DiscreteTime object, we don't set the time step size in the constructor because we don't have its value yet. The time step size is initially set to zero, but it will be computed before it is needed to increment time, as described in a subsection of the introduction. The time object internally prevents itself from being incremented when \\\\(dt = 0\\\\), forcing us to set a non-zero desired size for \\\\(dt\\\\) before advancing time.\\n\\u00a0   template <int dim>\\n\\u00a0   TwoPhaseFlowProblem<dim>::TwoPhaseFlowProblem(const unsigned int degree)\\n\\u00a0     : degree(degree)\\n\\u00a0     , fe(FE_RaviartThomas<dim>(degree),\\n\\u00a0          FE_DGQ<dim>(degree),\\n\\u00a0          FE_DGQ<dim>(degree))\\n\\u00a0     , dof_handler(triangulation)\\n\\u00a0     , n_refinement_steps(5)\\n\\u00a0     , time(/*start time*/ 0., /*end time*/ 1.)\\n\\u00a0     , viscosity(0.2)\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFE_DGQDefinition fe_dgq.h:112\\nFE_RaviartThomasDefinition fe_raviart_thomas.h:128\\n TwoPhaseFlowProblem::make_grid_and_dofs\\nThis next function starts out with well-known functions calls that create and refine a mesh, and then associate degrees of freedom with it. It does all the same things as in step-20, just now for three components instead of two.\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::make_grid_and_dofs()\\n\\u00a0   {\\n\\u00a0     GridGenerator::hyper_cube(triangulation, 0, 1);\\n\\u00a0     triangulation.refine_global(n_refinement_steps);\\n\\u00a0 \\n\\u00a0     dof_handler.distribute_dofs(fe);\\n\\u00a0     DoFRenumbering::component_wise(dof_handler);\\n\\u00a0 \\n\\u00a0     const std::vector<types::global_dof_index> dofs_per_component =\\n\\u00a0       DoFTools::count_dofs_per_fe_component(dof_handler);\\n\\u00a0     const unsigned int n_u = dofs_per_component[0],\\n\\u00a0                        n_p = dofs_per_component[dim],\\n\\u00a0                        n_s = dofs_per_component[dim + 1];\\n\\u00a0 \\n\\u00a0     std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << std::endl\\n\\u00a0               << \\\"Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n\\u00a0               << \\\" (\\\" << n_u << '+' << n_p << '+' << n_s << ')' << std::endl\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     const std::vector<types::global_dof_index> block_sizes = {n_u, n_p, n_s};\\n\\u00a0     BlockDynamicSparsityPattern                dsp(block_sizes, block_sizes);\\n\\u00a0     DoFTools::make_sparsity_pattern(dof_handler, dsp);\\n\\u00a0 \\n\\u00a0     sparsity_pattern.copy_from(dsp);\\n\\u00a0     system_matrix.reinit(sparsity_pattern);\\n\\u00a0 \\n\\u00a0     solution.reinit(block_sizes);\\n\\u00a0     old_solution.reinit(block_sizes);\\n\\u00a0     system_rhs.reinit(block_sizes);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nBlockDynamicSparsityPatternDefinition block_sparsity_pattern.h:549\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nDoFRenumbering::component_wisevoid component_wise(DoFHandler< dim, spacedim > &dof_handler, const std::vector< unsigned int > &target_component=std::vector< unsigned int >())Definition dof_renumbering.cc:666\\nDoFTools::count_dofs_per_fe_componentstd::vector< types::global_dof_index > count_dofs_per_fe_component(const DoFHandler< dim, spacedim > &dof_handler, const bool vector_valued_once=false, const std::vector< unsigned int > &target_component={})Definition dof_tools.cc:2012\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\n TwoPhaseFlowProblem::assemble_system\\nThis is the function that assembles the linear system, or at least everything except the (1,3) block that depends on the still-unknown velocity computed during this time step (we deal with this in assemble_rhs_S). Much of it is again as in step-20, but we have to deal with some nonlinearity this time. However, the top of the function is pretty much as usual (note that we set matrix and right hand side to zero at the beginning \\u2014 something we didn't have to do for stationary problems since there we use each matrix object only once and it is empty at the beginning anyway).\\nNote that in its present form, the function uses the permeability implemented in the RandomMedium::KInverse class. Switching to the single curved crack permeability function is as simple as just changing the namespace name.\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::assemble_system()\\n\\u00a0   {\\n\\u00a0     system_matrix = 0;\\n\\u00a0     system_rhs    = 0;\\n\\u00a0 \\n\\u00a0     const QGauss<dim>     quadrature_formula(degree + 2);\\n\\u00a0     const QGauss<dim - 1> face_quadrature_formula(degree + 2);\\n\\u00a0 \\n\\u00a0     FEValues<dim>     fe_values(fe,\\n\\u00a0                             quadrature_formula,\\n\\u00a0                             update_values | update_gradients |\\n\\u00a0                               update_quadrature_points | update_JxW_values);\\n\\u00a0     FEFaceValues<dim> fe_face_values(fe,\\n\\u00a0                                      face_quadrature_formula,\\n\\u00a0                                      update_values | update_normal_vectors |\\n\\u00a0                                        update_quadrature_points |\\n\\u00a0                                        update_JxW_values);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n\\u00a0 \\n\\u00a0     const unsigned int n_q_points      = quadrature_formula.size();\\n\\u00a0     const unsigned int n_face_q_points = face_quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FullMatrix<double> local_matrix(dofs_per_cell, dofs_per_cell);\\n\\u00a0     Vector<double>     local_rhs(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     const PressureRightHandSide<dim>  pressure_right_hand_side;\\n\\u00a0     const PressureBoundaryValues<dim> pressure_boundary_values;\\n\\u00a0     const RandomMedium::KInverse<dim> k_inverse;\\n\\u00a0 \\n\\u00a0     std::vector<double>         pressure_rhs_values(n_q_points);\\n\\u00a0     std::vector<double>         boundary_values(n_face_q_points);\\n\\u00a0     std::vector<Tensor<2, dim>> k_inverse_values(n_q_points);\\n\\u00a0 \\n\\u00a0     std::vector<Vector<double>> old_solution_values(n_q_points,\\n\\u00a0                                                     Vector<double>(dim + 2));\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Vector velocities(0);\\n\\u00a0     const FEValuesExtractors::Scalar pressure(dim);\\n\\u00a0     const FEValuesExtractors::Scalar saturation(dim + 1);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0         local_matrix = 0;\\n\\u00a0         local_rhs    = 0;\\n\\u00a0 \\nFEFaceValuesDefinition fe_values.h:322\\nFEValuesDefinition fe_values.h:63\\nFullMatrixDefinition full_matrix.h:79\\nQGaussDefinition quadrature_lib.h:40\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_normal_vectors@ update_normal_vectorsNormal vectors.Definition fe_update_flags.h:141\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nFEValuesExtractors::ScalarDefinition fe_values_extractors.h:95\\nFEValuesExtractors::VectorDefinition fe_values_extractors.h:150\\nHere's the first significant difference: We have to get the values of the saturation function of the previous time step at the quadrature points. To this end, we can use the FEValues::get_function_values (previously already used in step-9, step-14 and step-15), a function that takes a solution vector and returns a list of function values at the quadrature points of the present cell. In fact, it returns the complete vector-valued solution at each quadrature point, i.e. not only the saturation but also the velocities and pressure:\\n\\u00a0         fe_values.get_function_values(old_solution, old_solution_values);\\n\\u00a0 \\nThen we also have to get the values of the pressure right hand side and of the inverse permeability tensor at the quadrature points:\\n\\u00a0         pressure_right_hand_side.value_list(fe_values.get_quadrature_points(),\\n\\u00a0                                             pressure_rhs_values);\\n\\u00a0         k_inverse.value_list(fe_values.get_quadrature_points(),\\n\\u00a0                              k_inverse_values);\\n\\u00a0 \\nWith all this, we can now loop over all the quadrature points and shape functions on this cell and assemble those parts of the matrix and right hand side that we deal with in this function. The individual terms in the contributions should be self-explanatory given the explicit form of the bilinear form stated in the introduction:\\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0             {\\n\\u00a0               const double old_s = old_solution_values[q](dim + 1);\\n\\u00a0 \\n\\u00a0               const Tensor<1, dim> phi_i_u = fe_values[velocities].value(i, q);\\n\\u00a0               const double div_phi_i_u = fe_values[velocities].divergence(i, q);\\n\\u00a0               const double phi_i_p     = fe_values[pressure].value(i, q);\\n\\u00a0               const double phi_i_s     = fe_values[saturation].value(i, q);\\n\\u00a0 \\n\\u00a0               for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                 {\\n\\u00a0                   const Tensor<1, dim> phi_j_u =\\n\\u00a0                     fe_values[velocities].value(j, q);\\n\\u00a0                   const double div_phi_j_u =\\n\\u00a0                     fe_values[velocities].divergence(j, q);\\n\\u00a0                   const double phi_j_p = fe_values[pressure].value(j, q);\\n\\u00a0                   const double phi_j_s = fe_values[saturation].value(j, q);\\n\\u00a0 \\n\\u00a0                   local_matrix(i, j) +=\\n\\u00a0                     (phi_i_u * k_inverse_values[q] *\\n\\u00a0                        mobility_inverse(old_s, viscosity) * phi_j_u -\\n\\u00a0                      div_phi_i_u * phi_j_p - phi_i_p * div_phi_j_u +\\n\\u00a0                      phi_i_s * phi_j_s) *\\n\\u00a0                     fe_values.JxW(q);\\n\\u00a0                 }\\n\\u00a0 \\n\\u00a0               local_rhs(i) +=\\n\\u00a0                 (-phi_i_p * pressure_rhs_values[q]) * fe_values.JxW(q);\\n\\u00a0             }\\n\\u00a0 \\n\\u00a0 \\nNext, we also have to deal with the pressure boundary values. This, again is as in step-20:\\n\\u00a0         for (const auto &face : cell->face_iterators())\\n\\u00a0           if (face->at_boundary())\\n\\u00a0             {\\n\\u00a0               fe_face_values.reinit(cell, face);\\n\\u00a0 \\n\\u00a0               pressure_boundary_values.value_list(\\n\\u00a0                 fe_face_values.get_quadrature_points(), boundary_values);\\n\\u00a0 \\n\\u00a0               for (unsigned int q = 0; q < n_face_q_points; ++q)\\n\\u00a0                 for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0                   {\\n\\u00a0                     const Tensor<1, dim> phi_i_u =\\n\\u00a0                       fe_face_values[velocities].value(i, q);\\n\\u00a0 \\n\\u00a0                     local_rhs(i) +=\\n\\u00a0                       -(phi_i_u * fe_face_values.normal_vector(q) *\\n\\u00a0                         boundary_values[q] * fe_face_values.JxW(q));\\n\\u00a0                   }\\n\\u00a0             }\\n\\u00a0 \\nThe final step in the loop over all cells is to transfer local contributions into the global matrix and right hand side vector:\\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0         for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0           for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0             system_matrix.add(local_dof_indices[i],\\n\\u00a0                               local_dof_indices[j],\\n\\u00a0                               local_matrix(i, j));\\n\\u00a0 \\n\\u00a0         for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0           system_rhs(local_dof_indices[i]) += local_rhs(i);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nSo much for assembly of matrix and right hand side. Note that we do not have to interpolate and apply boundary values since they have all been taken care of in the weak form already.\\n TwoPhaseFlowProblem::assemble_rhs_S\\nAs explained in the introduction, we can only evaluate the right hand side of the saturation equation once the velocity has been computed. We therefore have this separate function to this end.\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::assemble_rhs_S()\\n\\u00a0   {\\n\\u00a0     const QGauss<dim>     quadrature_formula(degree + 2);\\n\\u00a0     const QGauss<dim - 1> face_quadrature_formula(degree + 2);\\n\\u00a0     FEValues<dim>         fe_values(fe,\\n\\u00a0                             quadrature_formula,\\n\\u00a0                             update_values | update_gradients |\\n\\u00a0                               update_quadrature_points | update_JxW_values);\\n\\u00a0     FEFaceValues<dim>     fe_face_values(fe,\\n\\u00a0                                      face_quadrature_formula,\\n\\u00a0                                      update_values | update_normal_vectors |\\n\\u00a0                                        update_quadrature_points |\\n\\u00a0                                        update_JxW_values);\\n\\u00a0     FEFaceValues<dim>     fe_face_values_neighbor(fe,\\n\\u00a0                                               face_quadrature_formula,\\n\\u00a0                                               update_values);\\n\\u00a0 \\n\\u00a0     const unsigned int dofs_per_cell   = fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points      = quadrature_formula.size();\\n\\u00a0     const unsigned int n_face_q_points = face_quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     Vector<double> local_rhs(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     std::vector<Vector<double>> old_solution_values(n_q_points,\\n\\u00a0                                                     Vector<double>(dim + 2));\\n\\u00a0     std::vector<Vector<double>> old_solution_values_face(n_face_q_points,\\n\\u00a0                                                          Vector<double>(dim +\\n\\u00a0                                                                         2));\\n\\u00a0     std::vector<Vector<double>> old_solution_values_face_neighbor(\\n\\u00a0       n_face_q_points, Vector<double>(dim + 2));\\n\\u00a0     std::vector<Vector<double>> present_solution_values(n_q_points,\\n\\u00a0                                                         Vector<double>(dim +\\n\\u00a0                                                                        2));\\n\\u00a0     std::vector<Vector<double>> present_solution_values_face(\\n\\u00a0       n_face_q_points, Vector<double>(dim + 2));\\n\\u00a0 \\n\\u00a0     std::vector<double>                  neighbor_saturation(n_face_q_points);\\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n\\u00a0 \\n\\u00a0     SaturationBoundaryValues<dim> saturation_boundary_values;\\n\\u00a0 \\n\\u00a0     const FEValuesExtractors::Scalar saturation(dim + 1);\\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         local_rhs = 0;\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0 \\n\\u00a0         fe_values.get_function_values(old_solution, old_solution_values);\\n\\u00a0         fe_values.get_function_values(solution, present_solution_values);\\n\\u00a0 \\nFirst for the cell terms. These are, following the formulas in the introduction,  \\\\((S^n,\\\\sigma)-(F(S^n) \\\\mathbf{v}^{n+1},\\\\nabla\\n   \\\\sigma)\\\\), where \\\\(\\\\sigma\\\\) is the saturation component of the test function:\\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0             {\\n\\u00a0               const double   old_s = old_solution_values[q](dim + 1);\\n\\u00a0               Tensor<1, dim> present_u;\\n\\u00a0               for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0                 present_u[d] = present_solution_values[q](d);\\n\\u00a0 \\n\\u00a0               const double         phi_i_s = fe_values[saturation].value(i, q);\\n\\u00a0               const Tensor<1, dim> grad_phi_i_s =\\n\\u00a0                 fe_values[saturation].gradient(i, q);\\n\\u00a0 \\n\\u00a0               local_rhs(i) +=\\n\\u00a0                 (time.get_next_step_size() * fractional_flow(old_s, viscosity) *\\n\\u00a0                    present_u * grad_phi_i_s +\\n\\u00a0                  old_s * phi_i_s) *\\n\\u00a0                 fe_values.JxW(q);\\n\\u00a0             }\\n\\u00a0 \\nSecondly, we have to deal with the flux parts on the face boundaries. This was a bit more involved because we first have to determine which are the influx and outflux parts of the cell boundary. If we have an influx boundary, we need to evaluate the saturation on the other side of the face (or the boundary values, if we are at the boundary of the domain).\\nAll this is a bit tricky, but has been explained in some detail already in step-9. Take a look there how this is supposed to work!\\n\\u00a0         for (const auto face_no : cell->face_indices())\\n\\u00a0           {\\n\\u00a0             fe_face_values.reinit(cell, face_no);\\n\\u00a0 \\n\\u00a0             fe_face_values.get_function_values(old_solution,\\n\\u00a0                                                old_solution_values_face);\\n\\u00a0             fe_face_values.get_function_values(solution,\\n\\u00a0                                                present_solution_values_face);\\n\\u00a0 \\n\\u00a0             if (cell->at_boundary(face_no))\\n\\u00a0               saturation_boundary_values.value_list(\\n\\u00a0                 fe_face_values.get_quadrature_points(), neighbor_saturation);\\n\\u00a0             else\\n\\u00a0               {\\n\\u00a0                 const auto         neighbor = cell->neighbor(face_no);\\n\\u00a0                 const unsigned int neighbor_face =\\n\\u00a0                   cell->neighbor_of_neighbor(face_no);\\n\\u00a0 \\n\\u00a0                 fe_face_values_neighbor.reinit(neighbor, neighbor_face);\\n\\u00a0 \\n\\u00a0                 fe_face_values_neighbor.get_function_values(\\n\\u00a0                   old_solution, old_solution_values_face_neighbor);\\n\\u00a0 \\n\\u00a0                 for (unsigned int q = 0; q < n_face_q_points; ++q)\\n\\u00a0                   neighbor_saturation[q] =\\n\\u00a0                     old_solution_values_face_neighbor[q](dim + 1);\\n\\u00a0               }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0             for (unsigned int q = 0; q < n_face_q_points; ++q)\\n\\u00a0               {\\n\\u00a0                 Tensor<1, dim> present_u_face;\\n\\u00a0                 for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0                   present_u_face[d] = present_solution_values_face[q](d);\\n\\u00a0 \\n\\u00a0                 const double normal_flux =\\n\\u00a0                   present_u_face * fe_face_values.normal_vector(q);\\n\\u00a0 \\n\\u00a0                 const bool is_outflow_q_point = (normal_flux >= 0);\\n\\u00a0 \\n\\u00a0                 for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0                   local_rhs(i) -=\\n\\u00a0                     time.get_next_step_size() * normal_flux *\\n\\u00a0                     fractional_flow((is_outflow_q_point == true ?\\n\\u00a0                                        old_solution_values_face[q](dim + 1) :\\n\\u00a0                                        neighbor_saturation[q]),\\n\\u00a0                                     viscosity) *\\n\\u00a0                     fe_face_values[saturation].value(i, q) *\\n\\u00a0                     fe_face_values.JxW(q);\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0         cell->get_dof_indices(local_dof_indices);\\n\\u00a0         for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0           system_rhs(local_dof_indices[i]) += local_rhs(i);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n TwoPhaseFlowProblem::solve\\nAfter all these preparations, we finally solve the linear system for velocity and pressure in the same way as in step-20. After that, we have to deal with the saturation equation (see below):\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     const InverseMatrix<SparseMatrix<double>> m_inverse(\\n\\u00a0       system_matrix.block(0, 0));\\n\\u00a0     Vector<double> tmp(solution.block(0).size());\\n\\u00a0     Vector<double> schur_rhs(solution.block(1).size());\\n\\u00a0     Vector<double> tmp2(solution.block(2).size());\\n\\u00a0 \\n\\u00a0 \\nFirst the pressure, using the pressure Schur complement of the first two equations:\\n\\u00a0     {\\n\\u00a0       m_inverse.vmult(tmp, system_rhs.block(0));\\n\\u00a0       system_matrix.block(1, 0).vmult(schur_rhs, tmp);\\n\\u00a0       schur_rhs -= system_rhs.block(1);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0       SchurComplement schur_complement(system_matrix, m_inverse);\\n\\u00a0 \\n\\u00a0       ApproximateSchurComplement approximate_schur_complement(system_matrix);\\n\\u00a0 \\n\\u00a0       InverseMatrix<ApproximateSchurComplement> preconditioner(\\n\\u00a0         approximate_schur_complement);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0       SolverControl            solver_control(solution.block(1).size(),\\n\\u00a0                                    1e-12 * schur_rhs.l2_norm());\\n\\u00a0       SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0 \\n\\u00a0       cg.solve(schur_complement, solution.block(1), schur_rhs, preconditioner);\\n\\u00a0 \\n\\u00a0       std::cout << \\\"   \\\" << solver_control.last_step()\\n\\u00a0                 << \\\" CG Schur complement iterations for pressure.\\\" << std::endl;\\n\\u00a0     }\\n\\u00a0 \\nschur_complementLinearOperator< Range_2, Domain_2, Payload > schur_complement(const LinearOperator< Domain_1, Range_1, Payload > &A_inv, const LinearOperator< Range_1, Domain_2, Payload > &B, const LinearOperator< Range_2, Domain_1, Payload > &C, const LinearOperator< Range_2, Domain_2, Payload > &D)Definition schur_complement.h:247\\nNow the velocity:\\n\\u00a0     {\\n\\u00a0       system_matrix.block(0, 1).vmult(tmp, solution.block(1));\\n\\u00a0       tmp *= -1;\\n\\u00a0       tmp += system_rhs.block(0);\\n\\u00a0 \\n\\u00a0       m_inverse.vmult(solution.block(0), tmp);\\n\\u00a0     }\\n\\u00a0 \\nFinally, we have to take care of the saturation equation. The first business we have here is to determine the time step using the formula in the introduction. Knowing the shape of our domain and that we created the mesh by regular subdivision of cells, we can compute the diameter of each of our cells quite easily (in fact we use the linear extensions in coordinate directions of the cells, not the diameter). Note that we will learn a more general way to do this in step-24, where we use the GridTools::minimal_cell_diameter function.\\nThe maximal velocity we compute using a helper function to compute the maximal velocity defined below, and with all this we can evaluate our new time step length. We use the method DiscreteTime::set_desired_next_time_step() to suggest the new calculated value of the time step to the DiscreteTime object. In most cases, the time object uses the exact provided value to increment time. It some case, the step size may be modified further by the time object. For example, if the calculated time increment overshoots the end time, it is truncated accordingly.\\n\\u00a0     time.set_desired_next_step_size(std::pow(0.5, double(n_refinement_steps)) /\\n\\u00a0                                     get_maximal_velocity());\\n\\u00a0 \\nstd::pow::VectorizedArray< Number, width > pow(const ::VectorizedArray< Number, width > &, const Number p)Definition vectorization.h:6885\\nThe next step is to assemble the right hand side, and then to pass everything on for solution. At the end, we project back saturations onto the physically reasonable range:\\n\\u00a0     assemble_rhs_S();\\n\\u00a0     {\\n\\u00a0       SolverControl            solver_control(system_matrix.block(2, 2).m(),\\n\\u00a0                                    1e-8 * system_rhs.block(2).l2_norm());\\n\\u00a0       SolverCG<Vector<double>> cg(solver_control);\\n\\u00a0       cg.solve(system_matrix.block(2, 2),\\n\\u00a0                solution.block(2),\\n\\u00a0                system_rhs.block(2),\\n\\u00a0                PreconditionIdentity());\\n\\u00a0 \\n\\u00a0       project_back_saturation();\\n\\u00a0 \\n\\u00a0       std::cout << \\\"   \\\" << solver_control.last_step()\\n\\u00a0                 << \\\" CG iterations for saturation.\\\" << std::endl;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     old_solution = solution;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n TwoPhaseFlowProblem::output_results\\nThere is nothing surprising here. Since the program will do a lot of time steps, we create an output file only every fifth time step and skip all other time steps at the top of the file already.\\nWhen creating file names for output close to the bottom of the function, we convert the number of the time step to a string representation that is padded by leading zeros to four digits. We do this because this way all output file names have the same length, and consequently sort well when creating a directory listing.\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::output_results() const\\n\\u00a0   {\\n\\u00a0     if (time.get_step_number() % 5 != 0)\\n\\u00a0       return;\\n\\u00a0 \\n\\u00a0     std::vector<std::string> solution_names;\\n\\u00a0     switch (dim)\\n\\u00a0       {\\n\\u00a0         case 2:\\n\\u00a0           solution_names = {\\\"u\\\", \\\"v\\\", \\\"p\\\", \\\"S\\\"};\\n\\u00a0           break;\\n\\u00a0 \\n\\u00a0         case 3:\\n\\u00a0           solution_names = {\\\"u\\\", \\\"v\\\", \\\"w\\\", \\\"p\\\", \\\"S\\\"};\\n\\u00a0           break;\\n\\u00a0 \\n\\u00a0         default:\\n\\u00a0           DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0 \\n\\u00a0     data_out.attach_dof_handler(dof_handler);\\n\\u00a0     data_out.add_data_vector(solution, solution_names);\\n\\u00a0 \\n\\u00a0     data_out.build_patches(degree + 1);\\n\\u00a0 \\n\\u00a0     std::ofstream output(\\\"solution-\\\" +\\n\\u00a0                          Utilities::int_to_string(time.get_step_number(), 4) +\\n\\u00a0                          \\\".vtk\\\");\\n\\u00a0     data_out.write_vtk(output);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nDEAL_II_NOT_IMPLEMENTED#define DEAL_II_NOT_IMPLEMENTED()Definition exceptions.h:1814\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\n TwoPhaseFlowProblem::project_back_saturation\\nIn this function, we simply run over all saturation degrees of freedom and make sure that if they should have left the physically reasonable range, that they be reset to the interval \\\\([0,1]\\\\). To do this, we only have to loop over all saturation components of the solution vector; these are stored in the block 2 (block 0 are the velocities, block 1 are the pressures).\\nIt may be instructive to note that this function almost never triggers when the time step is chosen as mentioned in the introduction. However, if we choose the timestep only slightly larger, we get plenty of values outside the proper range. Strictly speaking, the function is therefore unnecessary if we choose the time step small enough. In a sense, the function is therefore only a safety device to avoid situations where our entire solution becomes unphysical because individual degrees of freedom have become unphysical a few time steps earlier.\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::project_back_saturation()\\n\\u00a0   {\\n\\u00a0     for (unsigned int i = 0; i < solution.block(2).size(); ++i)\\n\\u00a0       if (solution.block(2)(i) < 0)\\n\\u00a0         solution.block(2)(i) = 0;\\n\\u00a0       else if (solution.block(2)(i) > 1)\\n\\u00a0         solution.block(2)(i) = 1;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n TwoPhaseFlowProblem::get_maximal_velocity\\nThe following function is used in determining the maximal allowable time step. What it does is to loop over all quadrature points in the domain and find what the maximal magnitude of the velocity is.\\n\\u00a0   template <int dim>\\n\\u00a0   double TwoPhaseFlowProblem<dim>::get_maximal_velocity() const\\n\\u00a0   {\\n\\u00a0     const QGauss<dim>  quadrature_formula(degree + 2);\\n\\u00a0     const unsigned int n_q_points = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0     FEValues<dim> fe_values(fe, quadrature_formula, update_values);\\n\\u00a0     std::vector<Vector<double>> solution_values(n_q_points,\\n\\u00a0                                                 Vector<double>(dim + 2));\\n\\u00a0     double                      max_velocity = 0;\\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         fe_values.reinit(cell);\\n\\u00a0         fe_values.get_function_values(solution, solution_values);\\n\\u00a0 \\n\\u00a0         for (unsigned int q = 0; q < n_q_points; ++q)\\n\\u00a0           {\\n\\u00a0             Tensor<1, dim> velocity;\\n\\u00a0             for (unsigned int i = 0; i < dim; ++i)\\n\\u00a0               velocity[i] = solution_values[q](i);\\n\\u00a0 \\n\\u00a0             max_velocity = std::max(max_velocity, velocity.norm());\\n\\u00a0           }\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     return max_velocity;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n TwoPhaseFlowProblem::run\\nThis is the final function of our main class. Its brevity speaks for itself. There are only two points worth noting: First, the function projects the initial values onto the finite element space at the beginning; the VectorTools::project function doing this requires an argument indicating the hanging node constraints. We have none in this program (we compute on a uniformly refined mesh), but the function requires the argument anyway, of course. So we have to create a constraint object. In its original state, constraint objects are unsorted, and have to be sorted (using the AffineConstraints::close function) before they can be used. This is what we do here, and which is why we can't simply call the VectorTools::project function with an anonymous temporary object AffineConstraints<double>() as the second argument.\\nThe second point worth mentioning is that we only compute the length of the present time step in the middle of solving the linear system corresponding to each time step. We can therefore output the present time of a time step only at the end of the time step. We increment time by calling the method DiscreteTime::advance_time() inside the loop. Since we are reporting the time and dt after we increment it, we have to call the method DiscreteTime::get_previous_step_size() instead of DiscreteTime::get_next_step_size(). After many steps, when the simulation reaches the end time, the last dt is chosen by the DiscreteTime class in such a way that the last step finishes exactly at the end time.\\n\\u00a0   template <int dim>\\n\\u00a0   void TwoPhaseFlowProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     make_grid_and_dofs();\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       AffineConstraints<double> constraints;\\n\\u00a0       constraints.close();\\n\\u00a0 \\n\\u00a0       VectorTools::project(dof_handler,\\n\\u00a0                            constraints,\\n\\u00a0                            QGauss<dim>(degree + 2),\\n\\u00a0                            InitialValues<dim>(),\\n\\u00a0                            old_solution);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     do\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Timestep \\\" << time.get_step_number() + 1 << std::endl;\\n\\u00a0 \\n\\u00a0         assemble_system();\\n\\u00a0 \\n\\u00a0         solve();\\n\\u00a0 \\n\\u00a0         output_results();\\n\\u00a0 \\n\\u00a0         time.advance_time();\\n\\u00a0         std::cout << \\\"   Now at t=\\\" << time.get_current_time()\\n\\u00a0                   << \\\", dt=\\\" << time.get_previous_step_size() << '.'\\n\\u00a0                   << std::endl\\n\\u00a0                   << std::endl;\\n\\u00a0       }\\n\\u00a0     while (time.is_at_end() == false);\\n\\u00a0   }\\n\\u00a0 } // namespace Step21\\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nAffineConstraints::closevoid close()\\nVectorTools::projectvoid project(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const AffineConstraints< typename VectorType::value_type > &constraints, const Quadrature< dim > &quadrature, const Function< spacedim, typename VectorType::value_type > &function, VectorType &vec, const bool enforce_zero_boundary=false, const Quadrature< dim - 1 > &q_boundary=(dim > 1 ? QGauss< dim - 1 >(2) :Quadrature< dim - 1 >()), const bool project_to_boundary_first=false)\\n The main function\\nThat's it. In the main function, we pass the degree of the finite element space to the constructor of the TwoPhaseFlowProblem object. Here, we use zero-th degree elements, i.e. \\\\(RT_0\\\\times DQ_0 \\\\times DQ_0\\\\). The rest is as in all the other programs.\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace Step21;\\n\\u00a0 \\n\\u00a0       TwoPhaseFlowProblem<2> two_phase_flow_problem(0);\\n\\u00a0       two_phase_flow_problem.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\n Results\\nThe code as presented here does not actually compute the results found on the web page. The reason is, that even on a decent computer it runs more than a day. If you want to reproduce these results, modify the end time of the DiscreteTime object to 250 within the constructor of TwoPhaseFlowProblem.\\nIf we run the program, we get the following kind of output: Number of active cells: 1024\\nNumber of degrees of freedom: 4160 (2112+1024+1024)\\n \\nTimestep 1\\n   22 CG Schur complement iterations for pressure.\\n   1 CG iterations for saturation.\\n   Now at t=0.0326742, dt=0.0326742.\\n \\nTimestep 2\\n   17 CG Schur complement iterations for pressure.\\n   1 CG iterations for saturation.\\n   Now at t=0.0653816, dt=0.0327074.\\n \\nTimestep 3\\n   17 CG Schur complement iterations for pressure.\\n   1 CG iterations for saturation.\\n   Now at t=0.0980651, dt=0.0326836.\\n \\n...\\n As we can see, the time step is pretty much constant right from the start, which indicates that the velocities in the domain are not strongly dependent on changes in saturation, although they certainly are through the factor \\\\(\\\\lambda(S)\\\\) in the pressure equation.\\nOur second observation is that the number of CG iterations needed to solve the pressure Schur complement equation drops from 22 to 17 between the first and the second time step (in fact, it remains around 17 for the rest of the computations). The reason is actually simple: Before we solve for the pressure during a time step, we don't reset the solution variable to zero. The pressure (and the other variables) therefore have the previous time step's values at the time we get into the CG solver. Since the velocities and pressures don't change very much as computations progress, the previous time step's pressure is actually a good initial guess for this time step's pressure. Consequently, the number of iterations we need once we have computed the pressure once is significantly reduced.\\nThe final observation concerns the number of iterations needed to solve for the saturation, i.e. one. This shouldn't surprise us too much: the matrix we have to solve with is the mass matrix. However, this is the mass matrix for the \\\\(DGQ_0\\\\) element of piecewise constants where no element couples with the degrees of freedom on neighboring cells. The matrix is therefore a diagonal one, and it is clear that we should be able to invert this matrix in a single CG iteration.\\nWith all this, here are a few movies that show how the saturation progresses over time. First, this is for the single crack model, as implemented in the SingleCurvingCrack::KInverse class:\\n\\nAs can be seen, the water rich fluid snakes its way mostly along the high-permeability zone in the middle of the domain, whereas the rest of the domain is mostly impermeable. This and the next movie are generated using n_refinement_steps=7, leading to a \\\\(128\\\\times 128\\\\) mesh with some 16,000 cells and about 66,000 unknowns in total.\\nThe second movie shows the saturation for the random medium model of class RandomMedium::KInverse, where we have randomly distributed centers of high permeability and fluid hops from one of these zones to the next:\\n\\nFinally, here is the same situation in three space dimensions, on a mesh with n_refinement_steps=5, which produces a mesh of some 32,000 cells and 167,000 degrees of freedom:\\n\\nTo repeat these computations, all you have to do is to change the line TwoPhaseFlowProblem<2> two_phase_flow_problem(0);\\n in the main function to TwoPhaseFlowProblem<3> two_phase_flow_problem(0);\\n The visualization uses a cloud technique, where the saturation is indicated by colored but transparent clouds for each cell. This way, one can also see somewhat what happens deep inside the domain. A different way of visualizing would have been to show isosurfaces of the saturation evolving over time. There are techniques to plot isosurfaces transparently, so that one can see several of them at the same time like the layers of an onion.\\nSo why don't we show such isosurfaces? The problem lies in the way isosurfaces are computed: they require that the field to be visualized is continuous, so that the isosurfaces can be generated by following contours at least across a single cell. However, our saturation field is piecewise constant and discontinuous. If we wanted to plot an isosurface for a saturation \\\\(S=0.5\\\\), chances would be that there is no single point in the domain where that saturation is actually attained. If we had to define isosurfaces in that context at all, we would have to take the interfaces between cells, where one of the two adjacent cells has a saturation greater than and the other cell a saturation less than 0.5. However, it appears that most visualization programs are not equipped to do this kind of transformation.\\n Possibilities for extensions\\nThere are a number of areas where this program can be improved. Three of them are listed below. All of them are, in fact, addressed in a tutorial program that forms the continuation of the current one: step-43.\\nSolvers\\nAt present, the program is not particularly fast: the 2d random medium computation took about a day for the 1,000 or so time steps. The corresponding 3d computation took almost two days for 800 time steps. The reason why it isn't faster than this is twofold. First, we rebuild the entire matrix in every time step, although some parts such as the \\\\(B\\\\), \\\\(B^T\\\\), and \\\\(M^S\\\\) blocks never change.\\nSecond, we could do a lot better with the solver and preconditioners. Presently, we solve the Schur complement \\\\(B^TM^u(S)^{-1}B\\\\) with a CG method, using \\\\([B^T (\\\\textrm{diag}(M^u(S)))^{-1} B]^{-1}\\\\) as a preconditioner. Applying this preconditioner is expensive, since it involves solving a linear system each time. This may have been appropriate for step-20, where we have to solve the entire problem only once. However, here we have to solve it hundreds of times, and in such cases it is worth considering a preconditioner that is more expensive to set up the first time, but cheaper to apply later on.\\nOne possibility would be to realize that the matrix we use as preconditioner, \\\\(B^T (\\\\textrm{diag}(M^u(S)))^{-1} B\\\\) is still sparse, and symmetric on top of that. If one looks at the flow field evolve over time, we also see that while \\\\(S\\\\) changes significantly over time, the pressure hardly does and consequently  \\\\(B^T (\\\\textrm{diag}(M^u(S)))^{-1} B \\\\approx B^T (\\\\textrm{diag}(M^u(S^0)))^{-1}\\nB\\\\). In other words, the matrix for the first time step should be a good preconditioner also for all later time steps. With a bit of back-and-forthing, it isn't hard to actually get a representation of it as a SparseMatrix object. We could then hand it off to the SparseMIC class to form a sparse incomplete Cholesky decomposition. To form this decomposition is expensive, but we have to do it only once in the first time step, and can then use it as a cheap preconditioner in the future. We could do better even by using the SparseDirectUMFPACK class that produces not only an incomplete, but a complete decomposition of the matrix, which should yield an even better preconditioner.\\nFinally, why use the approximation \\\\(B^T (\\\\textrm{diag}(M^u(S)))^{-1} B\\\\) to precondition \\\\(B^T M^u(S)^{-1} B\\\\)? The latter matrix, after all, is the mixed form of the Laplace operator on the pressure space, for which we use linear elements. We could therefore build a separate matrix \\\\(A^p\\\\) on the side that directly corresponds to the non-mixed formulation of the Laplacian, for example using the bilinear form  \\\\((\\\\mathbf{K}\\\\lambda(S^n) \\\\nabla\\n\\\\varphi_i,\\\\nabla\\\\varphi_j)\\\\). We could then form an incomplete or complete decomposition of this non-mixed matrix and use it as a preconditioner of the mixed form.\\nUsing such techniques, it can reasonably be expected that the solution process will be faster by at least an order of magnitude.\\nTime stepping\\nIn the introduction we have identified the time step restriction   \\n\\\\[\\n  \\\\triangle t_{n+1} \\\\le \\\\frac h{|\\\\mathbf{u}^{n+1}(\\\\mathbf{x})|}\\n\\\\]\\n\\n that has to hold globally, i.e. for all \\\\(\\\\mathbf x\\\\). After discretization, we satisfy it by choosing   \\n\\\\[\\n  \\\\triangle t_{n+1} = \\\\frac {\\\\min_K h_K}{\\\\max_{\\\\mathbf{x}}|\\\\mathbf{u}^{n+1}(\\\\mathbf{x})|}.\\n\\\\]\\n\\nThis restriction on the time step is somewhat annoying: the finer we make the mesh the smaller the time step; in other words, we get punished twice: each time step is more expensive to solve and we have to do more time steps.\\nThis is particularly annoying since the majority of the additional work is spent solving the implicit part of the equations, i.e. the pressure-velocity system, whereas it is the hyperbolic transport equation for the saturation that imposes the time step restriction.\\nTo avoid this bottleneck, people have invented a number of approaches. For example, they may only re-compute the pressure-velocity field every few time steps (or, if you want, use different time step sizes for the pressure/velocity and saturation equations). This keeps the time step restriction on the cheap explicit part while it makes the solution of the implicit part less frequent. Experiments in this direction are certainly worthwhile; one starting point for such an approach is the paper by Zhangxin Chen, Guanren Huan and Baoyan Li: An improved IMPES method for two-phase flow in porous media, Transport in Porous Media, 54 (2004), pp. 361\\u2014376. There are certainly many other papers on this topic as well, but this one happened to land on our desk a while back.\\nAdaptivity\\nAdaptivity would also clearly help. Looking at the movies, one clearly sees that most of the action is confined to a relatively small part of the domain (this particularly obvious for the saturation, but also holds for the velocities and pressures). Adaptivity can therefore be expected to keep the necessary number of degrees of freedom low, or alternatively increase the accuracy.\\nOn the other hand, adaptivity for time dependent problems is not a trivial thing: we would have to change the mesh every few time steps, and we would have to transport our present solution to the next mesh every time we change it (something that the SolutionTransfer class can help with). These are not insurmountable obstacles, but they do require some additional coding and more than we felt comfortable was worth packing into this tutorial program.\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2006 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Authors: Yan Li, Wolfgang Bangerth, Texas A&M University, 2006\\n */\\n \\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n \\n#include <deal.II/lac/block_vector.h>\\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/block_sparse_matrix.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/precondition.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n#include <deal.II/grid/grid_tools.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_renumbering.h>\\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/fe/fe_raviart_thomas.h>\\n#include <deal.II/fe/fe_dgq.h>\\n#include <deal.II/fe/fe_system.h>\\n#include <deal.II/fe/fe_values.h>\\n \\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n \\n#include <iostream>\\n#include <fstream>\\n \\n#include <deal.II/base/tensor_function.h>\\n \\n#include <deal.II/base/discrete_time.h>\\n \\nnamespace Step21\\n{\\n using namespace dealii;\\n \\n \\n \\n template <int dim>\\n class TwoPhaseFlowProblem\\n  {\\n public:\\n    TwoPhaseFlowProblem(const unsigned int degree);\\n void run();\\n \\n private:\\n void   make_grid_and_dofs();\\n void   assemble_system();\\n void   assemble_rhs_S();\\n double get_maximal_velocity() const;\\n void   solve();\\n void   project_back_saturation();\\n void   output_results() const;\\n \\n const unsigned int degree;\\n \\n Triangulation<dim> triangulation;\\n const FESystem<dim> fe;\\n DoFHandler<dim>     dof_handler;\\n \\n BlockSparsityPattern      sparsity_pattern;\\n BlockSparseMatrix<double> system_matrix;\\n \\n const unsigned int n_refinement_steps;\\n \\n DiscreteTime time;\\n double       viscosity;\\n \\n BlockVector<double> solution;\\n BlockVector<double> old_solution;\\n BlockVector<double> system_rhs;\\n  };\\n \\n \\n \\n \\n template <int dim>\\n class PressureRightHandSide : public Function<dim>\\n  {\\n public:\\n    PressureRightHandSide()\\n      : Function<dim>(1)\\n    {}\\n \\n virtual double value(const Point<dim> & /*p*/,\\n const unsigned int /*component*/ = 0) const override\\n {\\n return 0;\\n    }\\n  };\\n \\n \\n \\n \\n template <int dim>\\n class PressureBoundaryValues : public Function<dim>\\n  {\\n public:\\n    PressureBoundaryValues()\\n      : Function<dim>(1)\\n    {}\\n \\n virtual double value(const Point<dim> &p,\\n const unsigned int /*component*/ = 0) const override\\n {\\n return 1 - p[0];\\n    }\\n  };\\n \\n \\n \\n \\n template <int dim>\\n class SaturationBoundaryValues : public Function<dim>\\n  {\\n public:\\n    SaturationBoundaryValues()\\n      : Function<dim>(1)\\n    {}\\n \\n virtual double value(const Point<dim> &p,\\n const unsigned int /*component*/ = 0) const override\\n {\\n if (p[0] == 0)\\n return 1;\\n else\\n return 0;\\n    }\\n  };\\n \\n \\n \\n \\n template <int dim>\\n class InitialValues : public Function<dim>\\n  {\\n public:\\n    InitialValues()\\n      : Function<dim>(dim + 2)\\n    {}\\n \\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override\\n {\\n return Functions::ZeroFunction<dim>(dim + 2).value(p, component);\\n    }\\n \\n virtual void vector_value(const Point<dim> &p,\\n Vector<double>   &values) const override\\n {\\n Functions::ZeroFunction<dim>(dim + 2).vector_value(p, values);\\n    }\\n  };\\n \\n \\n \\n \\n \\n \\n namespace SingleCurvingCrack\\n  {\\n template <int dim>\\n class KInverse : public TensorFunction<2, dim>\\n    {\\n public:\\n      KInverse()\\n        : TensorFunction<2, dim>()\\n      {}\\n \\n virtual void\\n      value_list(const std::vector<Point<dim>> &points,\\n                 std::vector<Tensor<2, dim>>   &values) const override\\n {\\n AssertDimension(points.size(), values.size());\\n \\n for (unsigned int p = 0; p < points.size(); ++p)\\n          {\\n            values[p].clear();\\n \\n const double distance_to_flowline =\\n              std::fabs(points[p][1] - 0.5 - 0.1 * std::sin(10 * points[p][0]));\\n \\n const double permeability =\\n std::max(std::exp(-(distance_to_flowline * distance_to_flowline) /\\n                                (0.1 * 0.1)),\\n                       0.01);\\n \\n for (unsigned int d = 0; d < dim; ++d)\\n              values[p][d][d] = 1. / permeability;\\n          }\\n      }\\n    };\\n  } // namespace SingleCurvingCrack\\n \\n \\n \\n namespace RandomMedium\\n  {\\n template <int dim>\\n class KInverse : public TensorFunction<2, dim>\\n    {\\n public:\\n      KInverse()\\n        : TensorFunction<2, dim>()\\n      {}\\n \\n virtual void\\n      value_list(const std::vector<Point<dim>> &points,\\n                 std::vector<Tensor<2, dim>>   &values) const override\\n {\\n AssertDimension(points.size(), values.size());\\n \\n for (unsigned int p = 0; p < points.size(); ++p)\\n          {\\n            values[p].clear();\\n \\n double permeability = 0;\\n for (unsigned int i = 0; i < centers.size(); ++i)\\n              permeability += std::exp(-(points[p] - centers[i]).norm_square() /\\n                                       (0.05 * 0.05));\\n \\n const double normalized_permeability =\\n std::min(std::max(permeability, 0.01), 4.);\\n \\n for (unsigned int d = 0; d < dim; ++d)\\n              values[p][d][d] = 1. / normalized_permeability;\\n          }\\n      }\\n \\n private:\\n static std::vector<Point<dim>> centers;\\n \\n static std::vector<Point<dim>> get_centers()\\n      {\\n const unsigned int N =\\n          (dim == 2 ? 40 : (dim == 3 ? 100 : throw ExcNotImplemented()));\\n \\n        std::vector<Point<dim>> centers_list(N);\\n for (unsigned int i = 0; i < N; ++i)\\n for (unsigned int d = 0; d < dim; ++d)\\n            centers_list[i][d] = static_cast<double>(rand()) / RAND_MAX;\\n \\n return centers_list;\\n      }\\n    };\\n \\n \\n \\n template <int dim>\\n    std::vector<Point<dim>> KInverse<dim>::centers =\\n      KInverse<dim>::get_centers();\\n  } // namespace RandomMedium\\n \\n \\n \\n \\n double mobility_inverse(const double S, const double viscosity)\\n  {\\n return 1.0 / (1.0 / viscosity * S * S + (1 - S) * (1 - S));\\n  }\\n \\n double fractional_flow(const double S, const double viscosity)\\n  {\\n return S * S / (S * S + viscosity * (1 - S) * (1 - S));\\n  }\\n \\n \\n \\n \\n template <class MatrixType>\\n class InverseMatrix : public Subscriptor\\n  {\\n public:\\n    InverseMatrix(const MatrixType &m)\\n      : matrix(&m)\\n    {}\\n \\n void vmult(Vector<double> &dst, const Vector<double> &src) const\\n {\\n SolverControl solver_control(std::max<unsigned int>(src.size(), 200),\\n                                   1e-8 * src.l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n \\n      dst = 0;\\n \\n      cg.solve(*matrix, dst, src, PreconditionIdentity());\\n    }\\n \\n private:\\n const SmartPointer<const MatrixType> matrix;\\n  };\\n \\n \\n \\n class SchurComplement : public Subscriptor\\n  {\\n public:\\n    SchurComplement(const BlockSparseMatrix<double>           &A,\\n const InverseMatrix<SparseMatrix<double>> &Minv)\\n      : system_matrix(&A)\\n      , m_inverse(&Minv)\\n      , tmp1(A.block(0, 0).m())\\n      , tmp2(A.block(0, 0).m())\\n    {}\\n \\n void vmult(Vector<double> &dst, const Vector<double> &src) const\\n {\\n      system_matrix->block(0, 1).vmult(tmp1, src);\\n      m_inverse->vmult(tmp2, tmp1);\\n      system_matrix->block(1, 0).vmult(dst, tmp2);\\n    }\\n \\n private:\\n const SmartPointer<const BlockSparseMatrix<double>>           system_matrix;\\n const SmartPointer<const InverseMatrix<SparseMatrix<double>>> m_inverse;\\n \\n mutable Vector<double> tmp1, tmp2;\\n  };\\n \\n \\n \\n class ApproximateSchurComplement : public Subscriptor\\n  {\\n public:\\n    ApproximateSchurComplement(const BlockSparseMatrix<double> &A)\\n      : system_matrix(&A)\\n      , tmp1(A.block(0, 0).m())\\n      , tmp2(A.block(0, 0).m())\\n    {}\\n \\n void vmult(Vector<double> &dst, const Vector<double> &src) const\\n {\\n      system_matrix->block(0, 1).vmult(tmp1, src);\\n      system_matrix->block(0, 0).precondition_Jacobi(tmp2, tmp1);\\n      system_matrix->block(1, 0).vmult(dst, tmp2);\\n    }\\n \\n private:\\n const SmartPointer<const BlockSparseMatrix<double>> system_matrix;\\n \\n mutable Vector<double> tmp1, tmp2;\\n  };\\n \\n \\n \\n \\n \\n \\n template <int dim>\\n  TwoPhaseFlowProblem<dim>::TwoPhaseFlowProblem(const unsigned int degree)\\n    : degree(degree)\\n    , fe(FE_RaviartThomas<dim>(degree),\\n FE_DGQ<dim>(degree),\\n FE_DGQ<dim>(degree))\\n    , dof_handler(triangulation)\\n    , n_refinement_steps(5)\\n    , time(/*start time*/ 0., /*end time*/ 1.)\\n    , viscosity(0.2)\\n  {}\\n \\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::make_grid_and_dofs()\\n  {\\n GridGenerator::hyper_cube(triangulation, 0, 1);\\n triangulation.refine_global(n_refinement_steps);\\n \\n    dof_handler.distribute_dofs(fe);\\n DoFRenumbering::component_wise(dof_handler);\\n \\n const std::vector<types::global_dof_index> dofs_per_component =\\n DoFTools::count_dofs_per_fe_component(dof_handler);\\n const unsigned int n_u = dofs_per_component[0],\\n                       n_p = dofs_per_component[dim],\\n                       n_s = dofs_per_component[dim + 1];\\n \\n    std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n              << std::endl\\n              << \\\"Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n              << \\\" (\\\" << n_u << '+' << n_p << '+' << n_s << ')' << std::endl\\n              << std::endl;\\n \\n const std::vector<types::global_dof_index> block_sizes = {n_u, n_p, n_s};\\n BlockDynamicSparsityPattern                dsp(block_sizes, block_sizes);\\n DoFTools::make_sparsity_pattern(dof_handler, dsp);\\n \\n    sparsity_pattern.copy_from(dsp);\\n    system_matrix.reinit(sparsity_pattern);\\n \\n    solution.reinit(block_sizes);\\n    old_solution.reinit(block_sizes);\\n    system_rhs.reinit(block_sizes);\\n  }\\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::assemble_system()\\n  {\\n    system_matrix = 0;\\n    system_rhs    = 0;\\n \\n const QGauss<dim>     quadrature_formula(degree + 2);\\n const QGauss<dim - 1> face_quadrature_formula(degree + 2);\\n \\n FEValues<dim>     fe_values(fe,\\n                            quadrature_formula,\\n update_values | update_gradients |\\n update_quadrature_points | update_JxW_values);\\n FEFaceValues<dim> fe_face_values(fe,\\n                                     face_quadrature_formula,\\n update_values | update_normal_vectors |\\n update_quadrature_points |\\n update_JxW_values);\\n \\n const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n \\n const unsigned int n_q_points      = quadrature_formula.size();\\n const unsigned int n_face_q_points = face_quadrature_formula.size();\\n \\n FullMatrix<double> local_matrix(dofs_per_cell, dofs_per_cell);\\n Vector<double>     local_rhs(dofs_per_cell);\\n \\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n const PressureRightHandSide<dim>  pressure_right_hand_side;\\n const PressureBoundaryValues<dim> pressure_boundary_values;\\n const RandomMedium::KInverse<dim> k_inverse;\\n \\n    std::vector<double>         pressure_rhs_values(n_q_points);\\n    std::vector<double>         boundary_values(n_face_q_points);\\n    std::vector<Tensor<2, dim>> k_inverse_values(n_q_points);\\n \\n    std::vector<Vector<double>> old_solution_values(n_q_points,\\n Vector<double>(dim + 2));\\n \\n const FEValuesExtractors::Vector velocities(0);\\n const FEValuesExtractors::Scalar pressure(dim);\\n const FEValuesExtractors::Scalar saturation(dim + 1);\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        fe_values.reinit(cell);\\n        local_matrix = 0;\\n        local_rhs    = 0;\\n \\n        fe_values.get_function_values(old_solution, old_solution_values);\\n \\n        pressure_right_hand_side.value_list(fe_values.get_quadrature_points(),\\n                                            pressure_rhs_values);\\n        k_inverse.value_list(fe_values.get_quadrature_points(),\\n                             k_inverse_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n            {\\n const double old_s = old_solution_values[q](dim + 1);\\n \\n const Tensor<1, dim> phi_i_u = fe_values[velocities].value(i, q);\\n const double div_phi_i_u = fe_values[velocities].divergence(i, q);\\n const double phi_i_p     = fe_values[pressure].value(i, q);\\n const double phi_i_s     = fe_values[saturation].value(i, q);\\n \\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                {\\n const Tensor<1, dim> phi_j_u =\\n                    fe_values[velocities].value(j, q);\\n const double div_phi_j_u =\\n                    fe_values[velocities].divergence(j, q);\\n const double phi_j_p = fe_values[pressure].value(j, q);\\n const double phi_j_s = fe_values[saturation].value(j, q);\\n \\n                  local_matrix(i, j) +=\\n                    (phi_i_u * k_inverse_values[q] *\\n                       mobility_inverse(old_s, viscosity) * phi_j_u -\\n                     div_phi_i_u * phi_j_p - phi_i_p * div_phi_j_u +\\n                     phi_i_s * phi_j_s) *\\n                    fe_values.JxW(q);\\n                }\\n \\n              local_rhs(i) +=\\n                (-phi_i_p * pressure_rhs_values[q]) * fe_values.JxW(q);\\n            }\\n \\n \\n for (const auto &face : cell->face_iterators())\\n          if (face->at_boundary())\\n            {\\n              fe_face_values.reinit(cell, face);\\n \\n              pressure_boundary_values.value_list(\\n                fe_face_values.get_quadrature_points(), boundary_values);\\n \\n for (unsigned int q = 0; q < n_face_q_points; ++q)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n                  {\\n const Tensor<1, dim> phi_i_u =\\n                      fe_face_values[velocities].value(i, q);\\n \\n                    local_rhs(i) +=\\n                      -(phi_i_u * fe_face_values.normal_vector(q) *\\n                        boundary_values[q] * fe_face_values.JxW(q));\\n                  }\\n            }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n            system_matrix.add(local_dof_indices[i],\\n                              local_dof_indices[j],\\n                              local_matrix(i, j));\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n          system_rhs(local_dof_indices[i]) += local_rhs(i);\\n      }\\n  }\\n \\n \\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::assemble_rhs_S()\\n  {\\n const QGauss<dim>     quadrature_formula(degree + 2);\\n const QGauss<dim - 1> face_quadrature_formula(degree + 2);\\n FEValues<dim>         fe_values(fe,\\n                            quadrature_formula,\\n update_values | update_gradients |\\n update_quadrature_points | update_JxW_values);\\n FEFaceValues<dim>     fe_face_values(fe,\\n                                     face_quadrature_formula,\\n update_values | update_normal_vectors |\\n update_quadrature_points |\\n update_JxW_values);\\n FEFaceValues<dim>     fe_face_values_neighbor(fe,\\n                                              face_quadrature_formula,\\n update_values);\\n \\n const unsigned int dofs_per_cell   = fe.n_dofs_per_cell();\\n const unsigned int n_q_points      = quadrature_formula.size();\\n const unsigned int n_face_q_points = face_quadrature_formula.size();\\n \\n Vector<double> local_rhs(dofs_per_cell);\\n \\n    std::vector<Vector<double>> old_solution_values(n_q_points,\\n Vector<double>(dim + 2));\\n    std::vector<Vector<double>> old_solution_values_face(n_face_q_points,\\n Vector<double>(dim +\\n                                                                        2));\\n    std::vector<Vector<double>> old_solution_values_face_neighbor(\\n      n_face_q_points, Vector<double>(dim + 2));\\n    std::vector<Vector<double>> present_solution_values(n_q_points,\\n Vector<double>(dim +\\n                                                                       2));\\n    std::vector<Vector<double>> present_solution_values_face(\\n      n_face_q_points, Vector<double>(dim + 2));\\n \\n    std::vector<double>                  neighbor_saturation(n_face_q_points);\\n    std::vector<types::global_dof_index> local_dof_indices(dofs_per_cell);\\n \\n    SaturationBoundaryValues<dim> saturation_boundary_values;\\n \\n const FEValuesExtractors::Scalar saturation(dim + 1);\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        local_rhs = 0;\\n        fe_values.reinit(cell);\\n \\n        fe_values.get_function_values(old_solution, old_solution_values);\\n        fe_values.get_function_values(solution, present_solution_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n            {\\n const double   old_s = old_solution_values[q](dim + 1);\\n Tensor<1, dim> present_u;\\n for (unsigned int d = 0; d < dim; ++d)\\n                present_u[d] = present_solution_values[q](d);\\n \\n const double         phi_i_s = fe_values[saturation].value(i, q);\\n const Tensor<1, dim> grad_phi_i_s =\\n                fe_values[saturation].gradient(i, q);\\n \\n              local_rhs(i) +=\\n                (time.get_next_step_size() * fractional_flow(old_s, viscosity) *\\n                   present_u * grad_phi_i_s +\\n                 old_s * phi_i_s) *\\n                fe_values.JxW(q);\\n            }\\n \\n for (const auto face_no : cell->face_indices())\\n          {\\n            fe_face_values.reinit(cell, face_no);\\n \\n            fe_face_values.get_function_values(old_solution,\\n                                               old_solution_values_face);\\n            fe_face_values.get_function_values(solution,\\n                                               present_solution_values_face);\\n \\n if (cell->at_boundary(face_no))\\n              saturation_boundary_values.value_list(\\n                fe_face_values.get_quadrature_points(), neighbor_saturation);\\n else\\n              {\\n const auto         neighbor = cell->neighbor(face_no);\\n const unsigned int neighbor_face =\\n                  cell->neighbor_of_neighbor(face_no);\\n \\n                fe_face_values_neighbor.reinit(neighbor, neighbor_face);\\n \\n                fe_face_values_neighbor.get_function_values(\\n                  old_solution, old_solution_values_face_neighbor);\\n \\n for (unsigned int q = 0; q < n_face_q_points; ++q)\\n                  neighbor_saturation[q] =\\n                    old_solution_values_face_neighbor[q](dim + 1);\\n              }\\n \\n \\n for (unsigned int q = 0; q < n_face_q_points; ++q)\\n              {\\n Tensor<1, dim> present_u_face;\\n for (unsigned int d = 0; d < dim; ++d)\\n                  present_u_face[d] = present_solution_values_face[q](d);\\n \\n const double normal_flux =\\n                  present_u_face * fe_face_values.normal_vector(q);\\n \\n const bool is_outflow_q_point = (normal_flux >= 0);\\n \\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n                  local_rhs(i) -=\\n                    time.get_next_step_size() * normal_flux *\\n                    fractional_flow((is_outflow_q_point == true ?\\n                                       old_solution_values_face[q](dim + 1) :\\n                                       neighbor_saturation[q]),\\n                                    viscosity) *\\n                    fe_face_values[saturation].value(i, q) *\\n                    fe_face_values.JxW(q);\\n              }\\n          }\\n \\n        cell->get_dof_indices(local_dof_indices);\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n          system_rhs(local_dof_indices[i]) += local_rhs(i);\\n      }\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::solve()\\n  {\\n const InverseMatrix<SparseMatrix<double>> m_inverse(\\n      system_matrix.block(0, 0));\\n Vector<double> tmp(solution.block(0).size());\\n Vector<double> schur_rhs(solution.block(1).size());\\n Vector<double> tmp2(solution.block(2).size());\\n \\n \\n    {\\n      m_inverse.vmult(tmp, system_rhs.block(0));\\n      system_matrix.block(1, 0).vmult(schur_rhs, tmp);\\n      schur_rhs -= system_rhs.block(1);\\n \\n \\n      SchurComplement schur_complement(system_matrix, m_inverse);\\n \\n      ApproximateSchurComplement approximate_schur_complement(system_matrix);\\n \\n      InverseMatrix<ApproximateSchurComplement> preconditioner(\\n        approximate_schur_complement);\\n \\n \\n SolverControl            solver_control(solution.block(1).size(),\\n                                   1e-12 * schur_rhs.l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n \\n      cg.solve(schur_complement, solution.block(1), schur_rhs, preconditioner);\\n \\n      std::cout << \\\"   \\\" << solver_control.last_step()\\n                << \\\" CG Schur complement iterations for pressure.\\\" << std::endl;\\n    }\\n \\n    {\\n      system_matrix.block(0, 1).vmult(tmp, solution.block(1));\\n      tmp *= -1;\\n      tmp += system_rhs.block(0);\\n \\n      m_inverse.vmult(solution.block(0), tmp);\\n    }\\n \\n    time.set_desired_next_step_size(std::pow(0.5, double(n_refinement_steps)) /\\n                                    get_maximal_velocity());\\n \\n    assemble_rhs_S();\\n    {\\n SolverControl            solver_control(system_matrix.block(2, 2).m(),\\n                                   1e-8 * system_rhs.block(2).l2_norm());\\n SolverCG<Vector<double>> cg(solver_control);\\n      cg.solve(system_matrix.block(2, 2),\\n               solution.block(2),\\n               system_rhs.block(2),\\n PreconditionIdentity());\\n \\n      project_back_saturation();\\n \\n      std::cout << \\\"   \\\" << solver_control.last_step()\\n                << \\\" CG iterations for saturation.\\\" << std::endl;\\n    }\\n \\n \\n    old_solution = solution;\\n  }\\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::output_results() const\\n {\\n if (time.get_step_number() % 5 != 0)\\n return;\\n \\n    std::vector<std::string> solution_names;\\n switch (dim)\\n      {\\n case 2:\\n          solution_names = {\\\"u\\\", \\\"v\\\", \\\"p\\\", \\\"S\\\"};\\n break;\\n \\n case 3:\\n          solution_names = {\\\"u\\\", \\\"v\\\", \\\"w\\\", \\\"p\\\", \\\"S\\\"};\\n break;\\n \\n default:\\n DEAL_II_NOT_IMPLEMENTED();\\n      }\\n \\n DataOut<dim> data_out;\\n \\n    data_out.attach_dof_handler(dof_handler);\\n    data_out.add_data_vector(solution, solution_names);\\n \\n    data_out.build_patches(degree + 1);\\n \\n    std::ofstream output(\\\"solution-\\\" +\\n Utilities::int_to_string(time.get_step_number(), 4) +\\n \\\".vtk\\\");\\n    data_out.write_vtk(output);\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::project_back_saturation()\\n  {\\n for (unsigned int i = 0; i < solution.block(2).size(); ++i)\\n if (solution.block(2)(i) < 0)\\n        solution.block(2)(i) = 0;\\n else if (solution.block(2)(i) > 1)\\n        solution.block(2)(i) = 1;\\n  }\\n \\n \\n \\n template <int dim>\\n double TwoPhaseFlowProblem<dim>::get_maximal_velocity() const\\n {\\n const QGauss<dim>  quadrature_formula(degree + 2);\\n const unsigned int n_q_points = quadrature_formula.size();\\n \\n FEValues<dim> fe_values(fe, quadrature_formula, update_values);\\n    std::vector<Vector<double>> solution_values(n_q_points,\\n Vector<double>(dim + 2));\\n double                      max_velocity = 0;\\n \\n for (const auto &cell : dof_handler.active_cell_iterators())\\n      {\\n        fe_values.reinit(cell);\\n        fe_values.get_function_values(solution, solution_values);\\n \\n for (unsigned int q = 0; q < n_q_points; ++q)\\n          {\\n Tensor<1, dim> velocity;\\n for (unsigned int i = 0; i < dim; ++i)\\n              velocity[i] = solution_values[q](i);\\n \\n            max_velocity = std::max(max_velocity, velocity.norm());\\n          }\\n      }\\n \\n return max_velocity;\\n  }\\n \\n \\n \\n template <int dim>\\n void TwoPhaseFlowProblem<dim>::run()\\n  {\\n    make_grid_and_dofs();\\n \\n    {\\n AffineConstraints<double> constraints;\\n      constraints.close();\\n \\n VectorTools::project(dof_handler,\\n                           constraints,\\n QGauss<dim>(degree + 2),\\n                           InitialValues<dim>(),\\n                           old_solution);\\n    }\\n \\n do\\n      {\\n        std::cout << \\\"Timestep \\\" << time.get_step_number() + 1 << std::endl;\\n \\n        assemble_system();\\n \\n        solve();\\n \\n        output_results();\\n \\n        time.advance_time();\\n        std::cout << \\\"   Now at t=\\\" << time.get_current_time()\\n                  << \\\", dt=\\\" << time.get_previous_step_size() << '.'\\n                  << std::endl\\n                  << std::endl;\\n      }\\n while (time.is_at_end() == false);\\n  }\\n} // namespace Step21\\n \\n \\n \\nint main()\\n{\\n try\\n    {\\n using namespace Step21;\\n \\n      TwoPhaseFlowProblem<2> two_phase_flow_problem(0);\\n      two_phase_flow_problem.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nblock_sparse_matrix.h\\nblock_vector.h\\nDataOutInterface::write_vtkvoid write_vtk(std::ostream &out) constDefinition data_out_base.cc:7681\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nTensor::normnumbers::NumberTraits< Number >::real_type norm() const\\nVector::sizevirtual size_type size() const override\\nVector::l2_normreal_type l2_norm() const\\ndiscrete_time.h\\ndof_handler.h\\ndof_renumbering.h\\ndof_tools.h\\nfe_values.h\\nfe_dgq.h\\nfe_raviart_thomas.h\\nfe_system.h\\nfull_matrix.h\\nfunction.h\\ntria.h\\ngrid_generator.h\\ngrid_tools.h\\nLAPACKSupport::matrix@ matrixContents is actually a matrix.Definition lapack_support.h:57\\ninternal::EvaluatorQuantity::value@ value\\ndata_out.h\\nprecondition.h\\nquadrature_lib.h\\nsolver_cg.h\\ntensor_function.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"