"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_9.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-9 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-9 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-9 tutorial program\\n\\n\\nThis tutorial depends on step-6.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\nDiscretizing the advection equation\\nWhy is this method called \\\"streamline diffusion\\\"?\\nWhy is this method also called \\\"Petrov-Galerkin\\\"?\\nWhy is this method also called \\\"streamline-upwind\\\"?\\nSolving the linear system that corresponds to the advection equation\\nThe test case\\nA simple refinement criterion\\n\\n The commented program\\n\\nEquation data declaration\\nAdvectionProblem class declaration\\nGradientEstimation class declaration\\nAdvectionProblem class implementation\\nGradientEstimation class implementation\\nMain function\\n\\n\\n Results\\n\\n\\n The plain program\\n   \\n Introduction\\nIn this example, our aims are the following: \\n\\nsolve the advection equation \\\\(\\\\beta \\\\cdot \\\\nabla u = f\\\\); \\n\\nshow how we can use multiple threads to get results quicker if we have a multi-processor machine; \\n\\ndevelop a simple refinement criterion. \\n\\nWhile the second aim is difficult to describe in general terms without reference to the code, we will discuss the other two aims in the following. The use of multiple threads will then be detailed at the relevant places within the program. We will, however, follow the general discussion of the WorkStream approach detailed in the Parallel computing with multiple processors accessing shared memory documentation topic.\\nDiscretizing the advection equation\\nIn the present example program, we want to numerically approximate the solution of the advection equation   \\n\\\\[\\n  \\\\beta \\\\cdot \\\\nabla u = f,\\n\\\\]\\n\\n where \\\\(\\\\beta\\\\) is a vector field that describes the advection direction and speed (which may be dependent on the space variables if \\\\(\\\\beta=\\\\beta(\\\\mathbf x)\\\\)), \\\\(f\\\\) is a source function, and \\\\(u\\\\) is the solution. The physical process that this equation describes is that of a given flow field \\\\(\\\\beta\\\\), with which another substance is transported, the density or concentration of which is given by \\\\(u\\\\). The equation does not contain diffusion of this second species within its carrier substance, but there are source terms.\\nIt is obvious that at the inflow, the above equation needs to be augmented by boundary conditions:   \\n\\\\[\\n  u = g \\\\qquad\\\\qquad \\\\mathrm{on}\\\\ \\\\partial\\\\Omega_-,\\n\\\\]\\n\\n where \\\\(\\\\partial\\\\Omega_-\\\\) describes the inflow portion of the boundary and is formally defined by     \\n\\\\[\\n  \\\\partial\\\\Omega_-\\n  =\\n  \\\\{{\\\\mathbf x}\\\\in \\\\partial\\\\Omega: \\\\beta\\\\cdot{\\\\mathbf n}({\\\\mathbf x}) < 0\\\\},\\n\\\\]\\n\\n and \\\\({\\\\mathbf n}({\\\\mathbf x})\\\\) being the outward normal to the domain at point \\\\({\\\\mathbf x}\\\\in\\\\partial\\\\Omega\\\\). This definition is quite intuitive, since as \\\\({\\\\mathbf n}\\\\) points outward, the scalar product with \\\\(\\\\beta\\\\) can only be negative if the transport direction \\\\(\\\\beta\\\\) points inward, i.e. at the inflow boundary. The mathematical theory states that we must not pose any boundary condition on the outflow part of the boundary.\\nUnfortunately, the equation stated above cannot be solved in a stable way using the standard finite element method. The problem is that solutions to this equation possess insufficient regularity perpendicular to the transport direction: while they are smooth along the streamlines defined by the \\\"wind field\\\" \\\\(\\\\beta\\\\), they may be discontinuous perpendicular to this direction. This is easy to understand: what the equation  \\\\(\\\\beta \\\\cdot\\n\\\\nabla u = f\\\\) means is in essence that the rate of change of \\\\(u\\\\) in direction \\\\(\\\\beta\\\\) equals \\\\(f\\\\). But the equation has no implications for the derivatives in the perpendicular direction, and consequently if \\\\(u\\\\) is discontinuous at a point on the inflow boundary, then this discontinuity will simply be transported along the streamline of the wind field that starts at this boundary point. These discontinuities lead to numerical instabilities that make a stable solution by a standard continuous finite element discretization impossible.\\nA standard approach to address this difficulty is the \\\"streamline-upwind\\nPetrov-Galerkin\\\" (SUPG) method, sometimes also called the streamline diffusion method. A good explanation of the method can be found in [79] . Formally, this method replaces the step in which we derive the weak form of the differential equation from the strong form: Instead of multiplying the equation by a test function \\\\(v\\\\) and integrating over the domain, we instead multiply by \\\\(v + \\\\delta \\\\beta\\\\cdot\\\\nabla v\\\\), where \\\\(\\\\delta\\\\) is a parameter that is chosen in the range of the (local) mesh width \\\\(h\\\\); good results are usually obtained by setting \\\\(\\\\delta=0.1h\\\\). (Why this is called \\\"streamline diffusion\\\" will be explained below; for the moment, let us simply take for granted that this is how we derive a stable discrete formulation.) The value for \\\\(\\\\delta\\\\) here is small enough that we do not introduce excessive diffusion, but large enough that the resulting problem is well-posed.\\nUsing the test functions as defined above, an initial weak form of the problem would ask for finding a function \\\\(u_h\\\\) so that for all test functions \\\\(v_h\\\\) we have     \\n\\\\[\\n  (\\\\beta \\\\cdot \\\\nabla u_h, v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h)_\\\\Omega\\n  =\\n  (f, v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h)_\\\\Omega.\\n\\\\]\\n\\n However, we would like to include inflow boundary conditions \\\\(u=g\\\\) weakly into this problem, and this can be done by requiring that in addition to the equation above we also have     \\n\\\\[\\n  (u_h, w_h)_{\\\\partial\\\\Omega_-}\\n  =\\n  (g, w_h)_{\\\\partial\\\\Omega_-}\\n\\\\]\\n\\n for all test functions \\\\(w_h\\\\) that live on the boundary and that are from a suitable test space. It turns out that a suitable space of test functions happens to be \\\\(\\\\beta\\\\cdot {\\\\mathbf n}\\\\) times the traces of the functions \\\\(v_h\\\\) in the test space we already use for the differential equation in the domain. Thus, we require that for all test functions \\\\(v_h\\\\) we have     \\n\\\\[\\n  (u_h, \\\\beta\\\\cdot {\\\\mathbf n} v_h)_{\\\\partial\\\\Omega_-}\\n  =\\n  (g, \\\\beta\\\\cdot {\\\\mathbf n} v_h)_{\\\\partial\\\\Omega_-}.\\n\\\\]\\n\\n Without attempting a justification (see again the literature on the finite element method in general, and the streamline diffusion method in particular), we can combine the equations for the differential equation and the boundary values in the following weak formulation of our stabilized problem: find a discrete function \\\\(u_h\\\\) such that for all discrete test functions \\\\(v_h\\\\) there holds         \\n\\\\[\\n  (\\\\beta \\\\cdot \\\\nabla u_h, v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h)_\\\\Omega\\n  -\\n  (u_h, \\\\beta\\\\cdot {\\\\mathbf n} v_h)_{\\\\partial\\\\Omega_-}\\n  =\\n  (f, v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h)_\\\\Omega\\n  -\\n  (g, \\\\beta\\\\cdot {\\\\mathbf n} v_h)_{\\\\partial\\\\Omega_-}.\\n\\\\]\\n\\nOne would think that this leads to a system matrix to be inverted of the form       \\n\\\\[\\n  a_{ij} =\\n  (\\\\beta \\\\cdot \\\\nabla \\\\varphi_i,\\n   \\\\varphi_j + \\\\delta \\\\beta\\\\cdot\\\\nabla \\\\varphi_j)_\\\\Omega\\n  -\\n  (\\\\varphi_i, \\\\beta\\\\cdot {\\\\mathbf n} \\\\varphi_j)_{\\\\partial\\\\Omega_-},\\n\\\\]\\n\\n with basis functions \\\\(\\\\varphi_i,\\\\varphi_j\\\\). However, this is a pitfall that happens to every numerical analyst at least once (including the author): we have here expanded the solution \\\\(u_h = \\\\sum_i U_i \\\\varphi_i\\\\), but if we do so, we will have to solve the problem   \\n\\\\[\\n  U^T A = F^T,\\n\\\\]\\n\\n where \\\\(U\\\\) is the vector of expansion coefficients, i.e., we have to solve the transpose problem of what we might have expected naively.\\nThis is a point we made in the introduction of step-3. There, we argued that to avoid this very kind of problem, one should get in the habit of always multiplying with test functions from the left instead of from the right to obtain the correct matrix right away. In order to obtain the form of the linear system that we need, it is therefore best to rewrite the weak formulation to         \\n\\\\[\\n  (v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h, \\\\beta \\\\cdot \\\\nabla u_h)_\\\\Omega\\n  -\\n  (\\\\beta\\\\cdot {\\\\mathbf n} v_h, u_h)_{\\\\partial\\\\Omega_-}\\n  =\\n  (v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h, f)_\\\\Omega\\n  -\\n  (\\\\beta\\\\cdot {\\\\mathbf n} v_h, g)_{\\\\partial\\\\Omega_-}\\n\\\\]\\n\\n and then to obtain       \\n\\\\[\\n  a_{ij} =\\n  (\\\\varphi_i + \\\\delta \\\\beta \\\\cdot \\\\nabla \\\\varphi_i,\\n   \\\\beta\\\\cdot\\\\nabla \\\\varphi_j)_\\\\Omega\\n  -\\n  (\\\\beta\\\\cdot {\\\\mathbf n} \\\\varphi_i, \\\\varphi_j)_{\\\\partial\\\\Omega_-},\\n\\\\]\\n\\n as system matrix. We will assemble this matrix in the program.\\nWhy is this method called \\\"streamline diffusion\\\"?\\nLooking at the bilinear form mentioned above, we see that the discrete solution has to satisfy an equation of which the left hand side in weak form has a domain term of the kind   \\n\\\\[\\n  (v_h + \\\\delta \\\\beta\\\\cdot\\\\nabla v_h, \\\\beta \\\\cdot \\\\nabla u_h)_\\\\Omega,\\n\\\\]\\n\\n or if we split this up, the form     \\n\\\\[\\n  (v_h, \\\\beta \\\\cdot \\\\nabla u_h)_\\\\Omega\\n  +\\n  (\\\\delta \\\\beta\\\\cdot\\\\nabla v_h, \\\\beta \\\\cdot \\\\nabla u_h)_\\\\Omega.\\n\\\\]\\n\\n If we wanted to see what strong form of the equation that would correspond to, we need to integrate the second term. This yields the following formulation, where for simplicity we'll ignore boundary terms for now:        \\n\\\\[\\n  (v_h, \\\\beta \\\\cdot \\\\nabla u_h)_\\\\Omega\\n  -\\n  \\\\left(v_h, \\\\delta \\\\nabla \\\\cdot \\\\left[\\\\beta \\\\left(\\\\beta \\\\cdot \\\\nabla\\n  u_h\\\\right)\\\\right]\\\\right)_\\\\Omega\\n  +\\n  \\\\text{boundary terms}.\\n\\\\]\\n\\n Let us assume for a moment that the wind field \\\\(\\\\beta\\\\) is divergence-free, i.e., that \\\\(\\\\nabla \\\\cdot \\\\beta = 0\\\\). Then applying the product rule to the derivative of the term in square brackets on the right and using the divergence-freeness will give us the following:        \\n\\\\[\\n  (v_h, \\\\beta \\\\cdot \\\\nabla u_h)_\\\\Omega\\n  -\\n  \\\\left(v_h, \\\\delta \\\\left[\\\\beta \\\\cdot \\\\nabla\\\\right] \\\\left[\\\\beta \\\\cdot \\\\nabla\\n  \\\\right]u_h\\\\right)_\\\\Omega\\n  +\\n  \\\\text{boundary terms}.\\n\\\\]\\n\\n That means that the strong form of the equation would be of the sort       \\n\\\\[\\n  \\\\beta \\\\cdot \\\\nabla u_h\\n  -\\n  \\\\delta\\n  \\\\left[\\\\beta \\\\cdot \\\\nabla\\\\right] \\\\left[\\\\beta \\\\cdot \\\\nabla\\n  \\\\right] u_h.\\n\\\\]\\n\\n What is important to recognize now is that \\\\(\\\\beta\\\\cdot\\\\nabla\\\\) is the derivative in direction \\\\(\\\\beta\\\\). So, if we denote this by \\\\(\\\\beta\\\\cdot\\\\nabla=\\\\frac{\\\\partial}{\\\\partial \\\\beta}\\\\) (in the same way as we often write \\\\(\\\\mathbf n\\\\cdot\\\\nabla=\\\\frac{\\\\partial}{\\\\partial n}\\\\) for the derivative in normal direction at the boundary), then the strong form of the equation is      \\n\\\\[\\n  \\\\beta \\\\cdot \\\\nabla u_h\\n  -\\n  \\\\delta\\n  \\\\frac{\\\\partial^2}{\\\\partial\\\\beta^2} u_h.\\n\\\\]\\n\\n In other words, the unusual choice of test function is equivalent to the addition of term to the strong form that corresponds to a second order (i.e., diffusion) differential operator in the direction of the wind field \\\\(\\\\beta\\\\), i.e., in \\\"streamline direction\\\". A fuller account would also have to explore the effect of the test function on boundary values and why it is necessary to also use the same test function for the right hand side, but the discussion above might make clear where the name \\\"streamline diffusion\\\" for the method originates from.\\nWhy is this method also called \\\"Petrov-Galerkin\\\"?\\nA \\\"Galerkin method\\\" is one where one obtains the weak formulation by multiplying the equation by a test function \\\\(v\\\\) (and then integrating over \\\\(\\\\Omega\\\\)) where the functions \\\\(v\\\\) are from the same space as the solution \\\\(u\\\\) (though possibly with different boundary values). But this is not strictly necessary: One could also imagine choosing the test functions from a different set of functions, as long as that different set has \\\"as many dimensions\\\" as the original set of functions so that we end up with as many independent equations as there are degrees of freedom (where all of this needs to be appropriately defined in the infinite-dimensional case). Methods that make use of this possibility (i.e., choose the set of test functions differently than the set of solutions) are called \\\"Petrov-Galerkin\\\" methods. In the current case, the test functions all have the form \\\\(v+\\\\beta\\\\cdot\\\\nabla v\\\\) where \\\\(v\\\\) is from the set of solutions.\\nWhy is this method also called \\\"streamline-upwind\\\"?\\nUpwind methods have a long history in the derivation of stabilized schemes for advection equations. Generally, the idea is that instead of looking at a function \\\"here\\\", we look at it a small distance further \\\"upstream\\\" or \\\"upwind\\\", i.e., where the information \\\"here\\\" originally came from. This might suggest not considering \\\\(u(\\\\mathbf x)\\\\), but something like \\\\(u(\\\\mathbf x - \\\\delta \\\\beta)\\\\). Or, equivalently upon integration, we could evaluate \\\\(u(\\\\mathbf x)\\\\) and instead consider \\\\(v\\\\) a bit downstream: \\\\(v(\\\\mathbf x+\\\\delta \\\\beta)\\\\). This would be cumbersome for a variety of reasons: First, we would have to define what \\\\(v\\\\) should be if \\\\(\\\\mathbf x + \\\\delta \\\\beta\\\\) happens to be outside \\\\(\\\\Omega\\\\); second, computing integrals numerically would be much more awkward since we no longer evaluate \\\\(u\\\\) and \\\\(v\\\\) at the same quadrature points. But since we assume that \\\\(\\\\delta\\\\) is small, we can do a Taylor expansion:     \\n\\\\[\\n  v(\\\\mathbf x + \\\\delta \\\\beta)\\n  \\\\approx\\n  v(\\\\mathbf x) + \\\\delta \\\\beta \\\\cdot \\\\nabla v(\\\\mathbf x).\\n\\\\]\\n\\n This form for the test function should by now look familiar.\\nSolving the linear system that corresponds to the advection equation\\nAs the resulting matrix is no longer symmetric positive definite, we cannot use the usual Conjugate Gradient method (implemented in the SolverCG class) to solve the system. Instead, we use the GMRES (Generalized Minimum RESidual) method (implemented in SolverGMRES) that is suitable for problems of the kind we have here.\\nThe test case\\nFor the problem which we will solve in this tutorial program, we use the following domain and functions (in \\\\(d=2\\\\) space dimensions):                                \\n\\\\begin{eqnarray*}\\n  \\\\Omega &=& [-1,1]^d \\\\\\\\\\n  \\\\beta({\\\\mathbf x})\\n  &=&\\n  \\\\left(\\n    \\\\begin{array}{c}2 \\\\\\\\ 1+\\\\frac 45 \\\\sin(8\\\\pi x)\\\\end{array}\\n  \\\\right),\\n  \\\\\\\\\\n  s\\n  &=&\\n  0.1,\\n  \\\\\\\\\\n  f({\\\\mathbf x})\\n  &=&\\n  \\\\left\\\\{\\n    \\\\begin{array}{ll}\\n        \\\\frac 1{10 s^d} &\\n        \\\\mathrm{for}\\\\ |{\\\\mathbf x}-{\\\\mathbf x}_0|<s, \\\\\\\\\\n        0 & \\\\mathrm{else},\\n    \\\\end{array}\\n  \\\\right.\\n  \\\\qquad\\\\qquad\\n  {\\\\mathbf x}_0\\n  =\\n  \\\\left(\\n    \\\\begin{array}{c} -\\\\frac 34 \\\\\\\\ -\\\\frac 34\\\\end{array}\\n  \\\\right),\\n  \\\\\\\\\\n  g\\n  &=&\\n  e^{5 (1 - |\\\\mathbf x|^2)} \\\\sin(16\\\\pi|\\\\mathbf x|^2).\\n\\\\end{eqnarray*}\\n\\n For \\\\(d>2\\\\), we extend \\\\(\\\\beta\\\\) and \\\\({\\\\mathbf x}_0\\\\) by simply duplicating the last of the components shown above one more time.\\nWith all of this, the following comments are in order: \\n\\nThe advection field \\\\(\\\\beta\\\\) transports the solution roughly in diagonal direction from lower left to upper right, but with a wiggle structure superimposed. \\n\\nThe right hand side adds to the field generated by the inflow boundary conditions a blob in the lower left corner, which is then transported along. \\n\\nThe inflow boundary conditions impose a weighted sinusoidal structure that is transported along with the flow field. Since \\\\(|{\\\\mathbf x}|\\\\ge 1\\\\) on the boundary, the weighting term never gets very large. \\n\\nA simple refinement criterion\\nIn all previous examples with adaptive refinement, we have used an error estimator first developed by Kelly et al., which assigns to each cell \\\\(K\\\\) the following indicator:        \\n\\\\[\\n  \\\\eta_K =\\n  \\\\left(\\n    \\\\frac {h_K}{24}\\n    \\\\int_{\\\\partial K}\\n      [\\\\partial_n u_h]^2 \\\\; d\\\\sigma\\n  \\\\right)^{1/2},\\n\\\\]\\n\\n where \\\\([\\\\partial n u_h]\\\\) denotes the jump of the normal derivatives across a face \\\\(\\\\gamma\\\\subset\\\\partial K\\\\) of the cell \\\\(K\\\\). It can be shown that this error indicator uses a discrete analogue of the second derivatives, weighted by a power of the cell size that is adjusted to the linear elements assumed to be in use here:    \\n\\\\[\\n  \\\\eta_K \\\\approx\\n  C h \\\\| \\\\nabla^2 u \\\\|_K,\\n\\\\]\\n\\n which itself is related to the error size in the energy norm.\\nThe problem with this error indicator in the present case is that it assumes that the exact solution possesses second derivatives. This is already questionable for solutions to Laplace's problem in some cases, although there most problems allow solutions in \\\\(H^2\\\\). If solutions are only in \\\\(H^1\\\\), then the second derivatives would be singular in some parts (of lower dimension) of the domain and the error indicators would not reduce there under mesh refinement. Thus, the algorithm would continuously refine the cells around these parts, i.e. would refine into points or lines (in 2d).\\nHowever, for the present case, solutions are usually not even in \\\\(H^1\\\\) (and this missing regularity is not the exceptional case as for Laplace's equation), so the error indicator described above is not really applicable. We will thus develop an indicator that is based on a discrete approximation of the gradient. Although the gradient often does not exist, this is the only criterion available to us, at least as long as we use continuous elements as in the present example. To start with, we note that given two cells \\\\(K\\\\), \\\\(K'\\\\) of which the centers are connected by the vector \\\\({\\\\mathbf y}_{KK'}\\\\), we can approximate the directional derivative of a function \\\\(u\\\\) as follows:     \\n\\\\[\\n  \\\\frac{{\\\\mathbf y}_{KK'}^T}{|{\\\\mathbf y}_{KK'}|} \\\\nabla u\\n  \\\\approx\\n  \\\\frac{u(K') - u(K)}{|{\\\\mathbf y}_{KK'}|},\\n\\\\]\\n\\n where \\\\(u(K)\\\\) and \\\\(u(K')\\\\) denote \\\\(u\\\\) evaluated at the centers of the respective cells. We now multiply the above approximation by \\\\({\\\\mathbf y}_{KK'}/|{\\\\mathbf y}_{KK'}|\\\\) and sum over all neighbors \\\\(K'\\\\) of \\\\(K\\\\):          \\n\\\\[\\n  \\\\underbrace{\\n    \\\\left(\\\\sum_{K'} \\\\frac{{\\\\mathbf y}_{KK'} {\\\\mathbf y}_{KK'}^T}\\n                         {|{\\\\mathbf y}_{KK'}|^2}\\\\right)}_{=:Y}\\n  \\\\nabla u\\n  \\\\approx\\n  \\\\sum_{K'}\\n  \\\\frac{{\\\\mathbf y}_{KK'}}{|{\\\\mathbf y}_{KK'}|}\\n  \\\\frac{u(K') - u(K)}{|{\\\\mathbf y}_{KK'}|}.\\n\\\\]\\n\\n If the vectors \\\\({\\\\mathbf y}_{KK'}\\\\) connecting \\\\(K\\\\) with its neighbors span the whole space (i.e. roughly: \\\\(K\\\\) has neighbors in all directions), then the term in parentheses in the left hand side expression forms a regular matrix, which we can invert to obtain an approximation of the gradient of \\\\(u\\\\) on \\\\(K\\\\):          \\n\\\\[\\n  \\\\nabla u\\n  \\\\approx\\n  Y^{-1}\\n  \\\\left(\\n    \\\\sum_{K'}\\n    \\\\frac{{\\\\mathbf y}_{KK'}}{|{\\\\mathbf y}_{KK'}|}\\n    \\\\frac{u(K') - u(K)}{|{\\\\mathbf y}_{KK'}|}\\n  \\\\right).\\n\\\\]\\n\\n We will denote the approximation on the right hand side by \\\\(\\\\nabla_h u(K)\\\\), and we will use the following quantity as refinement criterion:   \\n\\\\[\\n  \\\\eta_K = h^{1+d/2} |\\\\nabla_h u_h(K)|,\\n\\\\]\\n\\n which is inspired by the following (not rigorous) argument:                    \\n\\\\begin{eqnarray*}\\n  \\\\|u-u_h\\\\|^2_{L_2}\\n  &\\\\le&\\n  C h^2 \\\\|\\\\nabla u\\\\|^2_{L_2}\\n\\\\\\\\\\n  &\\\\approx&\\n  C\\n  \\\\sum_K\\n  h_K^2 \\\\|\\\\nabla u\\\\|^2_{L_2(K)}\\n\\\\\\\\\\n  &\\\\le&\\n  C\\n  \\\\sum_K\\n  h_K^2 h_K^d \\\\|\\\\nabla u\\\\|^2_{L_\\\\infty(K)}\\n\\\\\\\\\\n  &\\\\approx&\\n  C\\n  \\\\sum_K\\n  h_K^{2+d} |\\\\nabla_h u_h(K)|^2\\n\\\\end{eqnarray*}\\n\\n The commented program\\nJust as in previous examples, we have to include several files of which the meaning has already been discussed:\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/dynamic_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/solver_gmres.h>\\n\\u00a0 #include <deal.II/lac/precondition.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 #include <deal.II/grid/grid_refinement.h>\\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 #include <deal.II/grid/grid_out.h>\\n\\u00a0 \\nThe following two files provide classes and information for multithreaded programs. In the first one, the classes and functions are declared which we need to do assembly in parallel (i.e. the WorkStream namespace). The second file has a class MultithreadInfo which can be used to query the number of processors in your system, which is often useful when deciding how many threads to start in parallel.\\n\\u00a0 #include <deal.II/base/work_stream.h>\\n\\u00a0 #include <deal.II/base/multithread_info.h>\\n\\u00a0 \\nThe next new include file declares a base class TensorFunction not unlike the Function class, but with the difference that TensorFunction::value returns a Tensor instead of a scalar.\\n\\u00a0 #include <deal.II/base/tensor_function.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/error_estimator.h>\\n\\u00a0 \\nThis is C++, as we want to write some output to disk:\\n\\u00a0 #include <fstream>\\n\\u00a0 #include <iostream>\\n\\u00a0 \\n\\u00a0 \\nThe last step is as in previous programs:\\n\\u00a0 namespace Step9\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n Equation data declaration\\nNext we declare a class that describes the advection field. This, of course, is a vector field with as many components as there are space dimensions. One could now use a class derived from the Function base class, as we have done for boundary values and coefficients in previous examples, but there is another possibility in the library, namely a base class that describes tensor valued functions. This is more convenient than overriding Function::value() with a method that knows about multiple function components: At the end of the day we need a Tensor, so we may as well just use a class that returns a Tensor.\\n\\u00a0   template <int dim>\\n\\u00a0   class AdvectionField : public TensorFunction<1, dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual Tensor<1, dim> value(const Point<dim> &p) const override;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   Tensor<1, dim> AdvectionField<dim>::value(const Point<dim> &p) const\\n\\u00a0   {\\n\\u00a0     Tensor<1, dim> value;\\n\\u00a0     value[0] = 2;\\n\\u00a0     for (unsigned int i = 1; i < dim; ++i)\\n\\u00a0       value[i] = 1 + 0.8 * std::sin(8. * numbers::PI * p[0]);\\n\\u00a0 \\n\\u00a0     return value;\\n\\u00a0   }\\n\\u00a0 \\nPointDefinition point.h:111\\nTensorFunctionDefinition tensor_function.h:58\\nTensorFunction::valuevirtual value_type value(const Point< dim > &p) const\\nTensorDefinition tensor.h:471\\nnumbers::PIstatic constexpr double PIDefinition numbers.h:259\\nstd::sin::VectorizedArray< Number, width > sin(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6589\\nBesides the advection field, we need two functions describing the source terms (right hand side) and the boundary values. As described in the introduction, the source is a constant function in the vicinity of a source point, which we denote by the constant static variable center_point. We set the values of this center using the same template tricks as we have shown in the step-7 example program. The rest is simple and has been shown previously.\\n\\u00a0   template <int dim>\\n\\u00a0   class RightHandSide : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override;\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     static const Point<dim> center_point;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <>\\n\\u00a0   const Point<1> RightHandSide<1>::center_point = Point<1>(-0.75);\\n\\u00a0 \\n\\u00a0   template <>\\n\\u00a0   const Point<2> RightHandSide<2>::center_point = Point<2>(-0.75, -0.75);\\n\\u00a0 \\n\\u00a0   template <>\\n\\u00a0   const Point<3> RightHandSide<3>::center_point = Point<3>(-0.75, -0.75, -0.75);\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunctionDefinition function.h:152\\nFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const\\nThe only new thing here is that we check for the value of the component parameter. As this is a scalar function, it is obvious that it only makes sense if the desired component has the index zero, so we assert that this is indeed the case. ExcIndexRange is a global predefined exception (probably the one most often used, we therefore made it global instead of local to some class), that takes three parameters: the index that is outside the allowed range, the first element of the valid range and the one past the last (i.e. again the half-open interval so often used in the C++ standard library):\\n\\u00a0   template <int dim>\\n\\u00a0   double RightHandSide<dim>::value(const Point<dim>  &p,\\n\\u00a0                                    const unsigned int component) const\\n\\u00a0   {\\n\\u00a0     (void)component;\\n\\u00a0     Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0     const double diameter = 0.1;\\n\\u00a0     return ((p - center_point).norm_square() < diameter * diameter ?\\n\\u00a0               0.1 / std::pow(diameter, dim) :\\n\\u00a0               0.0);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\nstd::pow::VectorizedArray< Number, width > pow(const ::VectorizedArray< Number, width > &, const Number p)Definition vectorization.h:6885\\nFinally for the boundary values, which is just another class derived from the Function base class:\\n\\u00a0   template <int dim>\\n\\u00a0   class BoundaryValues : public Function<dim>\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     virtual double value(const Point<dim>  &p,\\n\\u00a0                          const unsigned int component = 0) const override;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   double BoundaryValues<dim>::value(const Point<dim>  &p,\\n\\u00a0                                     const unsigned int component) const\\n\\u00a0   {\\n\\u00a0     (void)component;\\n\\u00a0     Assert(component == 0, ExcIndexRange(component, 0, 1));\\n\\u00a0 \\n\\u00a0     const double sine_term = std::sin(16. * numbers::PI * p.norm_square());\\n\\u00a0     const double weight    = std::exp(5. * (1. - p.norm_square()));\\n\\u00a0     return weight * sine_term;\\n\\u00a0   }\\n\\u00a0 \\nstd::exp::VectorizedArray< Number, width > exp(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6829\\n AdvectionProblem class declaration\\nHere comes the main class of this program. It is very much like the main classes of previous examples, so we again only comment on the differences.\\n\\u00a0   template <int dim>\\n\\u00a0   class AdvectionProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     AdvectionProblem();\\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void setup_system();\\n\\u00a0 \\nThe next set of functions will be used to assemble the matrix. However, unlike in the previous examples, the assemble_system() function will not do the work itself, but rather will delegate the actual assembly to helper functions assemble_local_system() and copy_local_to_global(). The rationale is that matrix assembly can be parallelized quite well, as the computation of the local contributions on each cell is entirely independent of other cells, and we only have to synchronize when we add the contribution of a cell to the global matrix.\\nThe strategy for parallelization we choose here is one of the possibilities mentioned in detail in the Parallel computing with multiple processors accessing shared memory topic in the documentation. Specifically, we will use the WorkStream approach discussed there. Since there is so much documentation in this group, we will not repeat the rationale for the design choices here (for example, if you read through the topic mentioned above, you will understand what the purpose of the AssemblyScratchData and AssemblyCopyData structures is). Rather, we will only discuss the specific implementation.\\nIf you read the page mentioned above, you will find that in order to parallelize assembly, we need two data structures \\u2013 one that corresponds to data that we need during local integration (\\\"scratch data\\\", i.e., things we only need as temporary storage), and one that carries information from the local integration to the function that then adds the local contributions to the corresponding elements of the global matrix. The former of these typically contains the FEValues and FEFaceValues objects, whereas the latter has the local matrix, local right hand side, and information about which degrees of freedom live on the cell for which we are assembling a local contribution. With this information, the following should be relatively self-explanatory:\\n\\u00a0     struct AssemblyScratchData\\n\\u00a0     {\\n\\u00a0       AssemblyScratchData(const FiniteElement<dim> &fe);\\n\\u00a0       AssemblyScratchData(const AssemblyScratchData &scratch_data);\\n\\u00a0 \\nFiniteElementDefinition fe.h:655\\nFEValues and FEFaceValues are expensive objects to set up, so we include them in the scratch object so that as much data is reused between cells as possible.\\n\\u00a0       FEValues<dim>     fe_values;\\n\\u00a0       FEFaceValues<dim> fe_face_values;\\n\\u00a0 \\nFEFaceValuesDefinition fe_values.h:322\\nFEValuesDefinition fe_values.h:63\\nWe also store a few vectors that we will populate with values on each cell. Setting these objects up is, in the usual case, cheap; however, they require memory allocations, which can be expensive in multithreaded applications. Hence we keep them here so that computations on a cell do not require new allocations.\\n\\u00a0       std::vector<double>         rhs_values;\\n\\u00a0       std::vector<Tensor<1, dim>> advection_directions;\\n\\u00a0       std::vector<double>         face_boundary_values;\\n\\u00a0       std::vector<Tensor<1, dim>> face_advection_directions;\\n\\u00a0 \\nFinally, we need objects that describe the problem's data:\\n\\u00a0       AdvectionField<dim> advection_field;\\n\\u00a0       RightHandSide<dim>  right_hand_side;\\n\\u00a0       BoundaryValues<dim> boundary_values;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     struct AssemblyCopyData\\n\\u00a0     {\\n\\u00a0       FullMatrix<double>                   cell_matrix;\\n\\u00a0       Vector<double>                       cell_rhs;\\n\\u00a0       std::vector<types::global_dof_index> local_dof_indices;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     void assemble_system();\\n\\u00a0     void local_assemble_system(\\n\\u00a0       const typename DoFHandler<dim>::active_cell_iterator &cell,\\n\\u00a0       AssemblyScratchData                                  &scratch,\\n\\u00a0       AssemblyCopyData                                     &copy_data);\\n\\u00a0     void copy_local_to_global(const AssemblyCopyData &copy_data);\\n\\u00a0 \\n\\u00a0 \\nFullMatrixDefinition full_matrix.h:79\\nVectorDefinition vector.h:120\\nDoFHandler::active_cell_iteratortypename ActiveSelector::active_cell_iterator active_cell_iteratorDefinition dof_handler.h:440\\nThe following functions again are the same as they were in previous examples, as are the subsequent variables:\\n\\u00a0     void solve();\\n\\u00a0     void refine_grid();\\n\\u00a0     void output_results(const unsigned int cycle) const;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0     DoFHandler<dim>    dof_handler;\\n\\u00a0 \\n\\u00a0     const FE_Q<dim> fe;\\n\\u00a0 \\n\\u00a0     AffineConstraints<double> hanging_node_constraints;\\n\\u00a0 \\n\\u00a0     SparsityPattern      sparsity_pattern;\\n\\u00a0     SparseMatrix<double> system_matrix;\\n\\u00a0 \\n\\u00a0     Vector<double> solution;\\n\\u00a0     Vector<double> system_rhs;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nDoFHandlerDefinition dof_handler.h:317\\nFE_QDefinition fe_q.h:554\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nTriangulationDefinition tria.h:1323\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\n GradientEstimation class declaration\\nNow, finally, here comes the class that will compute the difference approximation of the gradient on each cell and weighs that with a power of the mesh size, as described in the introduction. This class is a simple version of the DerivativeApproximation class in the library, that uses similar techniques to obtain finite difference approximations of the gradient of a finite element field, or of higher derivatives.\\nThe class has one public static function estimate that is called to compute a vector of error indicators, and a few private functions that do the actual work on all active cells. As in other parts of the library, we follow an informal convention to use vectors of floats for error indicators rather than the common vectors of doubles, as the additional accuracy is not necessary for estimated values.\\nIn addition to these two functions, the class declares two exceptions which are raised when a cell has no neighbors in each of the space directions (in which case the matrix described in the introduction would be singular and can't be inverted), while the other one is used in the more common case of invalid parameters to a function, namely a vector of wrong size.\\nTwo other comments: first, the class has no non-static member functions or variables, so this is not really a class, but rather serves the purpose of a namespace in C++. The reason that we chose a class over a namespace is that this way we can declare functions that are private. This can be done with namespaces as well, if one declares some functions in header files in the namespace and implements these and other functions in the implementation file. The functions not declared in the header file are still in the namespace but are not callable from outside. However, as we have only one file here, it is not possible to hide functions in the present case.\\nThe second comment is that the dimension template parameter is attached to the function rather than to the class itself. This way, you don't have to specify the template parameter yourself as in most other cases, but the compiler can figure its value out itself from the dimension of the DoFHandler object that one passes as first argument.\\nBefore jumping into the fray with the implementation, let us also comment on the parallelization strategy. We have already introduced the necessary framework for using the WorkStream concept in the declaration of the main class of this program above. We will use it again here. In the current context, this means that we have to define \\n\\nclasses for scratch and copy objects, \\n\\na function that does the local computation on one cell, and \\n\\na function that copies the local result into a global object. \\n\\nGiven this general framework, we will, however, deviate from it a bit. In particular, WorkStream was generally invented for cases where each local computation on a cell adds to a global object \\u2013 for example, when assembling linear systems where we add local contributions into a global matrix and right hand side. WorkStream is designed to handle the potential conflict of multiple threads trying to do this addition at the same time, and consequently has to provide for some way to ensure that only one thread gets to do this at a time. Here, however, the situation is slightly different: we compute contributions from every cell individually, but then all we need to do is put them into an element of an output vector that is unique to each cell. Consequently, there is no risk that the write operations from two cells might conflict, and the elaborate machinery of WorkStream to avoid conflicting writes is not necessary. Consequently, what we will do is this: We still need a scratch object that holds, for example, the FEValues object. However, we only create a fake, empty copy data structure. Likewise, we do need the function that computes local contributions, but since it can already put the result into its final location, we do not need a copy-local-to-global function and will instead give the WorkStream::run() function an empty function object \\u2013 the equivalent to a NULL function pointer.\\nThere is one more part to this class. In previous examples, we have used assertions that throw exceptions in several places (see, for example, step-5 and step-8). However, you have never seen how such exceptions are declared. The code below shows how to do that, using the DeclException2 macro.\\nThe syntax may look a little strange, but is reasonable. The format is basically as follows: Use the name of one of the macros DeclExceptionN, where N denotes the number of additional parameters which the exception object should take. In this case, as we want to throw the exception when the sizes of two vectors differ, we need two arguments, so we use DeclException2. The first parameter then describes the name of the exception, while the following declare the data types of the parameters. The last argument is a sequence of output directives that will be piped into the std::cerr object, thus the strange format with the leading << operator and the like. Note that we can access the parameters which are passed to the exception upon construction (i.e. within the Assert call) by using the names arg1 through argN, where N is the number of arguments as defined by the use of the respective macro DeclExceptionN.\\nTo learn how the preprocessor expands this macro into actual code, please refer to the documentation of the exception classes. In brief, this macro call declares and defines a class ExcDimensionMismatch inheriting from ExceptionBase which implements all necessary error output functions.\\nNoteThis exception we declare here is similar to the used inside the AssertDimension macro, which is a handy wrapper for checking that the dimensions of two given objects are equal, and that you have already seen in step-8.\\n\\u00a0   class GradientEstimation\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     template <int dim>\\n\\u00a0     static void estimate(const DoFHandler<dim> &dof,\\n\\u00a0                          const Vector<double>  &solution,\\n\\u00a0                          Vector<float>         &error_per_cell);\\n\\u00a0 \\n\\u00a0     DeclException2(ExcInvalidVectorLength,\\n\\u00a0                    int,\\n\\u00a0                    int,\\n\\u00a0                    << \\\"Vector has length \\\" << arg1 << \\\", but should have \\\"\\n\\u00a0                    << arg2);\\n\\u00a0     DeclException0(ExcInsufficientDirections);\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     template <int dim>\\n\\u00a0     struct EstimateScratchData\\n\\u00a0     {\\n\\u00a0       EstimateScratchData(const FiniteElement<dim> &fe,\\n\\u00a0                           const Vector<double>     &solution,\\n\\u00a0                           Vector<float>            &error_per_cell);\\n\\u00a0       EstimateScratchData(const EstimateScratchData &data);\\n\\u00a0 \\n\\u00a0       FEValues<dim> fe_midpoint_value;\\n\\u00a0       std::vector<typename DoFHandler<dim>::active_cell_iterator>\\n\\u00a0         active_neighbors;\\n\\u00a0 \\n\\u00a0       const Vector<double> &solution;\\n\\u00a0       Vector<float>        &error_per_cell;\\n\\u00a0 \\n\\u00a0       std::vector<double> cell_midpoint_value;\\n\\u00a0       std::vector<double> neighbor_midpoint_value;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     struct EstimateCopyData\\n\\u00a0     {};\\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     static void\\n\\u00a0     estimate_cell(const typename DoFHandler<dim>::active_cell_iterator &cell,\\n\\u00a0                   EstimateScratchData<dim> &scratch_data,\\n\\u00a0                   const EstimateCopyData   &copy_data);\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDeclException0#define DeclException0(Exception0)Definition exceptions.h:471\\nDeclException2#define DeclException2(Exception2, type1, type2, outsequence)Definition exceptions.h:539\\n AdvectionProblem class implementation\\nNow for the implementation of the main class. Constructor, destructor and the function setup_system follow the same pattern that was used previously, so we need not comment on these three function:\\n\\u00a0   template <int dim>\\n\\u00a0   AdvectionProblem<dim>::AdvectionProblem()\\n\\u00a0     : dof_handler(triangulation)\\n\\u00a0     , fe(5)\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::setup_system()\\n\\u00a0   {\\n\\u00a0     dof_handler.distribute_dofs(fe);\\n\\u00a0     hanging_node_constraints.clear();\\n\\u00a0     DoFTools::make_hanging_node_constraints(dof_handler,\\n\\u00a0                                             hanging_node_constraints);\\n\\u00a0     hanging_node_constraints.close();\\n\\u00a0 \\n\\u00a0     DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n\\u00a0     DoFTools::make_sparsity_pattern(dof_handler,\\n\\u00a0                                     dsp,\\n\\u00a0                                     hanging_node_constraints,\\n\\u00a0                                     /*keep_constrained_dofs =*/false);\\n\\u00a0     sparsity_pattern.copy_from(dsp);\\n\\u00a0 \\n\\u00a0     system_matrix.reinit(sparsity_pattern);\\n\\u00a0 \\n\\u00a0     solution.reinit(dof_handler.n_dofs());\\n\\u00a0     system_rhs.reinit(dof_handler.n_dofs());\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nDoFTools::make_hanging_node_constraintsvoid make_hanging_node_constraints(const DoFHandler< dim, spacedim > &dof_handler, AffineConstraints< number > &constraints)Definition dof_tools_constraints.cc:3073\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nIn the following function, the matrix and right hand side are assembled. As stated in the documentation of the main class above, it does not do this itself, but rather delegates to the function following next, utilizing the WorkStream concept discussed in Parallel computing with multiple processors accessing shared memory .\\nIf you have looked through the Parallel computing with multiple processors accessing shared memory topic, you will have seen that assembling in parallel does not take an incredible amount of extra code as long as you diligently describe what the scratch and copy data objects are, and if you define suitable functions for the local assembly and the copy operation from local contributions to global objects. This done, the following will do all the heavy lifting to get these operations done on multiple threads on as many cores as you have in your system:\\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::assemble_system()\\n\\u00a0   {\\n\\u00a0     WorkStream::run(dof_handler.begin_active(),\\n\\u00a0                     dof_handler.end(),\\n\\u00a0                     *this,\\n\\u00a0                     &AdvectionProblem::local_assemble_system,\\n\\u00a0                     &AdvectionProblem::copy_local_to_global,\\n\\u00a0                     AssemblyScratchData(fe),\\n\\u00a0                     AssemblyCopyData());\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nWorkStream::runvoid run(const std::vector< std::vector< Iterator > > &colored_iterators, Worker worker, Copier copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const unsigned int queue_length=2 *MultithreadInfo::n_threads(), const unsigned int chunk_size=8)Definition work_stream.h:1272\\nAs already mentioned above, we need to have scratch objects for the parallel computation of local contributions. These objects contain FEValues and FEFaceValues objects (as well as some arrays), and so we will need to have constructors and copy constructors that allow us to create them. For the cell terms we need the values and gradients of the shape functions, the quadrature points in order to determine the source density and the advection field at a given point, and the weights of the quadrature points times the determinant of the Jacobian at these points. In contrast, for the boundary integrals, we don't need the gradients, but rather the normal vectors to the cells. This determines which update flags we will have to pass to the constructors of the members of the class:\\n\\u00a0   template <int dim>\\n\\u00a0   AdvectionProblem<dim>::AssemblyScratchData::AssemblyScratchData(\\n\\u00a0     const FiniteElement<dim> &fe)\\n\\u00a0     : fe_values(fe,\\n\\u00a0                 QGauss<dim>(fe.degree + 1),\\n\\u00a0                 update_values | update_gradients | update_quadrature_points |\\n\\u00a0                   update_JxW_values)\\n\\u00a0     , fe_face_values(fe,\\n\\u00a0                      QGauss<dim - 1>(fe.degree + 1),\\n\\u00a0                      update_values | update_quadrature_points |\\n\\u00a0                        update_JxW_values | update_normal_vectors)\\n\\u00a0     , rhs_values(fe_values.get_quadrature().size())\\n\\u00a0     , advection_directions(fe_values.get_quadrature().size())\\n\\u00a0     , face_boundary_values(fe_face_values.get_quadrature().size())\\n\\u00a0     , face_advection_directions(fe_face_values.get_quadrature().size())\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   AdvectionProblem<dim>::AssemblyScratchData::AssemblyScratchData(\\n\\u00a0     const AssemblyScratchData &scratch_data)\\n\\u00a0     : fe_values(scratch_data.fe_values.get_fe(),\\n\\u00a0                 scratch_data.fe_values.get_quadrature(),\\n\\u00a0                 update_values | update_gradients | update_quadrature_points |\\n\\u00a0                   update_JxW_values)\\n\\u00a0     , fe_face_values(scratch_data.fe_face_values.get_fe(),\\n\\u00a0                      scratch_data.fe_face_values.get_quadrature(),\\n\\u00a0                      update_values | update_quadrature_points |\\n\\u00a0                        update_JxW_values | update_normal_vectors)\\n\\u00a0     , rhs_values(scratch_data.rhs_values.size())\\n\\u00a0     , advection_directions(scratch_data.advection_directions.size())\\n\\u00a0     , face_boundary_values(scratch_data.face_boundary_values.size())\\n\\u00a0     , face_advection_directions(scratch_data.face_advection_directions.size())\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nQGaussDefinition quadrature_lib.h:40\\nint\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_normal_vectors@ update_normal_vectorsNormal vectors.Definition fe_update_flags.h:141\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nNow, this is the function that does the actual work. It is not very different from the assemble_system functions of previous example programs, so we will again only comment on the differences. The mathematical stuff closely follows what we have said in the introduction.\\nThere are a number of points worth mentioning here, though. The first one is that we have moved the FEValues and FEFaceValues objects into the ScratchData object. We have done so because the alternative would have been to simply create one every time we get into this function \\u2013 i.e., on every cell. It now turns out that the FEValues classes were written with the explicit goal of moving everything that remains the same from cell to cell into the construction of the object, and only do as little work as possible in FEValues::reinit() whenever we move to a new cell. What this means is that it would be very expensive to create a new object of this kind in this function as we would have to do it for every cell \\u2013 exactly the thing we wanted to avoid with the FEValues class. Instead, what we do is create it only once (or a small number of times) in the scratch objects and then re-use it as often as we can.\\nThis begs the question of whether there are other objects we create in this function whose creation is expensive compared to its use. Indeed, at the top of the function, we declare all sorts of objects. The AdvectionField, RightHandSide and BoundaryValues do not cost much to create, so there is no harm here. However, allocating memory in creating the rhs_values and similar variables below typically costs a significant amount of time, compared to just accessing the (temporary) values we store in them. Consequently, these would be candidates for moving into the AssemblyScratchData class. We will leave this as an exercise.\\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::local_assemble_system(\\n\\u00a0     const typename DoFHandler<dim>::active_cell_iterator &cell,\\n\\u00a0     AssemblyScratchData                                  &scratch_data,\\n\\u00a0     AssemblyCopyData                                     &copy_data)\\n\\u00a0   {\\nWe define some abbreviations to avoid unnecessarily long lines:\\n\\u00a0     const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n\\u00a0     const unsigned int n_q_points =\\n\\u00a0       scratch_data.fe_values.get_quadrature().size();\\n\\u00a0     const unsigned int n_face_q_points =\\n\\u00a0       scratch_data.fe_face_values.get_quadrature().size();\\n\\u00a0 \\nWe declare cell matrix and cell right hand side...\\n\\u00a0     copy_data.cell_matrix.reinit(dofs_per_cell, dofs_per_cell);\\n\\u00a0     copy_data.cell_rhs.reinit(dofs_per_cell);\\n\\u00a0 \\n... an array to hold the global indices of the degrees of freedom of the cell on which we are presently working...\\n\\u00a0     copy_data.local_dof_indices.resize(dofs_per_cell);\\n\\u00a0 \\n... then initialize the FEValues object...\\n\\u00a0     scratch_data.fe_values.reinit(cell);\\n\\u00a0 \\n... obtain the values of right hand side and advection directions at the quadrature points...\\n\\u00a0     scratch_data.advection_field.value_list(\\n\\u00a0       scratch_data.fe_values.get_quadrature_points(),\\n\\u00a0       scratch_data.advection_directions);\\n\\u00a0     scratch_data.right_hand_side.value_list(\\n\\u00a0       scratch_data.fe_values.get_quadrature_points(), scratch_data.rhs_values);\\n\\u00a0 \\n... set the value of the streamline diffusion parameter as described in the introduction...\\n\\u00a0     const double delta = 0.1 * cell->diameter();\\n\\u00a0 \\n... and assemble the local contributions to the system matrix and right hand side as also discussed above:\\n\\u00a0     for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n\\u00a0       for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0         {\\nAlias the AssemblyScratchData object to keep the lines from getting too long:\\n\\u00a0           const auto &sd = scratch_data;\\n\\u00a0           for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0             copy_data.cell_matrix(i, j) +=\\n\\u00a0               ((sd.fe_values.shape_value(i, q_point) +           // (phi_i +\\n\\u00a0                 delta * (sd.advection_directions[q_point] *      // delta beta\\n\\u00a0                          sd.fe_values.shape_grad(i, q_point))) * // grad phi_i)\\n\\u00a0                sd.advection_directions[q_point] *                // beta\\n\\u00a0                sd.fe_values.shape_grad(j, q_point)) *            // grad phi_j\\n\\u00a0               sd.fe_values.JxW(q_point);                         // dx\\n\\u00a0 \\n\\u00a0           copy_data.cell_rhs(i) +=\\n\\u00a0             (sd.fe_values.shape_value(i, q_point) +           // (phi_i +\\n\\u00a0              delta * (sd.advection_directions[q_point] *      // delta beta\\n\\u00a0                       sd.fe_values.shape_grad(i, q_point))) * // grad phi_i)\\n\\u00a0             sd.rhs_values[q_point] *                          // f\\n\\u00a0             sd.fe_values.JxW(q_point);                        // dx\\n\\u00a0         }\\n\\u00a0 \\nBesides the cell terms which we have built up now, the bilinear form of the present problem also contains terms on the boundary of the domain. Therefore, we have to check whether any of the faces of this cell are on the boundary of the domain, and if so assemble the contributions of this face as well. Of course, the bilinear form only contains contributions from the inflow part of the boundary, but to find out whether a certain part of a face of the present cell is part of the inflow boundary, we have to have information on the exact location of the quadrature points and on the direction of flow at this point; we obtain this information using the FEFaceValues object and only decide within the main loop whether a quadrature point is on the inflow boundary.\\n\\u00a0     for (const auto &face : cell->face_iterators())\\n\\u00a0       if (face->at_boundary())\\n\\u00a0         {\\nOk, this face of the present cell is on the boundary of the domain. Just as for the usual FEValues object which we have used in previous examples and also above, we have to reinitialize the FEFaceValues object for the present face:\\n\\u00a0           scratch_data.fe_face_values.reinit(cell, face);\\n\\u00a0 \\nFor the quadrature points at hand, we ask for the values of the inflow function and for the direction of flow:\\n\\u00a0           scratch_data.boundary_values.value_list(\\n\\u00a0             scratch_data.fe_face_values.get_quadrature_points(),\\n\\u00a0             scratch_data.face_boundary_values);\\n\\u00a0           scratch_data.advection_field.value_list(\\n\\u00a0             scratch_data.fe_face_values.get_quadrature_points(),\\n\\u00a0             scratch_data.face_advection_directions);\\n\\u00a0 \\nNow loop over all quadrature points and see whether this face is on the inflow or outflow part of the boundary. The normal vector points out of the cell: since the face is at the boundary, the normal vector points out of the domain, so if the advection direction points into the domain, its scalar product with the normal vector must be negative (to see why this is true, consider the scalar product definition that uses a cosine):\\n\\u00a0           for (unsigned int q_point = 0; q_point < n_face_q_points; ++q_point)\\n\\u00a0             if (scratch_data.fe_face_values.normal_vector(q_point) *\\n\\u00a0                   scratch_data.face_advection_directions[q_point] <\\n\\u00a0                 0.)\\nIf the face is part of the inflow boundary, then compute the contributions of this face to the global matrix and right hand side, using the values obtained from the FEFaceValues object and the formulae discussed in the introduction:\\n\\u00a0               for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0                 {\\n\\u00a0                   for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                     copy_data.cell_matrix(i, j) -=\\n\\u00a0                       (scratch_data.face_advection_directions[q_point] *\\n\\u00a0                        scratch_data.fe_face_values.normal_vector(q_point) *\\n\\u00a0                        scratch_data.fe_face_values.shape_value(i, q_point) *\\n\\u00a0                        scratch_data.fe_face_values.shape_value(j, q_point) *\\n\\u00a0                        scratch_data.fe_face_values.JxW(q_point));\\n\\u00a0 \\n\\u00a0                   copy_data.cell_rhs(i) -=\\n\\u00a0                     (scratch_data.face_advection_directions[q_point] *\\n\\u00a0                      scratch_data.fe_face_values.normal_vector(q_point) *\\n\\u00a0                      scratch_data.face_boundary_values[q_point] *\\n\\u00a0                      scratch_data.fe_face_values.shape_value(i, q_point) *\\n\\u00a0                      scratch_data.fe_face_values.JxW(q_point));\\n\\u00a0                 }\\n\\u00a0         }\\n\\u00a0 \\nThe final piece of information the copy routine needs is the global indices of the degrees of freedom on this cell, so we end by writing them to the local array:\\n\\u00a0     cell->get_dof_indices(copy_data.local_dof_indices);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nThe second function we needed to write was the one that copies the local contributions the previous function computed (and put into the AssemblyCopyData object) into the global matrix and right hand side vector objects. This is essentially what we always had as the last block of code when assembling something on every cell. The following should therefore be pretty obvious:\\n\\u00a0   template <int dim>\\n\\u00a0   void\\n\\u00a0   AdvectionProblem<dim>::copy_local_to_global(const AssemblyCopyData &copy_data)\\n\\u00a0   {\\n\\u00a0     hanging_node_constraints.distribute_local_to_global(\\n\\u00a0       copy_data.cell_matrix,\\n\\u00a0       copy_data.cell_rhs,\\n\\u00a0       copy_data.local_dof_indices,\\n\\u00a0       system_matrix,\\n\\u00a0       system_rhs);\\n\\u00a0   }\\n\\u00a0 \\nThe next function is the linear solver routine. As the system is no longer symmetric positive definite as in all the previous examples, we cannot use the Conjugate Gradient method any more. Rather, we use a solver that is more general and does not rely on any special properties of the matrix: the GMRES method. GMRES, like the conjugate gradient method, requires a decent preconditioner: we use a Jacobi preconditioner here, which works well enough for this problem.\\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     SolverControl               solver_control(std::max<std::size_t>(1000,\\n\\u00a0                                                        system_rhs.size() / 10),\\n\\u00a0                                  1e-10 * system_rhs.l2_norm());\\n\\u00a0     SolverGMRES<Vector<double>> solver(solver_control);\\n\\u00a0     PreconditionJacobi<SparseMatrix<double>> preconditioner;\\n\\u00a0     preconditioner.initialize(system_matrix, 1.0);\\n\\u00a0     solver.solve(system_matrix, solution, system_rhs, preconditioner);\\n\\u00a0 \\n\\u00a0     hanging_node_constraints.distribute(solution);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   Iterations required for convergence: \\\"\\n\\u00a0               << solver_control.last_step() << '\\\\n'\\n\\u00a0               << \\\"   Norm of residual at convergence:     \\\"\\n\\u00a0               << solver_control.last_value() << '\\\\n';\\n\\u00a0   }\\n\\u00a0 \\nPreconditionJacobiDefinition precondition.h:1656\\nPreconditionJacobi::initializevoid initialize(const MatrixType &A, const AdditionalData &parameters=AdditionalData())\\nSolverControlDefinition solver_control.h:67\\nSolverGMRESDefinition solver_gmres.h:353\\nstd::max::VectorizedArray< Number, width > max(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6943\\nThe following function refines the grid according to the quantity described in the introduction. The respective computations are made in the class GradientEstimation.\\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::refine_grid()\\n\\u00a0   {\\n\\u00a0     Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n\\u00a0 \\n\\u00a0     GradientEstimation::estimate(dof_handler,\\n\\u00a0                                  solution,\\n\\u00a0                                  estimated_error_per_cell);\\n\\u00a0 \\n\\u00a0     GridRefinement::refine_and_coarsen_fixed_number(triangulation,\\n\\u00a0                                                     estimated_error_per_cell,\\n\\u00a0                                                     0.3,\\n\\u00a0                                                     0.03);\\n\\u00a0 \\n\\u00a0     triangulation.execute_coarsening_and_refinement();\\n\\u00a0   }\\n\\u00a0 \\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nparallel::distributed::Triangulation::execute_coarsening_and_refinementvirtual void execute_coarsening_and_refinement() overrideDefinition tria.cc:3320\\nGridRefinement::refine_and_coarsen_fixed_numbervoid refine_and_coarsen_fixed_number(Triangulation< dim, spacedim > &triangulation, const Vector< Number > &criteria, const double top_fraction_of_cells, const double bottom_fraction_of_cells, const unsigned int max_n_cells=std::numeric_limits< unsigned int >::max())Definition grid_refinement.cc:318\\nThis function is similar to the one in step-6, but since we use a higher degree finite element we save the solution in a different way. Visualization programs like VisIt and Paraview typically only understand data that is associated with nodes: they cannot plot fifth-degree basis functions, which results in a very inaccurate picture of the solution we computed. To get around this we save multiple patches per cell: in 2d we save \\\\(8\\\\times 8=64\\\\) bilinear \\u2018sub-cells\\u2019 to the VTU file for each cell, and in 3d we save \\\\(8\\\\times 8\\\\times 8 = 512\\\\). The end result is that the visualization program will use a piecewise linear interpolation of the cubic basis functions on a 3 times refined mesh: This captures the solution detail and, with most screen resolutions, looks smooth. We save the grid in a separate step with no extra patches so that we have a visual representation of the cell faces.\\nNoteVersion 9.1 of deal.II gained the ability to write higher degree polynomials (i.e., write piecewise bicubic visualization data for our piecewise bicubic solution) VTK and VTU output: however, not all recent versions of ParaView and VisIt (as of 2018) can read this format, so we use the older, more general (but less efficient) approach here.\\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::output_results(const unsigned int cycle) const\\n\\u00a0   {\\n\\u00a0     {\\n\\u00a0       GridOut           grid_out;\\n\\u00a0       const std::string filename = \\\"grid-\\\" + std::to_string(cycle) + \\\".vtu\\\";\\n\\u00a0       std::ofstream     output(filename);\\n\\u00a0       grid_out.write_vtu(triangulation, output);\\n\\u00a0       std::cout << \\\"   Grid written to \\\" << filename << std::endl;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       DataOut<dim> data_out;\\n\\u00a0       data_out.attach_dof_handler(dof_handler);\\n\\u00a0       data_out.add_data_vector(solution, \\\"solution\\\");\\n\\u00a0       data_out.build_patches(8);\\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nGridOutDefinition grid_out.h:993\\nVTU output can be expensive, both to compute and to write to disk. Here we ask ZLib, a compression library, to compress the data in a way that maximizes throughput.\\n\\u00a0       DataOutBase::VtkFlags vtk_flags;\\n\\u00a0       vtk_flags.compression_level = DataOutBase::CompressionLevel::best_speed;\\n\\u00a0       data_out.set_flags(vtk_flags);\\n\\u00a0 \\n\\u00a0       const std::string filename = \\\"solution-\\\" + std::to_string(cycle) + \\\".vtu\\\";\\n\\u00a0       std::ofstream     output(filename);\\n\\u00a0       data_out.write_vtu(output);\\n\\u00a0       std::cout << \\\"   Solution written to \\\" << filename << std::endl;\\n\\u00a0     }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nDataOutBase::CompressionLevel::best_speed@ best_speed\\nDataOutBase::VtkFlagsDefinition data_out_base.h:1127\\nDataOutBase::VtkFlags::compression_levelDataOutBase::CompressionLevel compression_levelDefinition data_out_base.h:1182\\n... as is the main loop (setup \\u2013 solve \\u2013 refine), aside from the number of cycles and the initial grid:\\n\\u00a0   template <int dim>\\n\\u00a0   void AdvectionProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     for (unsigned int cycle = 0; cycle < 10; ++cycle)\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Cycle \\\" << cycle << ':' << std::endl;\\n\\u00a0 \\n\\u00a0         if (cycle == 0)\\n\\u00a0           {\\n\\u00a0             GridGenerator::hyper_cube(triangulation, -1, 1);\\n\\u00a0             triangulation.refine_global(3);\\n\\u00a0           }\\n\\u00a0         else\\n\\u00a0           {\\n\\u00a0             refine_grid();\\n\\u00a0           }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Number of active cells:              \\\"\\n\\u00a0                   << triangulation.n_active_cells() << std::endl;\\n\\u00a0 \\n\\u00a0         setup_system();\\n\\u00a0 \\n\\u00a0         std::cout << \\\"   Number of degrees of freedom:        \\\"\\n\\u00a0                   << dof_handler.n_dofs() << std::endl;\\n\\u00a0 \\n\\u00a0         assemble_system();\\n\\u00a0         solve();\\n\\u00a0         output_results(cycle);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\n GradientEstimation class implementation\\nNow for the implementation of the GradientEstimation class. Let us start by defining constructors for the EstimateScratchData class used by the estimate_cell() function:\\n\\u00a0   template <int dim>\\n\\u00a0   GradientEstimation::EstimateScratchData<dim>::EstimateScratchData(\\n\\u00a0     const FiniteElement<dim> &fe,\\n\\u00a0     const Vector<double>     &solution,\\n\\u00a0     Vector<float>            &error_per_cell)\\n\\u00a0     : fe_midpoint_value(fe,\\n\\u00a0                         QMidpoint<dim>(),\\n\\u00a0                         update_values | update_quadrature_points)\\n\\u00a0     , solution(solution)\\n\\u00a0     , error_per_cell(error_per_cell)\\n\\u00a0     , cell_midpoint_value(1)\\n\\u00a0     , neighbor_midpoint_value(1)\\n\\u00a0   {\\nQMidpointDefinition quadrature_lib.h:162\\nWe allocate a vector to hold iterators to all active neighbors of a cell. We reserve the maximal number of active neighbors in order to avoid later reallocations. Note how this maximal number of active neighbors is computed here.\\n\\u00a0     active_neighbors.reserve(GeometryInfo<dim>::faces_per_cell *\\n\\u00a0                              GeometryInfo<dim>::max_children_per_face);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   GradientEstimation::EstimateScratchData<dim>::EstimateScratchData(\\n\\u00a0     const EstimateScratchData &scratch_data)\\n\\u00a0     : fe_midpoint_value(scratch_data.fe_midpoint_value.get_fe(),\\n\\u00a0                         scratch_data.fe_midpoint_value.get_quadrature(),\\n\\u00a0                         update_values | update_quadrature_points)\\n\\u00a0     , solution(scratch_data.solution)\\n\\u00a0     , error_per_cell(scratch_data.error_per_cell)\\n\\u00a0     , cell_midpoint_value(1)\\n\\u00a0     , neighbor_midpoint_value(1)\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\nGeometryInfoDefinition geometry_info.h:1964\\nNext comes the implementation of the GradientEstimation class. The first function does not much except for delegating work to the other function, but there is a bit of setup at the top.\\nBefore starting with the work, we check that the vector into which the results are written has the right size, using the Assert macro and the exception class we declared above. Programming mistakes in which one forgets to size arguments correctly at the calling site are quite common. Because the resulting damage from not catching such errors is often subtle (e.g., corruption of data somewhere in memory, or non-reproducible results), it is well worth the effort to check for such things.\\n\\u00a0   template <int dim>\\n\\u00a0   void GradientEstimation::estimate(const DoFHandler<dim> &dof_handler,\\n\\u00a0                                     const Vector<double>  &solution,\\n\\u00a0                                     Vector<float>         &error_per_cell)\\n\\u00a0   {\\n\\u00a0     Assert(\\n\\u00a0       error_per_cell.size() == dof_handler.get_triangulation().n_active_cells(),\\n\\u00a0       ExcInvalidVectorLength(error_per_cell.size(),\\n\\u00a0                              dof_handler.get_triangulation().n_active_cells()));\\n\\u00a0 \\n\\u00a0     WorkStream::run(dof_handler.begin_active(),\\n\\u00a0                     dof_handler.end(),\\n\\u00a0                     &GradientEstimation::template estimate_cell<dim>,\\n\\u00a0                     std::function<void(const EstimateCopyData &)>(),\\n\\u00a0                     EstimateScratchData<dim>(dof_handler.get_fe(),\\n\\u00a0                                              solution,\\n\\u00a0                                              error_per_cell),\\n\\u00a0                     EstimateCopyData());\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nDoFHandler::endcell_iterator end() const\\nDoFHandler::get_feconst FiniteElement< dim, spacedim > & get_fe(const types::fe_index index=0) const\\nDoFHandler::get_triangulationconst Triangulation< dim, spacedim > & get_triangulation() const\\nDoFHandler::begin_activeactive_cell_iterator begin_active(const unsigned int level=0) const\\nHere comes the function that estimates the local error by computing the finite difference approximation of the gradient. The function first computes the list of active neighbors of the present cell and then computes the quantities described in the introduction for each of the neighbors. The reason for this order is that it is not a one-liner to find a given neighbor with locally refined meshes. In principle, an optimized implementation would find neighbors and the quantities depending on them in one step, rather than first building a list of neighbors and in a second step their contributions but we will gladly leave this as an exercise. As discussed before, the worker function passed to WorkStream::run works on \\\"scratch\\\" objects that keep all temporary objects. This way, we do not need to create and initialize objects that are expensive to initialize within the function that does the work every time it is called for a given cell. Such an argument is passed as the second argument. The third argument would be a \\\"copy-data\\\" object (see Parallel computing with multiple processors accessing shared memory for more information) but we do not actually use any of these here. Since WorkStream::run() insists on passing three arguments, we declare this function with three arguments, but simply ignore the last one.\\n(This is unsatisfactory from an aesthetic perspective. It can be avoided by using an anonymous (lambda) function. If you allow, let us here show how. First, assume that we had declared this function to only take two arguments by omitting the unused last one. Now, WorkStream::run still wants to call this function with three arguments, so we need to find a way to \\\"forget\\\" the third argument in the call. Simply passing WorkStream::run the pointer to the function as we do above will not do this \\u2013 the compiler will complain that a function declared to have two arguments is called with three arguments. However, we can do this by passing the following as the third argument to WorkStream::run():  [](const typename DoFHandler<dim>::active_cell_iterator &cell,\\n   EstimateScratchData<dim> &                            scratch_data,\\n   EstimateCopyData &)\\n{\\n  GradientEstimation::estimate_cell<dim>(cell, scratch_data);\\n}\\n  This is not much better than the solution implemented below: either the routine itself must take three arguments or it must be wrapped by something that takes three arguments. We don't use this since adding the unused argument at the beginning is simpler.\\nNow for the details:\\n\\u00a0   template <int dim>\\n\\u00a0   void GradientEstimation::estimate_cell(\\n\\u00a0     const typename DoFHandler<dim>::active_cell_iterator &cell,\\n\\u00a0     EstimateScratchData<dim>                             &scratch_data,\\n\\u00a0     const EstimateCopyData &)\\n\\u00a0   {\\nWe need space for the tensor Y, which is the sum of outer products of the y-vectors.\\n\\u00a0     Tensor<2, dim> Y;\\n\\u00a0 \\nFirst initialize the FEValues object, as well as the Y tensor:\\n\\u00a0     scratch_data.fe_midpoint_value.reinit(cell);\\n\\u00a0 \\nNow, before we go on, we first compute a list of all active neighbors of the present cell. We do so by first looping over all faces and see whether the neighbor there is active, which would be the case if it is on the same level as the present cell or one level coarser (note that a neighbor can only be once coarser than the present cell, as we only allow a maximal difference of one refinement over a face in deal.II). Alternatively, the neighbor could be on the same level and be further refined; then we have to find which of its children are next to the present cell and select these (note that if a child of a neighbor of an active cell that is next to this active cell, needs necessarily be active itself, due to the one-refinement rule cited above).\\nThings are slightly different in one space dimension, as there the one-refinement rule does not exist: neighboring active cells may differ in as many refinement levels as they like. In this case, the computation becomes a little more difficult, but we will explain this below.\\nBefore starting the loop over all neighbors of the present cell, we have to clear the array storing the iterators to the active neighbors, of course.\\n\\u00a0     scratch_data.active_neighbors.clear();\\n\\u00a0     for (const auto face_n : cell->face_indices())\\n\\u00a0       if (!cell->at_boundary(face_n))\\n\\u00a0         {\\nFirst define an abbreviation for the iterator to the face and the neighbor\\n\\u00a0           const auto face     = cell->face(face_n);\\n\\u00a0           const auto neighbor = cell->neighbor(face_n);\\n\\u00a0 \\nThen check whether the neighbor is active. If it is, then it is on the same level or one level coarser (if we are not in 1d), and we are interested in it in any case.\\n\\u00a0           if (neighbor->is_active())\\n\\u00a0             scratch_data.active_neighbors.push_back(neighbor);\\n\\u00a0           else\\n\\u00a0             {\\nIf the neighbor is not active, then check its children.\\n\\u00a0               if (dim == 1)\\n\\u00a0                 {\\nTo find the child of the neighbor which bounds to the present cell, successively go to its right child if we are left of the present cell (n==0), or go to the left child if we are on the right (n==1), until we find an active cell.\\n\\u00a0                   auto neighbor_child = neighbor;\\n\\u00a0                   while (neighbor_child->has_children())\\n\\u00a0                     neighbor_child = neighbor_child->child(face_n == 0 ? 1 : 0);\\n\\u00a0 \\nAs this used some non-trivial geometrical intuition, we might want to check whether we did it right, i.e., check whether the neighbor of the cell we found is indeed the cell we are presently working on. Checks like this are often useful and have frequently uncovered errors both in algorithms like the line above (where it is simple to involuntarily exchange n==1 for n==0 or the like) and in the library (the assumptions underlying the algorithm above could either be wrong, wrongly documented, or are violated due to an error in the library). One could in principle remove such checks after the program works for some time, but it might be a good things to leave it in anyway to check for changes in the library or in the algorithm above.\\nNote that if this check fails, then this is certainly an error that is irrecoverable and probably qualifies as an internal error. We therefore use a predefined exception class to throw here.\\n\\u00a0                   Assert(neighbor_child->neighbor(face_n == 0 ? 1 : 0) == cell,\\n\\u00a0                          ExcInternalError());\\n\\u00a0 \\nIf the check succeeded, we push the active neighbor we just found to the stack we keep:\\n\\u00a0                   scratch_data.active_neighbors.push_back(neighbor_child);\\n\\u00a0                 }\\n\\u00a0               else\\nIf we are not in 1d, we collect all neighbor children \\u2018behind\\u2019 the subfaces of the current face and move on:\\n\\u00a0                 for (unsigned int subface_n = 0; subface_n < face->n_children();\\n\\u00a0                      ++subface_n)\\n\\u00a0                   scratch_data.active_neighbors.push_back(\\n\\u00a0                     cell->neighbor_child_on_subface(face_n, subface_n));\\n\\u00a0             }\\n\\u00a0         }\\n\\u00a0 \\nOK, now that we have all the neighbors, lets start the computation on each of them. First we do some preliminaries: find out about the center of the present cell and the solution at this point. The latter is obtained as a vector of function values at the quadrature points, of which there are only one, of course. Likewise, the position of the center is the position of the first (and only) quadrature point in real space.\\n\\u00a0     const Point<dim> this_center =\\n\\u00a0       scratch_data.fe_midpoint_value.quadrature_point(0);\\n\\u00a0 \\n\\u00a0     scratch_data.fe_midpoint_value.get_function_values(\\n\\u00a0       scratch_data.solution, scratch_data.cell_midpoint_value);\\n\\u00a0 \\nNow loop over all active neighbors and collect the data we need.\\n\\u00a0     Tensor<1, dim> projected_gradient;\\n\\u00a0     for (const auto &neighbor : scratch_data.active_neighbors)\\n\\u00a0       {\\nThen get the center of the neighbor cell and the value of the finite element function at that point. Note that for this information we have to reinitialize the FEValues object for the neighbor cell.\\n\\u00a0         scratch_data.fe_midpoint_value.reinit(neighbor);\\n\\u00a0         const Point<dim> neighbor_center =\\n\\u00a0           scratch_data.fe_midpoint_value.quadrature_point(0);\\n\\u00a0 \\n\\u00a0         scratch_data.fe_midpoint_value.get_function_values(\\n\\u00a0           scratch_data.solution, scratch_data.neighbor_midpoint_value);\\n\\u00a0 \\nCompute the vector y connecting the centers of the two cells. Note that as opposed to the introduction, we denote by y the normalized difference vector, as this is the quantity used everywhere in the computations.\\n\\u00a0         Tensor<1, dim> y        = neighbor_center - this_center;\\n\\u00a0         const double   distance = y.norm();\\n\\u00a0         y /= distance;\\n\\u00a0 \\nTensor::normnumbers::NumberTraits< Number >::real_type norm() const\\nThen add up the contribution of this cell to the Y matrix...\\n\\u00a0         for (unsigned int i = 0; i < dim; ++i)\\n\\u00a0           for (unsigned int j = 0; j < dim; ++j)\\n\\u00a0             Y[i][j] += y[i] * y[j];\\n\\u00a0 \\n... and update the sum of difference quotients:\\n\\u00a0         projected_gradient += (scratch_data.neighbor_midpoint_value[0] -\\n\\u00a0                                scratch_data.cell_midpoint_value[0]) /\\n\\u00a0                               distance * y;\\n\\u00a0       }\\n\\u00a0 \\nIf now, after collecting all the information from the neighbors, we can determine an approximation of the gradient for the present cell, then we need to have passed over vectors y which span the whole space, otherwise we would not have all components of the gradient. This is indicated by the invertibility of the matrix.\\nIf the matrix is not invertible, then the present cell had an insufficient number of active neighbors. In contrast to all previous cases (where we raised exceptions) this is, however, not a programming error: it is a runtime error that can happen in optimized mode even if it ran well in debug mode, so it is reasonable to try to catch this error also in optimized mode. For this case, there is the AssertThrow macro: it checks the condition like the Assert macro, but not only in debug mode; it then outputs an error message, but instead of aborting the program as in the case of the Assert macro, the exception is thrown using the throw command of C++. This way, one has the possibility to catch this error and take reasonable counter actions. One such measure would be to refine the grid globally, as the case of insufficient directions can not occur if every cell of the initial grid has been refined at least once.\\n\\u00a0     AssertThrow(determinant(Y) != 0, ExcInsufficientDirections());\\n\\u00a0 \\nAssertThrow#define AssertThrow(cond, exc)Definition exceptions.h:1739\\ndeterminantDEAL_II_HOST constexpr Number determinant(const SymmetricTensor< 2, dim, Number > &)Definition symmetric_tensor.h:2724\\nIf, on the other hand, the matrix is invertible, then invert it, multiply the other quantity with it, and compute the estimated error using this quantity and the correct powers of the mesh width:\\n\\u00a0     const Tensor<2, dim> Y_inverse = invert(Y);\\n\\u00a0 \\n\\u00a0     const Tensor<1, dim> gradient = Y_inverse * projected_gradient;\\n\\u00a0 \\ninvertDEAL_II_HOST constexpr SymmetricTensor< 2, dim, Number > invert(const SymmetricTensor< 2, dim, Number > &)Definition symmetric_tensor.h:3250\\nThe last part of this function is the one where we write into the element of the output vector what we have just computed. The address of this vector has been stored in the scratch data object, and all we have to do is know how to get at the correct element inside this vector \\u2013 but we can ask the cell we're on the how-manyth active cell it is for this:\\n\\u00a0     scratch_data.error_per_cell(cell->active_cell_index()) =\\n\\u00a0       (std::pow(cell->diameter(), 1 + 1.0 * dim / 2) * gradient.norm());\\n\\u00a0   }\\n\\u00a0 } // namespace Step9\\n\\u00a0 \\n\\u00a0 \\n Main function\\nThe main function is similar to the previous examples. The primary difference is that we use MultithreadInfo to set the maximum number of threads (see the documentation topic Parallel computing with multiple processors accessing shared memory for more information). The number of threads used is the minimum of the environment variable DEAL_II_NUM_THREADS and the parameter of set_thread_limit. If no value is given to set_thread_limit, the default value from the Intel Threading Building Blocks (TBB) library is used. If the call to set_thread_limit is omitted, the number of threads will be chosen by TBB independently of DEAL_II_NUM_THREADS.\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       MultithreadInfo::set_thread_limit();\\n\\u00a0 \\n\\u00a0       Step9::AdvectionProblem<2> advection_problem_2d;\\n\\u00a0       advection_problem_2d.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\nMultithreadInfo::set_thread_limitstatic void set_thread_limit(const unsigned int max_threads=numbers::invalid_unsigned_int)Definition multithread_info.cc:52\\n Results\\nThe results of this program are not particularly spectacular. They consist of the console output, some grid files, and the solution on each of these grids. First for the console output: Cycle 0:\\n   Number of active cells:              64\\n   Number of degrees of freedom:        1681\\n   Iterations required for convergence: 338\\n   Norm of residual at convergence:     2.9177e-11\\n   Grid written to grid-0.vtu\\n   Solution written to solution-0.vtu\\nCycle 1:\\n   Number of active cells:              121\\n   Number of degrees of freedom:        3436\\n   Iterations required for convergence: 448\\n   Norm of residual at convergence:     2.40051e-11\\n   Grid written to grid-1.vtu\\n   Solution written to solution-1.vtu\\nCycle 2:\\n   Number of active cells:              238\\n   Number of degrees of freedom:        6487\\n   Iterations required for convergence: 535\\n   Norm of residual at convergence:     2.06897e-11\\n   Grid written to grid-2.vtu\\n   Solution written to solution-2.vtu\\nCycle 3:\\n   Number of active cells:              481\\n   Number of degrees of freedom:        13510\\n   Iterations required for convergence: 669\\n   Norm of residual at convergence:     1.41502e-11\\n   Grid written to grid-3.vtu\\n   Solution written to solution-3.vtu\\nCycle 4:\\n   Number of active cells:              958\\n   Number of degrees of freedom:        26137\\n   Iterations required for convergence: 1039\\n   Norm of residual at convergence:     1.27042e-11\\n   Grid written to grid-4.vtu\\n   Solution written to solution-4.vtu\\nCycle 5:\\n   Number of active cells:              1906\\n   Number of degrees of freedom:        52832\\n   Iterations required for convergence: 1345\\n   Norm of residual at convergence:     1.00694e-11\\n   Grid written to grid-5.vtu\\n   Solution written to solution-5.vtu\\nCycle 6:\\n   Number of active cells:              3829\\n   Number of degrees of freedom:        104339\\n   Iterations required for convergence: 1976\\n   Norm of residual at convergence:     7.43452e-12\\n   Grid written to grid-6.vtu\\n   Solution written to solution-6.vtu\\nCycle 7:\\n   Number of active cells:              7414\\n   Number of degrees of freedom:        201946\\n   Iterations required for convergence: 2256\\n   Norm of residual at convergence:     7.88403e-12\\n   Grid written to grid-7.vtu\\n   Solution written to solution-7.vtu\\nCycle 8:\\n   Number of active cells:              14413\\n   Number of degrees of freedom:        389558\\n   Iterations required for convergence: 2968\\n   Norm of residual at convergence:     6.72725e-12\\n   Grid written to grid-8.vtu\\n   Solution written to solution-8.vtu\\nCycle 9:\\n   Number of active cells:              28141\\n   Number of degrees of freedom:        750187\\n   Iterations required for convergence: 3885\\n   Norm of residual at convergence:     5.86246e-12\\n   Grid written to grid-9.vtu\\n   Solution written to solution-9.vtu\\nQuite a number of cells are used on the finest level to resolve the features of the solution. Here are the fourth and tenth grids:         and the fourth and tenth solutions:         and both the grid and solution zoomed in:        The solution is created by that part that is transported along the wiggly advection field from the left and lower boundaries to the top right, and the part that is created by the source in the lower left corner, and the results of which are also transported along. The grid shown above is well-adapted to resolve these features. The comparison between plots shows that, even though we are using a high-order approximation, we still need adaptive mesh refinement to fully resolve the wiggles.\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2000 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Author: Wolfgang Bangerth, University of Heidelberg, 2000\\n */\\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\\n#include <deal.II/lac/solver_gmres.h>\\n#include <deal.II/lac/precondition.h>\\n#include <deal.II/lac/affine_constraints.h>\\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n#include <deal.II/grid/grid_refinement.h>\\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_tools.h>\\n#include <deal.II/fe/fe_values.h>\\n#include <deal.II/numerics/data_out.h>\\n#include <deal.II/fe/fe_q.h>\\n#include <deal.II/grid/grid_out.h>\\n \\n#include <deal.II/base/work_stream.h>\\n#include <deal.II/base/multithread_info.h>\\n \\n#include <deal.II/base/tensor_function.h>\\n \\n#include <deal.II/numerics/error_estimator.h>\\n \\n#include <fstream>\\n#include <iostream>\\n \\n \\nnamespace Step9\\n{\\n using namespace dealii;\\n \\n \\n template <int dim>\\n class AdvectionField : public TensorFunction<1, dim>\\n  {\\n public:\\n virtual Tensor<1, dim> value(const Point<dim> &p) const override;\\n  };\\n \\n \\n template <int dim>\\n Tensor<1, dim> AdvectionField<dim>::value(const Point<dim> &p) const\\n {\\n Tensor<1, dim> value;\\n    value[0] = 2;\\n for (unsigned int i = 1; i < dim; ++i)\\n      value[i] = 1 + 0.8 * std::sin(8. * numbers::PI * p[0]);\\n \\n return value;\\n  }\\n \\n template <int dim>\\n class RightHandSide : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override;\\n \\n private:\\n static const Point<dim> center_point;\\n  };\\n \\n \\n template <>\\n const Point<1> RightHandSide<1>::center_point = Point<1>(-0.75);\\n \\n template <>\\n const Point<2> RightHandSide<2>::center_point = Point<2>(-0.75, -0.75);\\n \\n template <>\\n const Point<3> RightHandSide<3>::center_point = Point<3>(-0.75, -0.75, -0.75);\\n \\n \\n \\n template <int dim>\\n double RightHandSide<dim>::value(const Point<dim>  &p,\\n const unsigned int component) const\\n {\\n    (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n const double diameter = 0.1;\\n return ((p - center_point).norm_square() < diameter * diameter ?\\n              0.1 / std::pow(diameter, dim) :\\n              0.0);\\n  }\\n \\n \\n \\n template <int dim>\\n class BoundaryValues : public Function<dim>\\n  {\\n public:\\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override;\\n  };\\n \\n \\n \\n template <int dim>\\n double BoundaryValues<dim>::value(const Point<dim>  &p,\\n const unsigned int component) const\\n {\\n    (void)component;\\n Assert(component == 0, ExcIndexRange(component, 0, 1));\\n \\n const double sine_term = std::sin(16. * numbers::PI * p.norm_square());\\n const double weight    = std::exp(5. * (1. - p.norm_square()));\\n return weight * sine_term;\\n  }\\n \\n \\n template <int dim>\\n class AdvectionProblem\\n  {\\n public:\\n    AdvectionProblem();\\n void run();\\n \\n private:\\n void setup_system();\\n \\n struct AssemblyScratchData\\n    {\\n      AssemblyScratchData(const FiniteElement<dim> &fe);\\n      AssemblyScratchData(const AssemblyScratchData &scratch_data);\\n \\n FEValues<dim>     fe_values;\\n FEFaceValues<dim> fe_face_values;\\n \\n      std::vector<double>         rhs_values;\\n      std::vector<Tensor<1, dim>> advection_directions;\\n      std::vector<double>         face_boundary_values;\\n      std::vector<Tensor<1, dim>> face_advection_directions;\\n \\n      AdvectionField<dim> advection_field;\\n      RightHandSide<dim>  right_hand_side;\\n      BoundaryValues<dim> boundary_values;\\n    };\\n \\n struct AssemblyCopyData\\n    {\\n FullMatrix<double> cell_matrix;\\n Vector<double>                       cell_rhs;\\n      std::vector<types::global_dof_index> local_dof_indices;\\n    };\\n \\n void assemble_system();\\n void local_assemble_system(\\n const typename DoFHandler<dim>::active_cell_iterator &cell,\\n      AssemblyScratchData                                  &scratch,\\n      AssemblyCopyData                                     &copy_data);\\n void copy_local_to_global(const AssemblyCopyData &copy_data);\\n \\n \\n void solve();\\n void refine_grid();\\n void output_results(const unsigned int cycle) const;\\n \\n Triangulation<dim> triangulation;\\n DoFHandler<dim>    dof_handler;\\n \\n const FE_Q<dim> fe;\\n \\n AffineConstraints<double> hanging_node_constraints;\\n \\n SparsityPattern      sparsity_pattern;\\n SparseMatrix<double> system_matrix;\\n \\n Vector<double> solution;\\n Vector<double> system_rhs;\\n  };\\n \\n \\n \\n \\n \\n class GradientEstimation\\n  {\\n public:\\n template <int dim>\\n static void estimate(const DoFHandler<dim> &dof,\\n const Vector<double>  &solution,\\n Vector<float>         &error_per_cell);\\n \\n DeclException2(ExcInvalidVectorLength,\\n int,\\n int,\\n                   << \\\"Vector has length \\\" << arg1 << \\\", but should have \\\"\\n                   << arg2);\\n DeclException0(ExcInsufficientDirections);\\n \\n private:\\n template <int dim>\\n struct EstimateScratchData\\n    {\\n      EstimateScratchData(const FiniteElement<dim> &fe,\\n const Vector<double>     &solution,\\n Vector<float>            &error_per_cell);\\n      EstimateScratchData(const EstimateScratchData &data);\\n \\n FEValues<dim> fe_midpoint_value;\\n      std::vector<typename DoFHandler<dim>::active_cell_iterator>\\n        active_neighbors;\\n \\n const Vector<double> &solution;\\n Vector<float>        &error_per_cell;\\n \\n      std::vector<double> cell_midpoint_value;\\n      std::vector<double> neighbor_midpoint_value;\\n    };\\n \\n struct EstimateCopyData\\n    {};\\n \\n template <int dim>\\n static void\\n    estimate_cell(const typename DoFHandler<dim>::active_cell_iterator &cell,\\n                  EstimateScratchData<dim> &scratch_data,\\n const EstimateCopyData   &copy_data);\\n  };\\n \\n \\n \\n \\n \\n template <int dim>\\n  AdvectionProblem<dim>::AdvectionProblem()\\n    : dof_handler(triangulation)\\n    , fe(5)\\n  {}\\n \\n \\n \\n template <int dim>\\n void AdvectionProblem<dim>::setup_system()\\n  {\\n    dof_handler.distribute_dofs(fe);\\n    hanging_node_constraints.clear();\\n DoFTools::make_hanging_node_constraints(dof_handler,\\n                                            hanging_node_constraints);\\n    hanging_node_constraints.close();\\n \\n DynamicSparsityPattern dsp(dof_handler.n_dofs(), dof_handler.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler,\\n                                    dsp,\\n                                    hanging_node_constraints,\\n /*keep_constrained_dofs =*/false);\\n    sparsity_pattern.copy_from(dsp);\\n \\n    system_matrix.reinit(sparsity_pattern);\\n \\n    solution.reinit(dof_handler.n_dofs());\\n    system_rhs.reinit(dof_handler.n_dofs());\\n  }\\n \\n \\n \\n template <int dim>\\n void AdvectionProblem<dim>::assemble_system()\\n  {\\n WorkStream::run(dof_handler.begin_active(),\\n                    dof_handler.end(),\\n                    *this,\\n                    &AdvectionProblem::local_assemble_system,\\n                    &AdvectionProblem::copy_local_to_global,\\n                    AssemblyScratchData(fe),\\n                    AssemblyCopyData());\\n  }\\n \\n \\n \\n template <int dim>\\n  AdvectionProblem<dim>::AssemblyScratchData::AssemblyScratchData(\\n const FiniteElement<dim> &fe)\\n    : fe_values(fe,\\n QGauss<dim>(fe.degree + 1),\\n update_values | update_gradients | update_quadrature_points |\\n update_JxW_values)\\n    , fe_face_values(fe,\\n QGauss<dim - 1>(fe.degree + 1),\\n update_values | update_quadrature_points |\\n update_JxW_values | update_normal_vectors)\\n    , rhs_values(fe_values.get_quadrature().size())\\n    , advection_directions(fe_values.get_quadrature().size())\\n    , face_boundary_values(fe_face_values.get_quadrature().size())\\n    , face_advection_directions(fe_face_values.get_quadrature().size())\\n  {}\\n \\n \\n \\n template <int dim>\\n  AdvectionProblem<dim>::AssemblyScratchData::AssemblyScratchData(\\n const AssemblyScratchData &scratch_data)\\n    : fe_values(scratch_data.fe_values.get_fe(),\\n                scratch_data.fe_values.get_quadrature(),\\n update_values | update_gradients | update_quadrature_points |\\n update_JxW_values)\\n    , fe_face_values(scratch_data.fe_face_values.get_fe(),\\n                     scratch_data.fe_face_values.get_quadrature(),\\n update_values | update_quadrature_points |\\n update_JxW_values | update_normal_vectors)\\n    , rhs_values(scratch_data.rhs_values.size())\\n    , advection_directions(scratch_data.advection_directions.size())\\n    , face_boundary_values(scratch_data.face_boundary_values.size())\\n    , face_advection_directions(scratch_data.face_advection_directions.size())\\n  {}\\n \\n \\n \\n template <int dim>\\n void AdvectionProblem<dim>::local_assemble_system(\\n const typename DoFHandler<dim>::active_cell_iterator &cell,\\n    AssemblyScratchData                                  &scratch_data,\\n    AssemblyCopyData                                     &copy_data)\\n  {\\n const unsigned int dofs_per_cell = fe.n_dofs_per_cell();\\n const unsigned int n_q_points =\\n      scratch_data.fe_values.get_quadrature().size();\\n const unsigned int n_face_q_points =\\n      scratch_data.fe_face_values.get_quadrature().size();\\n \\n    copy_data.cell_matrix.reinit(dofs_per_cell, dofs_per_cell);\\n    copy_data.cell_rhs.reinit(dofs_per_cell);\\n \\n    copy_data.local_dof_indices.resize(dofs_per_cell);\\n \\n    scratch_data.fe_values.reinit(cell);\\n \\n    scratch_data.advection_field.value_list(\\n      scratch_data.fe_values.get_quadrature_points(),\\n      scratch_data.advection_directions);\\n    scratch_data.right_hand_side.value_list(\\n      scratch_data.fe_values.get_quadrature_points(), scratch_data.rhs_values);\\n \\n const double delta = 0.1 * cell->diameter();\\n \\n for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n        {\\n const auto &sd = scratch_data;\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n            copy_data.cell_matrix(i, j) +=\\n              ((sd.fe_values.shape_value(i, q_point) +           // (phi_i +\\n                delta * (sd.advection_directions[q_point] *      // delta beta\\n                         sd.fe_values.shape_grad(i, q_point))) * // grad phi_i)\\n               sd.advection_directions[q_point] *                // beta\\n               sd.fe_values.shape_grad(j, q_point)) *            // grad phi_j\\n              sd.fe_values.JxW(q_point);                         // dx\\n \\n          copy_data.cell_rhs(i) +=\\n            (sd.fe_values.shape_value(i, q_point) +           // (phi_i +\\n             delta * (sd.advection_directions[q_point] *      // delta beta\\n                      sd.fe_values.shape_grad(i, q_point))) * // grad phi_i)\\n            sd.rhs_values[q_point] *                          // f\\n            sd.fe_values.JxW(q_point);                        // dx\\n        }\\n \\n for (const auto &face : cell->face_iterators())\\n      if (face->at_boundary())\\n        {\\n          scratch_data.fe_face_values.reinit(cell, face);\\n \\n          scratch_data.boundary_values.value_list(\\n            scratch_data.fe_face_values.get_quadrature_points(),\\n            scratch_data.face_boundary_values);\\n          scratch_data.advection_field.value_list(\\n            scratch_data.fe_face_values.get_quadrature_points(),\\n            scratch_data.face_advection_directions);\\n \\n for (unsigned int q_point = 0; q_point < n_face_q_points; ++q_point)\\n if (scratch_data.fe_face_values.normal_vector(q_point) *\\n                  scratch_data.face_advection_directions[q_point] <\\n                0.)\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n                {\\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                    copy_data.cell_matrix(i, j) -=\\n                      (scratch_data.face_advection_directions[q_point] *\\n                       scratch_data.fe_face_values.normal_vector(q_point) *\\n                       scratch_data.fe_face_values.shape_value(i, q_point) *\\n                       scratch_data.fe_face_values.shape_value(j, q_point) *\\n                       scratch_data.fe_face_values.JxW(q_point));\\n \\n                  copy_data.cell_rhs(i) -=\\n                    (scratch_data.face_advection_directions[q_point] *\\n                     scratch_data.fe_face_values.normal_vector(q_point) *\\n                     scratch_data.face_boundary_values[q_point] *\\n                     scratch_data.fe_face_values.shape_value(i, q_point) *\\n                     scratch_data.fe_face_values.JxW(q_point));\\n                }\\n        }\\n \\n    cell->get_dof_indices(copy_data.local_dof_indices);\\n  }\\n \\n \\n \\n template <int dim>\\n void\\n  AdvectionProblem<dim>::copy_local_to_global(const AssemblyCopyData &copy_data)\\n  {\\n    hanging_node_constraints.distribute_local_to_global(\\n      copy_data.cell_matrix,\\n      copy_data.cell_rhs,\\n      copy_data.local_dof_indices,\\n      system_matrix,\\n      system_rhs);\\n  }\\n \\n template <int dim>\\n void AdvectionProblem<dim>::solve()\\n  {\\n SolverControl               solver_control(std::max<std::size_t>(1000,\\n                                                       system_rhs.size() / 10),\\n                                 1e-10 * system_rhs.l2_norm());\\n SolverGMRES<Vector<double>> solver(solver_control);\\n PreconditionJacobi<SparseMatrix<double>> preconditioner;\\n    preconditioner.initialize(system_matrix, 1.0);\\n    solver.solve(system_matrix, solution, system_rhs, preconditioner);\\n \\n    hanging_node_constraints.distribute(solution);\\n \\n    std::cout << \\\"   Iterations required for convergence: \\\"\\n              << solver_control.last_step() << '\\\\n'\\n              << \\\"   Norm of residual at convergence:     \\\"\\n              << solver_control.last_value() << '\\\\n';\\n  }\\n \\n template <int dim>\\n void AdvectionProblem<dim>::refine_grid()\\n  {\\n Vector<float> estimated_error_per_cell(triangulation.n_active_cells());\\n \\n    GradientEstimation::estimate(dof_handler,\\n                                 solution,\\n                                 estimated_error_per_cell);\\n \\n GridRefinement::refine_and_coarsen_fixed_number(triangulation,\\n                                                    estimated_error_per_cell,\\n                                                    0.3,\\n                                                    0.03);\\n \\n triangulation.execute_coarsening_and_refinement();\\n  }\\n \\n template <int dim>\\n void AdvectionProblem<dim>::output_results(const unsigned int cycle) const\\n {\\n    {\\n GridOut           grid_out;\\n const std::string filename = \\\"grid-\\\" + std::to_string(cycle) + \\\".vtu\\\";\\n      std::ofstream     output(filename);\\n      grid_out.write_vtu(triangulation, output);\\n      std::cout << \\\"   Grid written to \\\" << filename << std::endl;\\n    }\\n \\n    {\\n DataOut<dim> data_out;\\n      data_out.attach_dof_handler(dof_handler);\\n      data_out.add_data_vector(solution, \\\"solution\\\");\\n      data_out.build_patches(8);\\n \\n DataOutBase::VtkFlags vtk_flags;\\n      vtk_flags.compression_level = DataOutBase::CompressionLevel::best_speed;\\n      data_out.set_flags(vtk_flags);\\n \\n const std::string filename = \\\"solution-\\\" + std::to_string(cycle) + \\\".vtu\\\";\\n      std::ofstream     output(filename);\\n      data_out.write_vtu(output);\\n      std::cout << \\\"   Solution written to \\\" << filename << std::endl;\\n    }\\n  }\\n \\n \\n template <int dim>\\n void AdvectionProblem<dim>::run()\\n  {\\n for (unsigned int cycle = 0; cycle < 10; ++cycle)\\n      {\\n        std::cout << \\\"Cycle \\\" << cycle << ':' << std::endl;\\n \\n if (cycle == 0)\\n          {\\n GridGenerator::hyper_cube(triangulation, -1, 1);\\n triangulation.refine_global(3);\\n          }\\n else\\n          {\\n            refine_grid();\\n          }\\n \\n \\n        std::cout << \\\"   Number of active cells:              \\\"\\n                  << triangulation.n_active_cells() << std::endl;\\n \\n        setup_system();\\n \\n        std::cout << \\\"   Number of degrees of freedom:        \\\"\\n                  << dof_handler.n_dofs() << std::endl;\\n \\n        assemble_system();\\n        solve();\\n        output_results(cycle);\\n      }\\n  }\\n \\n \\n \\n \\n template <int dim>\\n  GradientEstimation::EstimateScratchData<dim>::EstimateScratchData(\\n const FiniteElement<dim> &fe,\\n const Vector<double>     &solution,\\n Vector<float>            &error_per_cell)\\n    : fe_midpoint_value(fe,\\n QMidpoint<dim>(),\\n update_values | update_quadrature_points)\\n    , solution(solution)\\n    , error_per_cell(error_per_cell)\\n    , cell_midpoint_value(1)\\n    , neighbor_midpoint_value(1)\\n  {\\n    active_neighbors.reserve(GeometryInfo<dim>::faces_per_cell *\\n GeometryInfo<dim>::max_children_per_face);\\n  }\\n \\n \\n template <int dim>\\n  GradientEstimation::EstimateScratchData<dim>::EstimateScratchData(\\n const EstimateScratchData &scratch_data)\\n    : fe_midpoint_value(scratch_data.fe_midpoint_value.get_fe(),\\n                        scratch_data.fe_midpoint_value.get_quadrature(),\\n update_values | update_quadrature_points)\\n    , solution(scratch_data.solution)\\n    , error_per_cell(scratch_data.error_per_cell)\\n    , cell_midpoint_value(1)\\n    , neighbor_midpoint_value(1)\\n  {}\\n \\n \\n template <int dim>\\n void GradientEstimation::estimate(const DoFHandler<dim> &dof_handler,\\n const Vector<double>  &solution,\\n Vector<float>         &error_per_cell)\\n  {\\n Assert(\\n      error_per_cell.size() == dof_handler.get_triangulation().n_active_cells(),\\n      ExcInvalidVectorLength(error_per_cell.size(),\\n                             dof_handler.get_triangulation().n_active_cells()));\\n \\n WorkStream::run(dof_handler.begin_active(),\\n                    dof_handler.end(),\\n                    &GradientEstimation::template estimate_cell<dim>,\\n                    std::function<void(const EstimateCopyData &)>(),\\n                    EstimateScratchData<dim>(dof_handler.get_fe(),\\n                                             solution,\\n                                             error_per_cell),\\n                    EstimateCopyData());\\n  }\\n \\n \\n template <int dim>\\n void GradientEstimation::estimate_cell(\\n const typename DoFHandler<dim>::active_cell_iterator &cell,\\n    EstimateScratchData<dim>                             &scratch_data,\\n const EstimateCopyData &)\\n  {\\n Tensor<2, dim> Y;\\n \\n    scratch_data.fe_midpoint_value.reinit(cell);\\n \\n    scratch_data.active_neighbors.clear();\\n for (const auto face_n : cell->face_indices())\\n      if (!cell->at_boundary(face_n))\\n        {\\n const auto face     = cell->face(face_n);\\n const auto neighbor = cell->neighbor(face_n);\\n \\n if (neighbor->is_active())\\n            scratch_data.active_neighbors.push_back(neighbor);\\n else\\n            {\\n if (dim == 1)\\n                {\\n auto neighbor_child = neighbor;\\n while (neighbor_child->has_children())\\n                    neighbor_child = neighbor_child->child(face_n == 0 ? 1 : 0);\\n \\n Assert(neighbor_child->neighbor(face_n == 0 ? 1 : 0) == cell,\\n                         ExcInternalError());\\n \\n                  scratch_data.active_neighbors.push_back(neighbor_child);\\n                }\\n else\\n for (unsigned int subface_n = 0; subface_n < face->n_children();\\n                     ++subface_n)\\n                  scratch_data.active_neighbors.push_back(\\n                    cell->neighbor_child_on_subface(face_n, subface_n));\\n            }\\n        }\\n \\n const Point<dim> this_center =\\n      scratch_data.fe_midpoint_value.quadrature_point(0);\\n \\n    scratch_data.fe_midpoint_value.get_function_values(\\n      scratch_data.solution, scratch_data.cell_midpoint_value);\\n \\n Tensor<1, dim> projected_gradient;\\n for (const auto &neighbor : scratch_data.active_neighbors)\\n      {\\n        scratch_data.fe_midpoint_value.reinit(neighbor);\\n const Point<dim> neighbor_center =\\n          scratch_data.fe_midpoint_value.quadrature_point(0);\\n \\n        scratch_data.fe_midpoint_value.get_function_values(\\n          scratch_data.solution, scratch_data.neighbor_midpoint_value);\\n \\n Tensor<1, dim> y        = neighbor_center - this_center;\\n const double   distance = y.norm();\\n        y /= distance;\\n \\n for (unsigned int i = 0; i < dim; ++i)\\n for (unsigned int j = 0; j < dim; ++j)\\n            Y[i][j] += y[i] * y[j];\\n \\n        projected_gradient += (scratch_data.neighbor_midpoint_value[0] -\\n                               scratch_data.cell_midpoint_value[0]) /\\n                              distance * y;\\n      }\\n \\n AssertThrow(determinant(Y) != 0, ExcInsufficientDirections());\\n \\n const Tensor<2, dim> Y_inverse = invert(Y);\\n \\n const Tensor<1, dim> gradient = Y_inverse * projected_gradient;\\n \\n    scratch_data.error_per_cell(cell->active_cell_index()) =\\n      (std::pow(cell->diameter(), 1 + 1.0 * dim / 2) * gradient.norm());\\n  }\\n} // namespace Step9\\n \\n \\n \\nint main()\\n{\\n using namespace dealii;\\n try\\n    {\\n MultithreadInfo::set_thread_limit();\\n \\n      Step9::AdvectionProblem<2> advection_problem_2d;\\n      advection_problem_2d.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\naffine_constraints.h\\nDataOutInterface::write_vtuvoid write_vtu(std::ostream &out) constDefinition data_out_base.cc:7692\\nDataOutInterface::set_flagsvoid set_flags(const FlagType &flags)Definition data_out_base.cc:8863\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nGridOut::write_vtuvoid write_vtu(const Triangulation< dim, spacedim > &tria, std::ostream &out) constDefinition grid_out.cc:3544\\nTensor::norm_squareconstexpr numbers::NumberTraits< Number >::real_type norm_square() const\\nVector::sizevirtual size_type size() const override\\ndof_handler.h\\ndof_tools.h\\ndynamic_sparsity_pattern.h\\nerror_estimator.h\\nfe_values.h\\nfe_q.h\\nfull_matrix.h\\nfunction.h\\ngrid_refinement.h\\ntria.h\\ngrid_generator.h\\ngrid_out.h\\nmultithread_info.h\\nGridTools::diameterdouble diameter(const Triangulation< dim, spacedim > &tria)Definition grid_tools_geometry.cc:43\\nLocalIntegrators::Advection::cell_matrixvoid cell_matrix(FullMatrix< double > &M, const FEValuesBase< dim > &fe, const FEValuesBase< dim > &fetest, const ArrayView< const std::vector< double > > &velocity, const double factor=1.)Definition advection.h:74\\nWorkStream::internal::tbb_no_coloring::runvoid run(const Iterator &begin, const std_cxx20::type_identity_t< Iterator > &end, Worker worker, Copier copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const unsigned int queue_length, const unsigned int chunk_size)Definition work_stream.h:471\\ninternal::EvaluatorQuantity::value@ value\\ninternal::EvaluatorQuantity::gradient@ gradient\\ndata_out.h\\nprecondition.h\\nquadrature_lib.h\\nsolver_gmres.h\\nsparse_matrix.h\\ntensor_function.h\\nvector.h\\nwork_stream.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"