"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_47.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-47 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-47 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-47 tutorial program\\n\\n\\nThis tutorial depends on step-12.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\n What's the issue? \\n What to do instead? \\n Derivation of the C0IP method \\n\\nConvergence Rates \\n\\nOther Boundary Conditions\\nThe testcase\\n\\n The commented program\\n\\nInclude files\\nThe main class\\n\\nAssembling the linear system\\nSolving the linear system and postprocessing\\n\\nThe main() function\\n\\n\\n Results\\n\\nTest results on Q2 with \\u03b3 = p(p+1) \\nTest results on Q3 with \\u03b3 = p(p+1) \\nTest results on Q4 with \\u03b3 = p(p+1) \\nTest results on Q2 with \\u03b3 = 1 \\nTest results on Q2 with \\u03b3 = 2 \\n Conclusions for the choice of the penalty parameter \\n Possibilities for extensions \\n\\n Derivation for the simply supported plates \\n\\n\\n The plain program\\n   \\n\\n\\n This program was contributed by Natasha Sharma, Guido Kanschat, Timo Heister, Wolfgang Bangerth, and Zhuoran Wang.\\nThe first author would like to acknowledge the support of NSF Grant No. DMS-1520862. Timo Heister and Wolfgang Bangerth acknowledge support through NSF awards DMS-1821210, EAR-1550901, and OAC-1835673. \\n Introduction\\nThis program deals with the biharmonic equation,    \\n\\\\begin{align*}\\n  \\\\Delta^2 u(\\\\mathbf x) &= f(\\\\mathbf x)\\n  \\\\qquad \\\\qquad &&\\\\forall \\\\mathbf x \\\\in \\\\Omega.\\n\\\\end{align*}\\n\\n This equation appears in the modeling of thin structures such as roofs of stadiums. These objects are of course in reality three-dimensional with a large aspect ratio of lateral extent to perpendicular thickness, but one can often very accurately model these structures as two dimensional by making assumptions about how internal forces vary in the perpendicular direction. These assumptions lead to the equation above.\\nThe model typically comes in two different kinds, depending on what kinds of boundary conditions are imposed. The first case,      \\n\\\\begin{align*}\\n  u(\\\\mathbf x) &= g(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega, \\\\\\\\\\n  \\\\Delta u(\\\\mathbf x) &= h(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega,\\n\\\\end{align*}\\n\\n corresponds to the edges of the thin structure attached to the top of a wall of height \\\\(g(\\\\mathbf x)\\\\) in such a way that the bending forces that act on the structure are \\\\(h(\\\\mathbf x)\\\\); in most physical situations, one will have \\\\(h=0\\\\), corresponding to the structure simply sitting atop the wall.\\nIn the second possible case of boundary values, one would have      \\n\\\\begin{align*}\\n  u(\\\\mathbf x) &= g(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega, \\\\\\\\\\n  \\\\frac{\\\\partial u(\\\\mathbf x)}{\\\\partial \\\\mathbf n} &= j(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega.\\n\\\\end{align*}\\n\\n This corresponds to a \\\"clamped\\\" structure for which a nonzero \\\\(j(\\\\mathbf x)\\\\) implies a certain angle against the horizontal.\\nAs with Dirichlet and Neumann boundary conditions for the Laplace equation, it is of course possible to have one kind of boundary conditions on one part of the boundary, and the other on the remainder.\\nWhat's the issue? \\nThe fundamental issue with the equation is that it takes four derivatives of the solution. In the case of the Laplace equation we treated in step-3, step-4, and several other tutorial programs, one multiplies by a test function, integrates, integrates by parts, and ends up with only one derivative on both the test function and trial function \\u2013 something one can do with functions that are continuous globally, but may have kinks at the interfaces between cells: The derivative may not be defined at the interfaces, but that is on a lower-dimensional manifold (and so doesn't show up in the integrated value).\\nBut for the biharmonic equation, if one followed the same procedure using integrals over the entire domain (i.e., the union of all cells), one would end up with two derivatives on the test functions and trial functions each. If one were to use the usual piecewise polynomial functions with their kinks on cell interfaces, the first derivative would yield a discontinuous gradient, and the second derivative with delta functions on the interfaces \\u2013 but because both the second derivatives of the test functions and of the trial functions yield a delta function, we would try to integrate the product of two delta functions. For example, in 1d, where \\\\(\\\\varphi_i\\\\) are the usual piecewise linear \\\"hat functions\\\", we would get integrals of the sort       \\n\\\\begin{align*}\\n  \\\\int_0^L (\\\\Delta \\\\varphi_i) (\\\\Delta \\\\varphi_j)\\n  =\\n  \\\\int_0^L\\n  \\\\frac 1h \\\\left[\\\\delta(x-x_{i-1}) - 2\\\\delta(x-x_i) + \\\\delta(x-x_{i+1})\\\\right]\\n  \\\\frac 1h \\\\left[\\\\delta(x-x_{j-1}) - 2\\\\delta(x-x_j) + \\\\delta(x-x_{j+1})\\\\right]\\n\\\\end{align*}\\n\\n where \\\\(x_i\\\\) is the node location at which the shape function \\\\(\\\\varphi_i\\\\) is defined, and \\\\(h\\\\) is the mesh size (assumed uniform). The problem is that delta functions in integrals are defined using the relationship     \\n\\\\begin{align*}\\n  \\\\int_0^L \\\\delta(x-\\\\hat x) f(x) \\\\; dx\\n  =\\n  f(\\\\hat x).\\n\\\\end{align*}\\n\\n But that only works if (i) \\\\(f(\\\\cdot)\\\\) is actually well defined at \\\\(\\\\hat x\\\\), and (ii) if it is finite. On the other hand, an integral of the form   \\n\\\\begin{align*}\\n\\\\int_0^L \\\\delta(x-x_i) \\\\delta (x-x_i)\\n\\\\end{align*}\\n\\n does not make sense. Similar reasoning can be applied for 2d and 3d situations.\\nIn other words: This approach of trying to integrate over the entire domain and then integrating by parts can't work.\\nHistorically, numerical analysts have tried to address this by inventing finite elements that are \\\"C<sup>1</sup> continuous\\\", i.e., that use shape functions that are not just continuous but also have continuous first derivatives. This is the realm of elements such as the Argyris element, the Clough-Tocher element and others, all developed in the late 1960s. From a twenty-first century perspective, they can only be described as bizarre in their construction. They are also exceedingly cumbersome to implement if one wants to use general meshes. As a consequence, they have largely fallen out of favor and deal.II currently does not contain implementations of these shape functions.\\nWhat to do instead? \\nSo how does one approach solving such problems then? That depends a bit on the boundary conditions. If one has the first set of boundary conditions, i.e., if the equation is        \\n\\\\begin{align*}\\n  \\\\Delta^2 u(\\\\mathbf x) &= f(\\\\mathbf x)\\n  \\\\qquad \\\\qquad &&\\\\forall \\\\mathbf x \\\\in \\\\Omega, \\\\\\\\\\n  u(\\\\mathbf x) &= g(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega, \\\\\\\\\\n  \\\\Delta u(\\\\mathbf x) &= h(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega,\\n\\\\end{align*}\\n\\n then the following trick works (at least if the domain is convex, see below): In the same way as we obtained the mixed Laplace equation of step-20 from the regular Laplace equation by introducing a second variable, we can here introduce a variable \\\\(v=\\\\Delta u\\\\) and can then replace the equations above by the following, \\\"mixed\\\" system:          \\n\\\\begin{align*}\\n  -\\\\Delta u(\\\\mathbf x) +v(\\\\mathbf x) &= 0\\n  \\\\qquad \\\\qquad &&\\\\forall \\\\mathbf x \\\\in \\\\Omega, \\\\\\\\\\n  -\\\\Delta v(\\\\mathbf x) &= -f(\\\\mathbf x)\\n  \\\\qquad \\\\qquad &&\\\\forall \\\\mathbf x \\\\in \\\\Omega, \\\\\\\\\\n  u(\\\\mathbf x) &= g(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega, \\\\\\\\\\n  v(\\\\mathbf x) &= h(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega.\\n\\\\end{align*}\\n\\n In other words, we end up with what is in essence a system of two coupled Laplace equations for \\\\(u,v\\\\), each with Dirichlet-type boundary conditions. We know how to solve such problems, and it should not be very difficult to construct good solvers and preconditioners for this system either using the techniques of step-20 or step-22. So this case is pretty simple to deal with.\\nNoteIt is worth pointing out that this only works for domains whose boundary has corners if the domain is also convex \\u2013 in other words, if there are no re-entrant corners. This sounds like a rather random condition, but it makes sense in view of the following two facts: The solution of the original biharmonic equation must satisfy \\\\(u\\\\in H^2(\\\\Omega)\\\\). On the other hand, the mixed system reformulation above suggests that both \\\\(u\\\\) and \\\\(v\\\\) satisfy \\\\(u,v\\\\in H^1(\\\\Omega)\\\\) because both variables only solve a Poisson equation. In other words, if we want to ensure that the solution \\\\(u\\\\) of the mixed problem is also a solution of the original biharmonic equation, then we need to be able to somehow guarantee that the solution of \\\\(-\\\\Delta u=v\\\\) is in fact more smooth than just \\\\(H^1(\\\\Omega)\\\\). This can be argued as follows: For convex domains, \\\"elliptic\\n  regularity\\\" implies that if the right hand side \\\\(v\\\\in H^s\\\\), then \\\\(u\\\\in H^{s+2}\\\\) if the domain is convex and the boundary is smooth enough. (This could also be guaranteed if the domain boundary is sufficiently smooth \\u2013 but domains whose boundaries have no corners are not very practical in real life.) We know that \\\\(v\\\\in H^1\\\\) because it solves the equation \\\\(-\\\\Delta v=f\\\\), but we are still left with the condition on convexity of the boundary; one can show that polygonal, convex domains are good enough to guarantee that \\\\(u\\\\in H^2\\\\) in this case (smoothly bounded, convex domains would result in \\\\(u\\\\in H^3\\\\), but we don't need this much regularity). On the other hand, if the domain is not convex, we can not guarantee that the solution of the mixed system is in \\\\(H^2\\\\), and consequently may obtain a solution that can't be equal to the solution of the original biharmonic equation.\\nThe more complicated situation is if we have the \\\"clamped\\\" boundary conditions, i.e., if the equation looks like this:        \\n\\\\begin{align*}\\n  \\\\Delta^2 u(\\\\mathbf x) &= f(\\\\mathbf x)\\n  \\\\qquad \\\\qquad &&\\\\forall \\\\mathbf x \\\\in \\\\Omega, \\\\\\\\\\n  u(\\\\mathbf x) &= g(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega, \\\\\\\\\\n  \\\\frac{\\\\partial u(\\\\mathbf x)}{\\\\partial \\\\mathbf n} &= j(\\\\mathbf x) \\\\qquad \\\\qquad\\n  &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega.\\n\\\\end{align*}\\n\\n The same trick with the mixed system does not work here, because we would end up with both Dirichlet and Neumann boundary conditions for \\\\(u\\\\), but none for \\\\(v\\\\).\\nThe solution to this conundrum arrived with the Discontinuous Galerkin method wave in the 1990s and early 2000s: In much the same way as one can use discontinuous shape functions for the Laplace equation by penalizing the size of the discontinuity to obtain a scheme for an equation that has one derivative on each shape function, we can use a scheme that uses continuous (but not \\\\(C^1\\\\) continuous) shape functions and penalize the jump in the derivative to obtain a scheme for an equation that has two derivatives on each shape function. In analogy to the Interior Penalty (IP) method for the Laplace equation, this scheme for the biharmonic equation is typically called the \\\\(C^0\\\\) IP (or C0IP) method, since it uses \\\\(C^0\\\\) (continuous but not continuously differentiable) shape functions with an interior penalty formulation.\\nIt is worth noting that the C0IP method is not the only one that has been developed for the biharmonic equation. step-82 shows an alternative method.\\nDerivation of the C0IP method \\nWe base this program on the \\\\(C^0\\\\) IP method presented by Susanne Brenner and Li-Yeng Sung in the paper \\\"C \\\\_form#4441 Interior Penalty Method\\nfor Linear Fourth Order Boundary Value Problems on polygonal\\ndomains\\\" [42] where the method is derived for the biharmonic equation with \\\"clamped\\\" boundary conditions.\\nAs mentioned, this method relies on the use of \\\\(C^0\\\\) Lagrange finite elements where the \\\\(C^1\\\\) continuity requirement is relaxed and has been replaced with interior penalty techniques. To derive this method, we consider a \\\\(C^0\\\\) shape function \\\\(v_h\\\\) which vanishes on \\\\(\\\\partial\\\\Omega\\\\). We introduce notation \\\\( \\\\mathbb{F} \\\\) as the set of all faces of \\\\(\\\\mathbb{T}\\\\), \\\\( \\\\mathbb{F}^b \\\\) as the set of boundary faces, and \\\\( \\\\mathbb{F}^i \\\\) as the set of interior faces for use further down below. Since the higher order derivatives of \\\\(v_h\\\\) have two values on each interface \\\\(e\\\\in \\\\mathbb{F}\\\\) (shared by the two cells \\\\(K_{+},K_{-} \\\\in \\\\mathbb{T}\\\\)), we cope with this discontinuity by defining the following single-valued functions on \\\\(e\\\\):            \\n\\\\begin{align*}\\n  \\\\jump{\\\\frac{\\\\partial^k v_h}{\\\\partial \\\\mathbf n^k}}\\n  &=\\n  \\\\frac{\\\\partial^k v_h|_{K_+}}{\\\\partial \\\\mathbf n^k} \\\\bigg |_e\\n  - \\\\frac{\\\\partial^k v_h|_{K_-}}{\\\\partial \\\\mathbf n^k} \\\\bigg |_e,\\n  \\\\\\\\\\n  \\\\average{\\\\frac{\\\\partial^k v_h}{\\\\partial \\\\mathbf n^k}}\\n  &=\\n  \\\\frac{1}{2}\\n  \\\\bigg( \\\\frac{\\\\partial^k v_h|_{K_+}}{\\\\partial \\\\mathbf n^k} \\\\bigg |_e\\n  + \\\\frac{\\\\partial^k v_h|_{K_-}}{\\\\partial \\\\mathbf n^k} \\\\bigg |_e \\\\bigg )\\n\\\\end{align*}\\n\\n for \\\\(k =1,2\\\\) (i.e., for the gradient and the matrix of second derivatives), and where \\\\(\\\\mathbf n\\\\) denotes a unit vector normal to \\\\(e\\\\) pointing from \\\\(K_+\\\\) to \\\\(K_-\\\\). In the literature, these functions are referred to as the \\\"jump\\\" and \\\"average\\\" operations, respectively.\\nTo obtain the \\\\(C^0\\\\) IP approximation \\\\(u_h\\\\), we left multiply the biharmonic equation by \\\\(v_h\\\\), and then integrate over \\\\(\\\\Omega\\\\). As explained above, we can't do the integration by parts on all of \\\\(\\\\Omega\\\\) with these shape functions, but we can do it on each cell individually since the shape functions are just polynomials on each cell. Consequently, we start by using the following integration-by-parts formula on each mesh cell \\\\(K \\\\in {\\\\mathbb{T}}\\\\):       \\n\\\\begin{align*}\\n  \\\\int_K v_h (\\\\Delta^2 w_h)\\n  &= \\\\int_K v_h (\\\\nabla\\\\cdot\\\\nabla) (\\\\Delta w_h)\\n  \\\\\\\\\\n  &= -\\\\int_K \\\\nabla v_h \\\\cdot (\\\\nabla \\\\Delta w_h)\\n     +\\\\int_{\\\\partial K} v_h (\\\\nabla \\\\Delta w_h \\\\cdot \\\\mathbf n).\\n\\\\end{align*}\\n\\n At this point, we have two options: We can integrate the domain term's \\\\(\\\\nabla\\\\Delta w_h\\\\) one more time to obtain      \\n\\\\begin{align*}\\n  \\\\int_K v_h (\\\\Delta^2 w_h)\\n  &= \\\\int_K (\\\\Delta v_h) (\\\\Delta w_h)\\n     +\\\\int_{\\\\partial K} v_h (\\\\nabla \\\\Delta w_h \\\\cdot \\\\mathbf n)\\n     -\\\\int_{\\\\partial K} (\\\\nabla v_h \\\\cdot \\\\mathbf n) \\\\Delta w_h.\\n\\\\end{align*}\\n\\n For a variety of reasons, this turns out to be a variation that is not useful for our purposes.\\nInstead, what we do is recognize that \\\\(\\\\nabla\\\\Delta w_h = \\\\text{grad}\\\\,(\\\\text{div}\\\\,\\\\text{grad}\\\\, w_h)\\\\), and we can re-sort these operations as \\\\(\\\\nabla\\\\Delta w_h = \\\\text{div}\\\\,(\\\\text{grad}\\\\,\\\\text{grad}\\\\, w_h)\\\\) where we typically write \\\\(\\\\text{grad}\\\\,\\\\text{grad}\\\\, w_h = D^2 w_h\\\\) to indicate that this is the \\\"Hessian\\\" matrix of second derivatives. With this re-ordering, we can now integrate the divergence, rather than the gradient operator, and we get the following instead:          \\n\\\\begin{align*}\\n  \\\\int_K v_h (\\\\Delta^2 w_h)\\n  &= \\\\int_K (\\\\nabla \\\\nabla v_h) : (\\\\nabla \\\\nabla w_h)\\n     +\\\\int_{\\\\partial K} v_h (\\\\nabla \\\\Delta w_h \\\\cdot \\\\mathbf n)\\n     -\\\\int_{\\\\partial K} (\\\\nabla v_h \\\\otimes \\\\mathbf n) : (\\\\nabla\\\\nabla w_h)\\n  \\\\\\\\\\n  &= \\\\int_K (D^2 v_h) : (D^2 w_h)\\n     +\\\\int_{\\\\partial K} v_h (\\\\nabla \\\\Delta w_h \\\\cdot \\\\mathbf n)\\n     -\\\\int_{\\\\partial K} (\\\\nabla v_h) \\\\cdot (D^2 w_h \\\\mathbf n).\\n\\\\end{align*}\\n\\n Here, the colon indicates a double-contraction over the indices of the matrices to its left and right, i.e., the scalar product between two tensors. The outer product of two vectors \\\\(a \\\\otimes b\\\\) yields the matrix \\\\((a \\\\otimes b)_{ij} = a_i b_j\\\\).\\nThen, we sum over all cells \\\\(K \\\\in  \\\\mathbb{T}\\\\), and take into account that this means that every interior face appears twice in the sum. If we therefore split everything into a sum of integrals over cell interiors and a separate sum over cell interfaces, we can use the jump and average operators defined above. There are two steps left: First, because our shape functions are continuous, the gradients of the shape functions may be discontinuous, but the continuity guarantees that really only the normal component of the gradient is discontinuous across faces whereas the tangential component(s) are continuous. Second, the discrete formulation that results is not stable as the mesh size goes to zero, and to obtain a stable formulation that converges to the correct solution, we need to add the following terms:         \\n\\\\begin{align*}\\n-\\\\sum_{e \\\\in \\\\mathbb{F}} \\\\int_{e}\\n  \\\\average{\\\\frac{\\\\partial^2 v_h}{\\\\partial \\\\mathbf n^2}}\\n  \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}}\\n+ \\\\sum_{e \\\\in \\\\mathbb{F}}\\n  \\\\frac{\\\\gamma}{h_e}\\\\int_e\\n  \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n  \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}}.\\n\\\\end{align*}\\n\\n Then, after making cancellations that arise, we arrive at the following C0IP formulation of the biharmonic equation: find \\\\(u_h\\\\) such that  \\\\(u_h =\\ng\\\\) on \\\\(\\\\partial \\\\Omega\\\\) and   \\n\\\\begin{align*}\\n\\\\mathcal{A}(v_h,u_h)&=\\\\mathcal{F}(v_h) \\\\quad \\\\text{holds for all test functions } v_h,\\n\\\\end{align*}\\n\\n where                 \\n\\\\begin{align*}\\n\\\\mathcal{A}(v_h,u_h):=&\\\\sum_{K \\\\in \\\\mathbb{T}}\\\\int_K D^2v_h:D^2u_h \\\\ dx\\n\\\\\\\\\\n&\\n -\\\\sum_{e \\\\in \\\\mathbb{F}} \\\\int_{e}\\n  \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n  \\\\average{\\\\frac{\\\\partial^2 u_h}{\\\\partial \\\\mathbf n^2}} \\\\ ds\\n -\\\\sum_{e \\\\in \\\\mathbb{F}} \\\\int_{e}\\n \\\\average{\\\\frac{\\\\partial^2 v_h}{\\\\partial \\\\mathbf n^2}}\\n \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\ ds\\n\\\\\\\\\\n&+ \\\\sum_{e \\\\in \\\\mathbb{F}}\\n \\\\frac{\\\\gamma}{h_e}\\n \\\\int_e\\n \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\ ds,\\n\\\\end{align*}\\n\\n and          \\n\\\\begin{align*}\\n\\\\mathcal{F}(v_h)&:=\\\\sum_{K \\\\in \\\\mathbb{T}}\\\\int_{K} v_h f \\\\ dx\\n-\\n\\\\sum_{e \\\\in \\\\mathbb{F}, e\\\\subset\\\\partial\\\\Omega}\\n\\\\int_e \\\\average{\\\\frac{\\\\partial^2 v_h}{\\\\partial \\\\mathbf n^2}} j \\\\ ds\\n+\\n\\\\sum_{e \\\\in \\\\mathbb{F}, e\\\\subset\\\\partial\\\\Omega}\\n\\\\frac{\\\\gamma}{h_e}\\n\\\\int_e \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}} j \\\\ ds.\\n\\\\end{align*}\\n\\n Here, \\\\(\\\\gamma\\\\) is the penalty parameter which both weakly enforces the boundary condition   \\n\\\\begin{align*}\\n\\\\frac{\\\\partial u(\\\\mathbf x)}{\\\\partial \\\\mathbf n} = j(\\\\mathbf x)\\n\\\\end{align*}\\n\\n on the boundary interfaces \\\\(e \\\\in \\\\mathbb{F}^b\\\\), and also ensures that in the limit \\\\(h\\\\rightarrow 0\\\\), \\\\(u_h\\\\) converges to a \\\\(C^1\\\\) continuous function. \\\\(\\\\gamma\\\\) is chosen to be large enough to guarantee the stability of the method. We will discuss our choice in the program below.\\nConvergence Rates \\nOn polygonal domains, the weak solution \\\\(u\\\\) to the biharmonic equation lives in \\\\(H^{2 +\\\\alpha}(\\\\Omega)\\\\) where \\\\(\\\\alpha \\\\in(1/2, 2]\\\\) is determined by the interior angles at the corners of \\\\(\\\\Omega\\\\). For instance, whenever \\\\(\\\\Omega\\\\) is convex, \\\\(\\\\alpha=1\\\\); \\\\(\\\\alpha\\\\) may be less than one if the domain has re-entrant corners but \\\\(\\\\alpha\\\\) is close to \\\\(1\\\\) if one of all interior angles is close to \\\\(\\\\pi\\\\).\\nNow suppose that the \\\\(C^0\\\\) IP solution \\\\(u_h\\\\) is approximated by \\\\(C^0\\\\) shape functions with polynomial degree \\\\(p \\\\ge 2\\\\). Then the discretization outlined above yields the convergence rates as discussed below.\\nConvergence in the \\\\(C^0\\\\) IP-norm\\nIdeally, we would like to measure convergence in the \\\"energy norm\\\" \\\\(\\\\|D^2(u-u_h)\\\\|\\\\). However, this does not work because, again, the discrete solution \\\\(u_h\\\\) does not have two (weak) derivatives. Instead, one can define a discrete ( \\\\(C^0\\\\) IP) seminorm that is \\\"equivalent\\\" to the energy norm, as follows:        \\n\\\\begin{align*}\\n |u_h|_{h}^2 :=\\n \\\\sum\\\\limits_{K \\\\in \\\\mathbb{T}} \\\\big|u_h\\\\big|_{H^2(K)}^2\\n +\\n \\\\sum\\\\limits_{e \\\\in \\\\mathbb{F} }\\n \\\\frac{\\\\gamma }{h_e} \\\\left\\\\|\\n \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\right\\\\|_{L^2(e)}^2.\\n\\\\end{align*}\\n\\nIn this seminorm, the theory in the paper mentioned above yields that we can expect   \\n\\\\begin{align*}\\n |u-u_h|_{h}^2 = {\\\\cal O}(h^{p-1}),\\n\\\\end{align*}\\n\\n much as one would expect given the convergence rates we know are true for the usual discretizations of the Laplace equation.\\nOf course, this is true only if the exact solution is sufficiently smooth. Indeed, if \\\\(f \\\\in H^m(\\\\Omega)\\\\) with \\\\(m \\\\ge 0\\\\), \\\\(u \\\\in H^{2+\\\\alpha}(\\\\Omega)\\\\) where \\\\( 2 < 2+\\\\alpha  \\\\le m+4\\\\), then the convergence rate of the \\\\(C^0\\\\) IP method is \\\\(\\\\mathcal{O}(h^{\\\\min\\\\{p-1, \\\\alpha\\\\}})\\\\). In other words, the optimal convergence rate can only be expected if the solution is so smooth that \\\\(\\\\alpha\\\\ge p-1\\\\); this can only happen if (i) the domain is convex with a sufficiently smooth boundary, and (ii) \\\\(m\\\\ge p-3\\\\). In practice, of course, the solution is what it is (independent of the polynomial degree we choose), and the last condition can then equivalently be read as saying that there is definitely no point in choosing \\\\(p\\\\) large if \\\\(m\\\\) is not also large. In other words, the only reasonably choices for \\\\(p\\\\) are  \\\\(p\\\\le\\nm+3\\\\) because larger polynomial degrees do not result in higher convergence orders.\\nFor the purposes of this program, we're a bit too lazy to actually implement this equivalent seminorm \\u2013 though it's not very difficult and would make for a good exercise. Instead, we'll simply check in the program what the \\\"broken\\\" \\\\(H^2\\\\) seminorm       \\n\\\\begin{align*}\\n \\\\left(|u_h|^\\\\circ_{H^2}\\\\right)^2\\n :=\\n \\\\sum\\\\limits_{K \\\\in \\\\mathbb{T}} \\\\big|u_h\\\\big|_{H^2(K)}^2\\n =\\n \\\\sum\\\\limits_{K \\\\in \\\\mathbb{T}} \\\\big|D^2 u_h\\\\big|_{L_2}^2\\n\\\\end{align*}\\n\\n yields. The convergence rate in this norm can, from a theoretical perspective, of course not be worse than the one for \\\\(|\\\\cdot|_h\\\\) because it contains only a subset of the necessary terms, but it could at least conceivably be better. It could also be the case that we get the optimal convergence rate even though there is a bug in the program, and that that bug would only show up in sub-optimal rates for the additional terms present in \\\\(|\\\\cdot|_h\\\\). But, one might hope that if we get the optimal rate in the broken norm and the norms discussed below, then the program is indeed correct. The results section will demonstrate that we obtain optimal rates in all norms shown.\\nConvergence in the \\\\(L_2\\\\)-norm\\nThe optimal convergence rate in the \\\\(L_2\\\\)-norm is \\\\(\\\\mathcal{O}(h^{p+1})\\\\) provided \\\\(p \\\\ge 3\\\\). More details can be found in Theorem 4.6 of [80] .\\nThe default in the program below is to choose \\\\(p=2\\\\). In that case, the theorem does not apply, and indeed one only gets \\\\(\\\\mathcal{O}(h^2)\\\\) instead of \\\\(\\\\mathcal{O}(h^3)\\\\) as we will show in the results section.\\nConvergence in the \\\\(H^1\\\\)-seminorm\\nGiven that we expect \\\\(\\\\mathcal{O}(h^{p-1})\\\\) in the best of cases for a norm equivalent to the \\\\(H^2\\\\) seminorm, and \\\\(\\\\mathcal{O}(h^{p+1})\\\\) for the \\\\(L_2\\\\) norm, one may ask about what happens in the \\\\(H^1\\\\) seminorm that is intermediate to the two others. A reasonable guess is that one should expect \\\\(\\\\mathcal{O}(h^{p})\\\\). There is probably a paper somewhere that proves this, but we also verify that this conjecture is experimentally true below.\\nOther Boundary Conditions\\nWe remark that the derivation of the \\\\(C^0\\\\) IP method for the biharmonic equation with other boundary conditions \\u2013 for instance, for the first set of boundary conditions namely  \\\\(u(\\\\mathbf x) =\\ng(\\\\mathbf x)\\\\) and \\\\(\\\\Delta u(\\\\mathbf x)= h(\\\\mathbf x)\\\\) on \\\\(\\\\partial\\\\Omega\\\\) \\u2013 can be obtained with suitable modifications to \\\\(\\\\mathcal{A}(\\\\cdot,\\\\cdot)\\\\) and \\\\(\\\\mathcal{F}(\\\\cdot)\\\\) described in the book chapter [44] .\\nThe testcase\\nThe last step that remains to describe is what this program solves for. As always, a trigonometric function is both a good and a bad choice because it does not lie in any polynomial space in which we may seek the solution while at the same time being smoother than real solutions typically are (here, it is in \\\\(C^\\\\infty\\\\) while real solutions are typically only in \\\\(H^3\\\\) or so on convex polygonal domains, or somewhere between \\\\(H^2\\\\) and \\\\(H^3\\\\) if the domain is not convex). But, since we don't have the means to describe solutions of realistic problems in terms of relatively simple formulas, we just go with the following, on the unit square for the domain \\\\(\\\\Omega\\\\):   \\n\\\\begin{align*}\\n  u = \\\\sin(\\\\pi x) \\\\sin(\\\\pi y).\\n\\\\end{align*}\\n\\n As a consequence, we then need choose as boundary conditions the following:          \\n\\\\begin{align*}\\n  g &= u|_{\\\\partial\\\\Omega} = \\\\sin(\\\\pi x) \\\\sin(\\\\pi y)|_{\\\\partial\\\\Omega},\\n  \\\\\\\\\\n  j &= \\\\frac{\\\\partial u}{\\\\partial\\\\mathbf n}|_{\\\\partial\\\\Omega}\\n  \\\\\\\\\\n    &= \\\\left.\\\\begin{pmatrix}\\n                \\\\pi\\\\cos(\\\\pi x) \\\\sin(\\\\pi y) \\\\\\\\\\n                \\\\pi\\\\sin(\\\\pi x) \\\\cos(\\\\pi y)\\n             \\\\end{pmatrix}\\\\right|_{\\\\partial\\\\Omega} \\\\cdot \\\\mathbf n.\\n\\\\end{align*}\\n\\n The right hand side is easily computed as   \\n\\\\begin{align*}\\n  f = \\\\Delta^2 u = 4 \\\\pi^4 \\\\sin(\\\\pi x) \\\\sin(\\\\pi y).\\n\\\\end{align*}\\n\\n The program has classes ExactSolution::Solution and ExactSolution::RightHandSide that encode this information.\\n The commented program\\n Include files\\nThe first few include files have already been used in the previous example, so we will not explain their meaning here again. The principal structure of the program is very similar to that of, for example, step-4 and so we include many of the same header files.\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/full_matrix.h>\\n\\u00a0 #include <deal.II/lac/dynamic_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/sparse_direct.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 #include <deal.II/fe/mapping_q.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 \\nThe two most interesting header files will be these two:\\n\\u00a0 #include <deal.II/fe/fe_interface_values.h>\\n\\u00a0 #include <deal.II/meshworker/mesh_loop.h>\\nThe first of these is responsible for providing the class FEInterfaceValues that can be used to evaluate quantities such as the jump or average of shape functions (or their gradients) across interfaces between cells. This class will be quite useful in evaluating the penalty terms that appear in the C0IP formulation.\\n\\u00a0 #include <fstream>\\n\\u00a0 #include <iostream>\\n\\u00a0 #include <cmath>\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 namespace Step47\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\nIn the following namespace, let us define the exact solution against which we will compare the numerically computed one. It has the form \\\\(u(x,y) = \\\\sin(\\\\pi x) \\\\sin(\\\\pi y)\\\\) (only the 2d case is implemented), and the namespace also contains a class that corresponds to the right hand side that produces this solution.\\n\\u00a0   namespace ExactSolution\\n\\u00a0   {\\n\\u00a0     using numbers::PI;\\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     class Solution : public Function<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       static_assert(dim == 2, \\\"Only dim==2 is implemented.\\\");\\n\\u00a0 \\n\\u00a0       virtual double value(const Point<dim> &p,\\n\\u00a0                            const unsigned int /*component*/ = 0) const override\\n\\u00a0       {\\n\\u00a0         return std::sin(PI * p[0]) * std::sin(PI * p[1]);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0       virtual Tensor<1, dim>\\n\\u00a0       gradient(const Point<dim> &p,\\n\\u00a0                const unsigned int /*component*/ = 0) const override\\n\\u00a0       {\\n\\u00a0         Tensor<1, dim> r;\\n\\u00a0         r[0] = PI * std::cos(PI * p[0]) * std::sin(PI * p[1]);\\n\\u00a0         r[1] = PI * std::cos(PI * p[1]) * std::sin(PI * p[0]);\\n\\u00a0         return r;\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0       virtual void\\n\\u00a0       hessian_list(const std::vector<Point<dim>>        &points,\\n\\u00a0                    std::vector<SymmetricTensor<2, dim>> &hessians,\\n\\u00a0                    const unsigned int /*component*/ = 0) const override\\n\\u00a0       {\\n\\u00a0         for (unsigned i = 0; i < points.size(); ++i)\\n\\u00a0           {\\n\\u00a0             const double x = points[i][0];\\n\\u00a0             const double y = points[i][1];\\n\\u00a0 \\n\\u00a0             hessians[i][0][0] = -PI * PI * std::sin(PI * x) * std::sin(PI * y);\\n\\u00a0             hessians[i][0][1] = PI * PI * std::cos(PI * x) * std::cos(PI * y);\\n\\u00a0             hessians[i][1][1] = -PI * PI * std::sin(PI * x) * std::sin(PI * y);\\n\\u00a0           }\\n\\u00a0       }\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     class RightHandSide : public Function<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       static_assert(dim == 2, \\\"Only dim==2 is implemented\\\");\\n\\u00a0 \\n\\u00a0       virtual double value(const Point<dim> &p,\\n\\u00a0                            const unsigned int /*component*/ = 0) const override\\n\\u00a0 \\n\\u00a0       {\\n\\u00a0         return 4 * Utilities::fixed_power<4>(PI) * std::sin(PI * p[0]) *\\n\\u00a0                std::sin(PI * p[1]);\\n\\u00a0       }\\n\\u00a0     };\\n\\u00a0   } // namespace ExactSolution\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunctionDefinition function.h:152\\nPointDefinition point.h:111\\nSymmetricTensorDefinition symmetric_tensor.h:719\\nTensorDefinition tensor.h:471\\nEvaluationFlags::hessians@ hessiansDefinition evaluation_flags.h:58\\nUtilities::fixed_powerconstexpr T fixed_power(const T t)Definition utilities.h:942\\ninternal::EvaluatorQuantity::value@ value\\nnumbers::PIstatic constexpr double PIDefinition numbers.h:259\\nstd::cos::VectorizedArray< Number, width > cos(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6609\\nstd::sin::VectorizedArray< Number, width > sin(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6589\\n The main class\\nThe following is the principal class of this tutorial program. It has the structure of many of the other tutorial programs and there should really be nothing particularly surprising about its contents or the constructor that follows it.\\n\\u00a0   template <int dim>\\n\\u00a0   class BiharmonicProblem\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     BiharmonicProblem(const unsigned int fe_degree);\\n\\u00a0 \\n\\u00a0     void run();\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     void make_grid();\\n\\u00a0     void setup_system();\\n\\u00a0     void assemble_system();\\n\\u00a0     void solve();\\n\\u00a0     void compute_errors();\\n\\u00a0     void output_results(const unsigned int iteration) const;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0 \\n\\u00a0     MappingQ<dim> mapping;\\n\\u00a0 \\n\\u00a0     const FE_Q<dim>           fe;\\n\\u00a0     DoFHandler<dim>           dof_handler;\\n\\u00a0     AffineConstraints<double> constraints;\\n\\u00a0 \\n\\u00a0     SparsityPattern      sparsity_pattern;\\n\\u00a0     SparseMatrix<double> system_matrix;\\n\\u00a0 \\n\\u00a0     Vector<double> solution;\\n\\u00a0     Vector<double> system_rhs;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   BiharmonicProblem<dim>::BiharmonicProblem(const unsigned int fe_degree)\\n\\u00a0     : mapping(1)\\n\\u00a0     , fe(fe_degree)\\n\\u00a0     , dof_handler(triangulation)\\n\\u00a0   {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nAffineConstraintsDefinition affine_constraints.h:507\\nDoFHandlerDefinition dof_handler.h:317\\nFE_QDefinition fe_q.h:554\\nMappingQDefinition mapping_q.h:110\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nTriangulationDefinition tria.h:1323\\nVectorDefinition vector.h:120\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\nNext up are the functions that create the initial mesh (a once refined unit square) and set up the constraints, vectors, and matrices on each mesh. Again, both of these are essentially unchanged from many previous tutorial programs.\\n\\u00a0   template <int dim>\\n\\u00a0   void BiharmonicProblem<dim>::make_grid()\\n\\u00a0   {\\n\\u00a0     GridGenerator::hyper_cube(triangulation, 0., 1.);\\n\\u00a0     triangulation.refine_global(1);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << std::endl\\n\\u00a0               << \\\"Total number of cells: \\\" << triangulation.n_cells()\\n\\u00a0               << std::endl;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void BiharmonicProblem<dim>::setup_system()\\n\\u00a0   {\\n\\u00a0     dof_handler.distribute_dofs(fe);\\n\\u00a0 \\n\\u00a0     std::cout << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     constraints.clear();\\n\\u00a0     DoFTools::make_hanging_node_constraints(dof_handler, constraints);\\n\\u00a0 \\n\\u00a0     VectorTools::interpolate_boundary_values(dof_handler,\\n\\u00a0                                              0,\\n\\u00a0                                              ExactSolution::Solution<dim>(),\\n\\u00a0                                              constraints);\\n\\u00a0     constraints.close();\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     DynamicSparsityPattern dsp(dof_handler.n_dofs());\\n\\u00a0     DoFTools::make_flux_sparsity_pattern(dof_handler, dsp, constraints, true);\\n\\u00a0     sparsity_pattern.copy_from(dsp);\\n\\u00a0     system_matrix.reinit(sparsity_pattern);\\n\\u00a0 \\n\\u00a0     solution.reinit(dof_handler.n_dofs());\\n\\u00a0     system_rhs.reinit(dof_handler.n_dofs());\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nTriangulation::n_cellsunsigned int n_cells() const\\nDoFTools::make_hanging_node_constraintsvoid make_hanging_node_constraints(const DoFHandler< dim, spacedim > &dof_handler, AffineConstraints< number > &constraints)Definition dof_tools_constraints.cc:3073\\nDoFTools::make_flux_sparsity_patternvoid make_flux_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern)Definition dof_tools_sparsity.cc:697\\nGridGenerator::hyper_cubevoid hyper_cube(Triangulation< dim, spacedim > &tria, const double left=0., const double right=1., const bool colorize=false)\\nVectorTools::interpolate_boundary_valuesvoid interpolate_boundary_values(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const std::map< types::boundary_id, const Function< spacedim, number > * > &function_map, std::map< types::global_dof_index, number > &boundary_values, const ComponentMask &component_mask={})\\n Assembling the linear system\\nThe following pieces of code are more interesting. They all relate to the assembly of the linear system. While assembling the cell-interior terms is not of great difficulty \\u2013 that works in essence like the assembly of the corresponding terms of the Laplace equation, and you have seen how this works in step-4 or step-6, for example \\u2013 the difficulty is with the penalty terms in the formulation. These require the evaluation of gradients of shape functions at interfaces of cells. At the least, one would therefore need to use two FEFaceValues objects, but if one of the two sides is adaptively refined, then one actually needs an FEFaceValues and one FESubfaceValues objects; one also needs to keep track which shape functions live where, and finally we need to ensure that every face is visited only once. All of this is a substantial overhead to the logic we really want to implement (namely the penalty terms in the bilinear form). As a consequence, we will make use of the FEInterfaceValues class \\u2013 a helper class in deal.II that allows us to abstract away the two FEFaceValues or FESubfaceValues objects and directly access what we really care about: jumps, averages, etc.\\nBut this doesn't yet solve our problem of having to keep track of which faces we have already visited when we loop over all cells and all of their faces. To make this process simpler, we use the MeshWorker::mesh_loop() function that provides a simple interface for this task: Based on the ideas outlined in the WorkStream namespace documentation, MeshWorker::mesh_loop() requires three functions that do work on cells, interior faces, and boundary faces. These functions work on scratch objects for intermediate results, and then copy the result of their computations into copy data objects from where a copier function copies them into the global matrix and right hand side objects.\\nThe following structures then provide the scratch and copy objects that are necessary for this approach. You may look up the WorkStream namespace as well as the Parallel computing with multiple processors topic for more information on how they typically work.\\n\\u00a0   template <int dim>\\n\\u00a0   struct ScratchData\\n\\u00a0   {\\n\\u00a0     ScratchData(const Mapping<dim>       &mapping,\\n\\u00a0                 const FiniteElement<dim> &fe,\\n\\u00a0                 const unsigned int        quadrature_degree,\\n\\u00a0                 const UpdateFlags         update_flags,\\n\\u00a0                 const UpdateFlags         interface_update_flags)\\n\\u00a0       : fe_values(mapping, fe, QGauss<dim>(quadrature_degree), update_flags)\\n\\u00a0       , fe_interface_values(mapping,\\n\\u00a0                             fe,\\n\\u00a0                             QGauss<dim - 1>(quadrature_degree),\\n\\u00a0                             interface_update_flags)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     ScratchData(const ScratchData<dim> &scratch_data)\\n\\u00a0       : fe_values(scratch_data.fe_values.get_mapping(),\\n\\u00a0                   scratch_data.fe_values.get_fe(),\\n\\u00a0                   scratch_data.fe_values.get_quadrature(),\\n\\u00a0                   scratch_data.fe_values.get_update_flags())\\n\\u00a0       , fe_interface_values(scratch_data.fe_values.get_mapping(),\\n\\u00a0                             scratch_data.fe_values.get_fe(),\\n\\u00a0                             scratch_data.fe_interface_values.get_quadrature(),\\n\\u00a0                             scratch_data.fe_interface_values.get_update_flags())\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0     FEValues<dim>          fe_values;\\n\\u00a0     FEInterfaceValues<dim> fe_interface_values;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   struct CopyData\\n\\u00a0   {\\n\\u00a0     CopyData(const unsigned int dofs_per_cell)\\n\\u00a0       : cell_matrix(dofs_per_cell, dofs_per_cell)\\n\\u00a0       , cell_rhs(dofs_per_cell)\\n\\u00a0       , local_dof_indices(dofs_per_cell)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     CopyData(const CopyData &) = default;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     CopyData(CopyData &&) = default;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     ~CopyData() = default;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     CopyData &operator=(const CopyData &) = default;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     CopyData &operator=(CopyData &&) = default;\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     struct FaceData\\n\\u00a0     {\\n\\u00a0       FullMatrix<double>                   cell_matrix;\\n\\u00a0       std::vector<types::global_dof_index> joint_dof_indices;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     FullMatrix<double> cell_matrix;\\n\\u00a0     Vector<double>                       cell_rhs;\\n\\u00a0     std::vector<types::global_dof_index> local_dof_indices;\\n\\u00a0     std::vector<FaceData>                face_data;\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFEInterfaceValuesDefinition fe_interface_values.h:1277\\nFEValuesDefinition fe_values.h:63\\nFiniteElementDefinition fe.h:655\\nFullMatrixDefinition full_matrix.h:79\\nMappingAbstract base class for mapping classes.Definition mapping.h:318\\nQGaussDefinition quadrature_lib.h:40\\nUpdateFlagsUpdateFlagsDefinition fe_update_flags.h:64\\nLocalIntegrators::Advection::cell_matrixvoid cell_matrix(FullMatrix< double > &M, const FEValuesBase< dim > &fe, const FEValuesBase< dim > &fetest, const ArrayView< const std::vector< double > > &velocity, const double factor=1.)Definition advection.h:74\\nThe more interesting part is where we actually assemble the linear system. Fundamentally, this function has five parts:\\nThe definition of the cell_worker lambda function, a small function that is defined within the assemble_system() function and that will be responsible for computing the local integrals on an individual cell. It will work on a copy of the ScratchData class and put its results into the corresponding CopyData object.\\nThe definition of the face_worker lambda function that does the integration of all terms that live on the interfaces between cells.\\nThe definition of the boundary_worker function that does the same but for cell faces located on the boundary of the domain.\\nThe definition of the copier function that is responsible for copying all of the data the previous three functions have put into copy objects for a single cell, into the global matrix and right hand side.\\n\\nThe fifth part is the one where we bring all of this together.\\nLet us go through each of these pieces necessary for the assembly in turns.\\n\\u00a0   template <int dim>\\n\\u00a0   void BiharmonicProblem<dim>::assemble_system()\\n\\u00a0   {\\n\\u00a0     using Iterator = typename DoFHandler<dim>::active_cell_iterator;\\n\\u00a0 \\nDoFHandler::active_cell_iteratortypename ActiveSelector::active_cell_iterator active_cell_iteratorDefinition dof_handler.h:440\\nThe first piece is the cell_worker that does the assembly on the cell interiors. It is a (lambda) function that takes a cell (input), a scratch object, and a copy object (output) as arguments. It looks like the assembly functions of many other of the tutorial programs, or at least the body of the loop over all cells.\\nThe terms we integrate here are the cell contribution   \\n\\\\begin{align*}\\n   A^K_{ij} = \\\\int_K \\\\nabla^2\\\\varphi_i(x) : \\\\nabla^2\\\\varphi_j(x) dx\\n   \\\\end{align*}\\n\\n to the global matrix, and   \\n\\\\begin{align*}\\n   f^K_i = \\\\int_K \\\\varphi_i(x) f(x) dx\\n   \\\\end{align*}\\n\\n to the right hand side vector.\\nWe use the same technique as used in the assembly of step-22 to accelerate the function: Instead of calling fe_values.shape_hessian(i, qpoint) in the innermost loop, we create a variable hessian_i that evaluates this value once in the loop over i and re-use the so-evaluated value in the loop over j. For symmetry, we do the same with a variable hessian_j, although it is indeed only used once and we could have left the call to fe_values.shape_hessian(j,qpoint) in the instruction that computes the scalar product between the two terms.\\n\\u00a0     auto cell_worker = [&](const Iterator   &cell,\\n\\u00a0                            ScratchData<dim> &scratch_data,\\n\\u00a0                            CopyData         &copy_data) {\\n\\u00a0       copy_data.cell_matrix = 0;\\n\\u00a0       copy_data.cell_rhs    = 0;\\n\\u00a0 \\n\\u00a0       FEValues<dim> &fe_values = scratch_data.fe_values;\\n\\u00a0       fe_values.reinit(cell);\\n\\u00a0 \\n\\u00a0       cell->get_dof_indices(copy_data.local_dof_indices);\\n\\u00a0 \\n\\u00a0       ExactSolution::RightHandSide<dim> right_hand_side;\\n\\u00a0 \\n\\u00a0       const unsigned int dofs_per_cell =\\n\\u00a0         scratch_data.fe_values.get_fe().n_dofs_per_cell();\\n\\u00a0 \\n\\u00a0       for (unsigned int qpoint = 0; qpoint < fe_values.n_quadrature_points;\\n\\u00a0            ++qpoint)\\n\\u00a0         {\\n\\u00a0           for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n\\u00a0             {\\n\\u00a0               const Tensor<2, dim> &hessian_i =\\n\\u00a0                 fe_values.shape_hessian(i, qpoint);\\n\\u00a0 \\n\\u00a0               for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n\\u00a0                 {\\n\\u00a0                   const Tensor<2, dim> &hessian_j =\\n\\u00a0                     fe_values.shape_hessian(j, qpoint);\\n\\u00a0 \\n\\u00a0                   copy_data.cell_matrix(i, j) +=\\n\\u00a0                     scalar_product(hessian_i,   // nabla^2 phi_i(x)\\n\\u00a0                                    hessian_j) * // nabla^2 phi_j(x)\\n\\u00a0                     fe_values.JxW(qpoint);      // dx\\n\\u00a0                 }\\n\\u00a0 \\n\\u00a0               copy_data.cell_rhs(i) +=\\n\\u00a0                 fe_values.shape_value(i, qpoint) * // phi_i(x)\\n\\u00a0                 right_hand_side.value(\\n\\u00a0                   fe_values.quadrature_point(qpoint)) * // f(x)\\n\\u00a0                 fe_values.JxW(qpoint);                  // dx\\n\\u00a0             }\\n\\u00a0         }\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\nFEValues::reinitvoid reinit(const TriaIterator< DoFCellAccessor< dim, spacedim, level_dof_access > > &cell)\\nThe next building block is the one that assembles penalty terms on each of the interior faces of the mesh. As described in the documentation of MeshWorker::mesh_loop(), this function receives arguments that denote a cell and its neighboring cell, as well as (for each of the two cells) the face (and potentially sub-face) we have to integrate over. Again, we also get a scratch object, and a copy object for putting the results in.\\nThe function has three parts itself. At the top, we initialize the FEInterfaceValues object and create a new CopyData::FaceData object to store our input in. This gets pushed to the end of the copy_data.face_data variable. We need to do this because the number of faces (or subfaces) over which we integrate for a given cell differs from cell to cell, and the sizes of these matrices also differ, depending on what degrees of freedom are adjacent to the face or subface. As discussed in the documentation of MeshWorker::mesh_loop(), the copy object is reset every time a new cell is visited, so that what we push to the end of copy_data.face_data() is really all that the later copier function gets to see when it copies the contributions of each cell to the global matrix and right hand side objects.\\n\\u00a0     auto face_worker = [&](const Iterator     &cell,\\n\\u00a0                            const unsigned int &f,\\n\\u00a0                            const unsigned int &sf,\\n\\u00a0                            const Iterator     &ncell,\\n\\u00a0                            const unsigned int &nf,\\n\\u00a0                            const unsigned int &nsf,\\n\\u00a0                            ScratchData<dim>   &scratch_data,\\n\\u00a0                            CopyData           &copy_data) {\\n\\u00a0       FEInterfaceValues<dim> &fe_interface_values =\\n\\u00a0         scratch_data.fe_interface_values;\\n\\u00a0       fe_interface_values.reinit(cell, f, sf, ncell, nf, nsf);\\n\\u00a0 \\n\\u00a0       copy_data.face_data.emplace_back();\\n\\u00a0       CopyData::FaceData &copy_data_face = copy_data.face_data.back();\\n\\u00a0 \\n\\u00a0       copy_data_face.joint_dof_indices =\\n\\u00a0         fe_interface_values.get_interface_dof_indices();\\n\\u00a0 \\n\\u00a0       const unsigned int n_interface_dofs =\\n\\u00a0         fe_interface_values.n_current_interface_dofs();\\n\\u00a0       copy_data_face.cell_matrix.reinit(n_interface_dofs, n_interface_dofs);\\n\\u00a0 \\nFEInterfaceValues::reinitvoid reinit(const CellIteratorType &cell, const unsigned int face_no, const unsigned int sub_face_no, const CellNeighborIteratorType &cell_neighbor, const unsigned int face_no_neighbor, const unsigned int sub_face_no_neighbor, const unsigned int q_index=numbers::invalid_unsigned_int, const unsigned int mapping_index=numbers::invalid_unsigned_int, const unsigned int fe_index=numbers::invalid_unsigned_int, const unsigned int fe_index_neighbor=numbers::invalid_unsigned_int)\\nThe second part deals with determining what the penalty parameter should be. By looking at the units of the various terms in the bilinear form, it is clear that the penalty has to have the form \\\\(\\\\frac{\\\\gamma}{h_K}\\\\) (i.e., one over length scale), but it is not a priori obvious how one should choose the dimension-less number \\\\(\\\\gamma\\\\). From the discontinuous Galerkin theory for the Laplace equation, one might conjecture that the right choice is \\\\(\\\\gamma=p(p+1)\\\\) is the right choice, where \\\\(p\\\\) is the polynomial degree of the finite element used. We will discuss this choice in a bit more detail in the results section of this program.\\nIn the formula above, \\\\(h_K\\\\) is the size of cell \\\\(K\\\\). But this is not quite so straightforward either: If one uses highly stretched cells, then a more involved theory says that \\\\(h\\\\) should be replaced by the diameter of cell \\\\(K\\\\) normal to the direction of the edge in question. It turns out that there is a function in deal.II for that. Secondly, \\\\(h_K\\\\) may be different when viewed from the two different sides of a face.\\nTo stay on the safe side, we take the maximum of the two values. We will note that it is possible that this computation has to be further adjusted if one were to use hanging nodes resulting from adaptive mesh refinement.\\n\\u00a0       const unsigned int p = fe.degree;\\n\\u00a0       const double       gamma_over_h =\\n\\u00a0         std::max((1.0 * p * (p + 1) /\\n\\u00a0                   cell->extent_in_direction(\\n\\u00a0                     GeometryInfo<dim>::unit_normal_direction[f])),\\n\\u00a0                  (1.0 * p * (p + 1) /\\n\\u00a0                   ncell->extent_in_direction(\\n\\u00a0                     GeometryInfo<dim>::unit_normal_direction[nf])));\\n\\u00a0 \\nstd::max::VectorizedArray< Number, width > max(const ::VectorizedArray< Number, width > &, const ::VectorizedArray< Number, width > &)Definition vectorization.h:6943\\nGeometryInfoDefinition geometry_info.h:1964\\nFinally, and as usual, we loop over the quadrature points and indices i and j to add up the contributions of this face or sub-face. These are then stored in the copy_data.face_data object created above. As for the cell worker, we pull the evaluation of averages and jumps out of the loops if possible, introducing local variables that store these results. The assembly then only needs to use these local variables in the innermost loop. Regarding the concrete formula this code implements, recall that the interface terms of the bilinear form were as follows:             \\n\\\\begin{align*}\\n   -\\\\sum_{e \\\\in \\\\mathbb{F}} \\\\int_{e}\\n   \\\\jump{ \\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n   \\\\average{\\\\frac{\\\\partial^2 u_h}{\\\\partial \\\\mathbf n^2}} \\\\ ds\\n   -\\\\sum_{e \\\\in \\\\mathbb{F}} \\\\int_{e}\\n   \\\\average{\\\\frac{\\\\partial^2 v_h}{\\\\partial \\\\mathbf n^2}}\\n   \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\ ds\\n   + \\\\sum_{e \\\\in \\\\mathbb{F}}\\n   \\\\frac{\\\\gamma}{h_e}\\n   \\\\int_e\\n   \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n   \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\ ds.\\n   \\\\end{align*}\\n\\n\\u00a0       for (unsigned int qpoint = 0;\\n\\u00a0            qpoint < fe_interface_values.n_quadrature_points;\\n\\u00a0            ++qpoint)\\n\\u00a0         {\\n\\u00a0           const auto &n = fe_interface_values.normal(qpoint);\\n\\u00a0 \\n\\u00a0           for (unsigned int i = 0; i < n_interface_dofs; ++i)\\n\\u00a0             {\\n\\u00a0               const double av_hessian_i_dot_n_dot_n =\\n\\u00a0                 (fe_interface_values.average_of_shape_hessians(i, qpoint) * n *\\n\\u00a0                  n);\\n\\u00a0               const double jump_grad_i_dot_n =\\n\\u00a0                 (fe_interface_values.jump_in_shape_gradients(i, qpoint) * n);\\n\\u00a0 \\n\\u00a0               for (unsigned int j = 0; j < n_interface_dofs; ++j)\\n\\u00a0                 {\\n\\u00a0                   const double av_hessian_j_dot_n_dot_n =\\n\\u00a0                     (fe_interface_values.average_of_shape_hessians(j, qpoint) *\\n\\u00a0                      n * n);\\n\\u00a0                   const double jump_grad_j_dot_n =\\n\\u00a0                     (fe_interface_values.jump_in_shape_gradients(j, qpoint) *\\n\\u00a0                      n);\\n\\u00a0 \\n\\u00a0                   copy_data_face.cell_matrix(i, j) +=\\n\\u00a0                     (-av_hessian_i_dot_n_dot_n       // - {grad^2 v n n }\\n\\u00a0                        * jump_grad_j_dot_n           // [grad u n]\\n\\u00a0                      - av_hessian_j_dot_n_dot_n      // - {grad^2 u n n }\\n\\u00a0                          * jump_grad_i_dot_n         // [grad v n]\\n\\u00a0                      +                               // +\\n\\u00a0                      gamma_over_h *                  // gamma/h\\n\\u00a0                        jump_grad_i_dot_n *           // [grad v n]\\n\\u00a0                        jump_grad_j_dot_n) *          // [grad u n]\\n\\u00a0                     fe_interface_values.JxW(qpoint); // dx\\n\\u00a0                 }\\n\\u00a0             }\\n\\u00a0         }\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\nThe third piece is to do the same kind of assembly for faces that are at the boundary. The idea is the same as above, of course, with only the difference that there are now penalty terms that also go into the right hand side.\\nAs before, the first part of the function simply sets up some helper objects:\\n\\u00a0     auto boundary_worker = [&](const Iterator     &cell,\\n\\u00a0                                const unsigned int &face_no,\\n\\u00a0                                ScratchData<dim>   &scratch_data,\\n\\u00a0                                CopyData           &copy_data) {\\n\\u00a0       FEInterfaceValues<dim> &fe_interface_values =\\n\\u00a0         scratch_data.fe_interface_values;\\n\\u00a0       fe_interface_values.reinit(cell, face_no);\\n\\u00a0       const auto &q_points = fe_interface_values.get_quadrature_points();\\n\\u00a0 \\n\\u00a0       copy_data.face_data.emplace_back();\\n\\u00a0       CopyData::FaceData &copy_data_face = copy_data.face_data.back();\\n\\u00a0 \\n\\u00a0       const unsigned int n_dofs =\\n\\u00a0         fe_interface_values.n_current_interface_dofs();\\n\\u00a0       copy_data_face.joint_dof_indices =\\n\\u00a0         fe_interface_values.get_interface_dof_indices();\\n\\u00a0 \\n\\u00a0       copy_data_face.cell_matrix.reinit(n_dofs, n_dofs);\\n\\u00a0 \\n\\u00a0       const std::vector<double> &JxW = fe_interface_values.get_JxW_values();\\n\\u00a0       const std::vector<Tensor<1, dim>> &normals =\\n\\u00a0         fe_interface_values.get_normal_vectors();\\n\\u00a0 \\n\\u00a0 \\n\\u00a0       ExactSolution::Solution<dim> exact_solution;\\n\\u00a0       std::vector<Tensor<1, dim>>  exact_gradients(q_points.size());\\n\\u00a0       exact_solution.gradient_list(q_points, exact_gradients);\\n\\u00a0 \\n\\u00a0 \\nPositively, because we now only deal with one cell adjacent to the face (as we are on the boundary), the computation of the penalty factor \\\\(\\\\gamma\\\\) is substantially simpler:\\n\\u00a0       const unsigned int p = fe.degree;\\n\\u00a0       const double       gamma_over_h =\\n\\u00a0         (1.0 * p * (p + 1) /\\n\\u00a0          cell->extent_in_direction(\\n\\u00a0            GeometryInfo<dim>::unit_normal_direction[face_no]));\\n\\u00a0 \\nThe third piece is the assembly of terms. This is now slightly more involved since these contains both terms for the matrix and for the right hand side. The former is exactly the same as for the interior faces stated above if one just defines the jump and average appropriately (which is what the FEInterfaceValues class does). The latter requires us to evaluate the boundary conditions \\\\(j(\\\\mathbf x)\\\\), which in the current case (where we know the exact solution) we compute from  \\\\(j(\\\\mathbf x) = \\\\frac{\\\\partial u(\\\\mathbf x)}{\\\\partial\\n   {\\\\mathbf n}}\\\\). The term to be added to the right hand side vector is then  \\\\(\\\\frac{\\\\gamma}{h_e}\\\\int_e\\n   \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}} j \\\\ ds\\\\).\\n\\u00a0       for (unsigned int qpoint = 0; qpoint < q_points.size(); ++qpoint)\\n\\u00a0         {\\n\\u00a0           const auto &n = normals[qpoint];\\n\\u00a0 \\n\\u00a0           for (unsigned int i = 0; i < n_dofs; ++i)\\n\\u00a0             {\\n\\u00a0               const double av_hessian_i_dot_n_dot_n =\\n\\u00a0                 (fe_interface_values.average_of_shape_hessians(i, qpoint) * n *\\n\\u00a0                  n);\\n\\u00a0               const double jump_grad_i_dot_n =\\n\\u00a0                 (fe_interface_values.jump_in_shape_gradients(i, qpoint) * n);\\n\\u00a0 \\n\\u00a0               for (unsigned int j = 0; j < n_dofs; ++j)\\n\\u00a0                 {\\n\\u00a0                   const double av_hessian_j_dot_n_dot_n =\\n\\u00a0                     (fe_interface_values.average_of_shape_hessians(j, qpoint) *\\n\\u00a0                      n * n);\\n\\u00a0                   const double jump_grad_j_dot_n =\\n\\u00a0                     (fe_interface_values.jump_in_shape_gradients(j, qpoint) *\\n\\u00a0                      n);\\n\\u00a0 \\n\\u00a0                   copy_data_face.cell_matrix(i, j) +=\\n\\u00a0                     (-av_hessian_i_dot_n_dot_n  // - {grad^2 v n n}\\n\\u00a0                        * jump_grad_j_dot_n      //   [grad u n]\\n\\u00a0                                                 \\n\\u00a0                      - av_hessian_j_dot_n_dot_n // - {grad^2 u n n}\\n\\u00a0                          * jump_grad_i_dot_n    //   [grad v n]\\n\\u00a0                                                 \\n\\u00a0                      + gamma_over_h             //  gamma/h\\n\\u00a0                          * jump_grad_i_dot_n    // [grad v n]\\n\\u00a0                          * jump_grad_j_dot_n    // [grad u n]\\n\\u00a0                      ) *\\n\\u00a0                     JxW[qpoint]; // dx\\n\\u00a0                 }\\n\\u00a0 \\n\\u00a0               copy_data.cell_rhs(i) +=\\n\\u00a0                 (-av_hessian_i_dot_n_dot_n *       // - {grad^2 v n n }\\n\\u00a0                    (exact_gradients[qpoint] * n)   //   (grad u_exact . n)\\n\\u00a0                  +                                 // +\\n\\u00a0                  gamma_over_h                      //  gamma/h\\n\\u00a0                    * jump_grad_i_dot_n             // [grad v n]\\n\\u00a0                    * (exact_gradients[qpoint] * n) // (grad u_exact . n)\\n\\u00a0                  ) *\\n\\u00a0                 JxW[qpoint]; // dx\\n\\u00a0             }\\n\\u00a0         }\\n\\u00a0     };\\n\\u00a0 \\nPart 4 is a small function that copies the data produced by the cell, interior, and boundary face assemblers above into the global matrix and right hand side vector. There really is not very much to do here: We distribute the cell matrix and right hand side contributions as we have done in almost all of the other tutorial programs using the constraints objects. We then also have to do the same for the face matrix contributions that have gained content for the faces (interior and boundary) and that the face_worker and boundary_worker have added to the copy_data.face_data array.\\n\\u00a0     auto copier = [&](const CopyData &copy_data) {\\n\\u00a0       constraints.distribute_local_to_global(copy_data.cell_matrix,\\n\\u00a0                                              copy_data.cell_rhs,\\n\\u00a0                                              copy_data.local_dof_indices,\\n\\u00a0                                              system_matrix,\\n\\u00a0                                              system_rhs);\\n\\u00a0 \\n\\u00a0       for (const auto &cdf : copy_data.face_data)\\n\\u00a0         {\\n\\u00a0           constraints.distribute_local_to_global(cdf.cell_matrix,\\n\\u00a0                                                  cdf.joint_dof_indices,\\n\\u00a0                                                  system_matrix);\\n\\u00a0         }\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\nHaving set all of this up, what remains is to just create a scratch and copy data object and call the MeshWorker::mesh_loop() function that then goes over all cells and faces, calls the respective workers on them, and then the copier function that puts things into the global matrix and right hand side. As an additional benefit, MeshWorker::mesh_loop() does all of this in parallel, using as many processor cores as your machine happens to have.\\n\\u00a0     const unsigned int n_gauss_points = dof_handler.get_fe().degree + 1;\\n\\u00a0     ScratchData<dim>   scratch_data(mapping,\\n\\u00a0                                   fe,\\n\\u00a0                                   n_gauss_points,\\n\\u00a0                                   update_values | update_gradients |\\n\\u00a0                                     update_hessians | update_quadrature_points |\\n\\u00a0                                     update_JxW_values,\\n\\u00a0                                   update_values | update_gradients |\\n\\u00a0                                     update_hessians | update_quadrature_points |\\n\\u00a0                                     update_JxW_values | update_normal_vectors);\\n\\u00a0     CopyData           copy_data(dof_handler.get_fe().n_dofs_per_cell());\\n\\u00a0     MeshWorker::mesh_loop(dof_handler.begin_active(),\\n\\u00a0                           dof_handler.end(),\\n\\u00a0                           cell_worker,\\n\\u00a0                           copier,\\n\\u00a0                           scratch_data,\\n\\u00a0                           copy_data,\\n\\u00a0                           MeshWorker::assemble_own_cells |\\n\\u00a0                             MeshWorker::assemble_boundary_faces |\\n\\u00a0                             MeshWorker::assemble_own_interior_faces_once,\\n\\u00a0                           boundary_worker,\\n\\u00a0                           face_worker);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nMeshWorker::mesh_loopvoid mesh_loop(const CellIteratorType &begin, const CellIteratorType &end, const CellWorkerFunctionType &cell_worker, const CopierType &copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const AssembleFlags flags=assemble_own_cells, const BoundaryWorkerFunctionType &boundary_worker=BoundaryWorkerFunctionType(), const FaceWorkerFunctionType &face_worker=FaceWorkerFunctionType(), const unsigned int queue_length=2 *MultithreadInfo::n_threads(), const unsigned int chunk_size=8)Definition mesh_loop.h:281\\nupdate_hessians@ update_hessiansSecond derivatives of shape functions.Definition fe_update_flags.h:87\\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_normal_vectors@ update_normal_vectorsNormal vectors.Definition fe_update_flags.h:141\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nupdate_quadrature_points@ update_quadrature_pointsTransformed quadrature points.Definition fe_update_flags.h:127\\nMeshWorker::assemble_boundary_faces@ assemble_boundary_facesDefinition assemble_flags.h:80\\nMeshWorker::assemble_own_cells@ assemble_own_cellsDefinition assemble_flags.h:49\\nMeshWorker::assemble_own_interior_faces_once@ assemble_own_interior_faces_onceDefinition assemble_flags.h:58\\n Solving the linear system and postprocessing\\nThe show is essentially over at this point: The remaining functions are not overly interesting or novel. The first one simply uses a direct solver to solve the linear system (see also step-29):\\n\\u00a0   template <int dim>\\n\\u00a0   void BiharmonicProblem<dim>::solve()\\n\\u00a0   {\\n\\u00a0     std::cout << \\\"   Solving system...\\\" << std::endl;\\n\\u00a0 \\n\\u00a0     SparseDirectUMFPACK A_direct;\\n\\u00a0     A_direct.initialize(system_matrix);\\n\\u00a0     A_direct.vmult(solution, system_rhs);\\n\\u00a0 \\n\\u00a0     constraints.distribute(solution);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nSparseDirectUMFPACKDefinition sparse_direct.h:92\\nSparseDirectUMFPACK::initializevoid initialize(const SparsityPattern &sparsity_pattern)Definition sparse_direct.cc:67\\nThe next function evaluates the error between the computed solution and the exact solution (which is known here because we have chosen the right hand side and boundary values in a way so that we know the corresponding solution). In the first two code blocks below, we compute the error in the \\\\(L_2\\\\) norm and the \\\\(H^1\\\\) semi-norm.\\n\\u00a0   template <int dim>\\n\\u00a0   void BiharmonicProblem<dim>::compute_errors()\\n\\u00a0   {\\n\\u00a0     {\\n\\u00a0       Vector<float> norm_per_cell(triangulation.n_active_cells());\\n\\u00a0       VectorTools::integrate_difference(mapping,\\n\\u00a0                                         dof_handler,\\n\\u00a0                                         solution,\\n\\u00a0                                         ExactSolution::Solution<dim>(),\\n\\u00a0                                         norm_per_cell,\\n\\u00a0                                         QGauss<dim>(fe.degree + 2),\\n\\u00a0                                         VectorTools::L2_norm);\\n\\u00a0       const double error_norm =\\n\\u00a0         VectorTools::compute_global_error(triangulation,\\n\\u00a0                                           norm_per_cell,\\n\\u00a0                                           VectorTools::L2_norm);\\n\\u00a0       std::cout << \\\"   Error in the L2 norm           :     \\\" << error_norm\\n\\u00a0                 << std::endl;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       Vector<float> norm_per_cell(triangulation.n_active_cells());\\n\\u00a0       VectorTools::integrate_difference(mapping,\\n\\u00a0                                         dof_handler,\\n\\u00a0                                         solution,\\n\\u00a0                                         ExactSolution::Solution<dim>(),\\n\\u00a0                                         norm_per_cell,\\n\\u00a0                                         QGauss<dim>(fe.degree + 2),\\n\\u00a0                                         VectorTools::H1_seminorm);\\n\\u00a0       const double error_norm =\\n\\u00a0         VectorTools::compute_global_error(triangulation,\\n\\u00a0                                           norm_per_cell,\\n\\u00a0                                           VectorTools::H1_seminorm);\\n\\u00a0       std::cout << \\\"   Error in the H1 seminorm       : \\\" << error_norm\\n\\u00a0                 << std::endl;\\n\\u00a0     }\\n\\u00a0 \\nVectorTools::compute_global_errordouble compute_global_error(const Triangulation< dim, spacedim > &tria, const InVector &cellwise_error, const NormType &norm, const double exponent=2.)\\nVectorTools::H1_seminorm@ H1_seminormDefinition vector_tools_common.h:164\\nVectorTools::L2_norm@ L2_normDefinition vector_tools_common.h:112\\nVectorTools::integrate_differencevoid integrate_difference(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const ReadVector< Number > &fe_function, const Function< spacedim, Number > &exact_solution, OutVector &difference, const Quadrature< dim > &q, const NormType &norm, const Function< spacedim, double > *weight=nullptr, const double exponent=2.)\\nNow also compute an approximation to the \\\\(H^2\\\\) seminorm error. The actual \\\\(H^2\\\\) seminorm would require us to integrate second derivatives of the solution \\\\(u_h\\\\), but given the Lagrange shape functions we use, \\\\(u_h\\\\) of course has kinks at the interfaces between cells, and consequently second derivatives are singular at interfaces. As a consequence, we really only integrate over the interior of cells and ignore the interface contributions. This is not an equivalent norm to the energy norm for the problem, but still gives us an idea of how fast the error converges.\\nWe note that one could address this issue by defining a norm that is equivalent to the energy norm. This would involve adding up not only the integrals over cell interiors as we do below, but also adding penalty terms for the jump of the derivative of \\\\(u_h\\\\) across interfaces, with an appropriate scaling of the two kinds of terms. We will leave this for later work.\\n\\u00a0     {\\n\\u00a0       const QGauss<dim>            quadrature_formula(fe.degree + 2);\\n\\u00a0       ExactSolution::Solution<dim> exact_solution;\\n\\u00a0       Vector<double> error_per_cell(triangulation.n_active_cells());\\n\\u00a0 \\n\\u00a0       FEValues<dim> fe_values(mapping,\\n\\u00a0                               fe,\\n\\u00a0                               quadrature_formula,\\n\\u00a0                               update_values | update_hessians |\\n\\u00a0                                 update_quadrature_points | update_JxW_values);\\n\\u00a0 \\n\\u00a0       const FEValuesExtractors::Scalar scalar(0);\\n\\u00a0       const unsigned int               n_q_points = quadrature_formula.size();\\n\\u00a0 \\n\\u00a0       std::vector<SymmetricTensor<2, dim>> exact_hessians(n_q_points);\\n\\u00a0       std::vector<Tensor<2, dim>>          hessians(n_q_points);\\n\\u00a0       for (auto &cell : dof_handler.active_cell_iterators())\\n\\u00a0         {\\n\\u00a0           fe_values.reinit(cell);\\n\\u00a0           fe_values[scalar].get_function_hessians(solution, hessians);\\n\\u00a0           exact_solution.hessian_list(fe_values.get_quadrature_points(),\\n\\u00a0                                       exact_hessians);\\n\\u00a0 \\n\\u00a0           double local_error = 0;\\n\\u00a0           for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n\\u00a0             {\\n\\u00a0               local_error +=\\n\\u00a0                 ((exact_hessians[q_point] - hessians[q_point]).norm_square() *\\n\\u00a0                  fe_values.JxW(q_point));\\n\\u00a0             }\\n\\u00a0           error_per_cell[cell->active_cell_index()] = std::sqrt(local_error);\\n\\u00a0         }\\n\\u00a0 \\n\\u00a0       const double error_norm =\\n\\u00a0         VectorTools::compute_global_error(triangulation,\\n\\u00a0                                           error_per_cell,\\n\\u00a0                                           VectorTools::L2_norm);\\n\\u00a0       std::cout << \\\"   Error in the broken H2 seminorm: \\\" << error_norm\\n\\u00a0                 << std::endl;\\n\\u00a0     }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nstd::sqrt::VectorizedArray< Number, width > sqrt(const ::VectorizedArray< Number, width > &)Definition vectorization.h:6869\\nFEValuesExtractors::ScalarDefinition fe_values_extractors.h:95\\nEqually uninteresting is the function that generates graphical output. It looks exactly like the one in step-6, for example.\\n\\u00a0   template <int dim>\\n\\u00a0   void\\n\\u00a0   BiharmonicProblem<dim>::output_results(const unsigned int iteration) const\\n\\u00a0   {\\n\\u00a0     std::cout << \\\"   Writing graphical output...\\\" << std::endl;\\n\\u00a0 \\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0 \\n\\u00a0     data_out.attach_dof_handler(dof_handler);\\n\\u00a0     data_out.add_data_vector(solution, \\\"solution\\\");\\n\\u00a0     data_out.build_patches();\\n\\u00a0 \\n\\u00a0     const std::string filename =\\n\\u00a0       (\\\"output_\\\" + Utilities::int_to_string(iteration, 6) + \\\".vtu\\\");\\n\\u00a0     std::ofstream output_vtu(filename);\\n\\u00a0     data_out.write_vtu(output_vtu);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\nThe same is true for the run() function: Just like in previous programs.\\n\\u00a0   template <int dim>\\n\\u00a0   void BiharmonicProblem<dim>::run()\\n\\u00a0   {\\n\\u00a0     make_grid();\\n\\u00a0 \\n\\u00a0     const unsigned int n_cycles = 4;\\n\\u00a0     for (unsigned int cycle = 0; cycle < n_cycles; ++cycle)\\n\\u00a0       {\\n\\u00a0         std::cout << \\\"Cycle \\\" << cycle << \\\" of \\\" << n_cycles << std::endl;\\n\\u00a0 \\n\\u00a0         triangulation.refine_global(1);\\n\\u00a0         setup_system();\\n\\u00a0 \\n\\u00a0         assemble_system();\\n\\u00a0         solve();\\n\\u00a0 \\n\\u00a0         output_results(cycle);\\n\\u00a0 \\n\\u00a0         compute_errors();\\n\\u00a0         std::cout << std::endl;\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 } // namespace Step47\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n The main() function\\nFinally for the main() function. There is, again, not very much to see here: It looks like the ones in previous tutorial programs. There is a variable that allows selecting the polynomial degree of the element we want to use for solving the equation. Because the C0IP formulation we use requires the element degree to be at least two, we check with an assertion that whatever one sets for the polynomial degree actually makes sense.\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace dealii;\\n\\u00a0       using namespace Step47;\\n\\u00a0 \\n\\u00a0       const unsigned int fe_degree = 2;\\n\\u00a0       Assert(fe_degree >= 2,\\n\\u00a0              ExcMessage(\\\"The C0IP formulation for the biharmonic problem \\\"\\n\\u00a0                         \\\"only works if one uses elements of polynomial \\\"\\n\\u00a0                         \\\"degree at least 2.\\\"));\\n\\u00a0 \\n\\u00a0       BiharmonicProblem<2> biharmonic_problem(fe_degree);\\n\\u00a0       biharmonic_problem.run();\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0 \\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0   return 0;\\n\\u00a0 }\\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\n Results\\nWe run the program with right hand side and boundary values as discussed in the introduction. These will produce the solution \\\\(u = \\\\sin(\\\\pi x) \\\\sin(\\\\pi y)\\\\) on the domain \\\\(\\\\Omega = (0,1)^2\\\\). We test this setup using \\\\(Q_2\\\\), \\\\(Q_3\\\\), and \\\\(Q_4\\\\) elements, which one can change via the fe_degree variable in the main() function. With mesh refinement, the \\\\(L_2\\\\) convergence rates, \\\\(H^1\\\\)-seminorm rate, and \\\\(H^2\\\\)-seminorm convergence of \\\\(u\\\\) should then be around 2, 2, 1 for \\\\(Q_2\\\\) (with the \\\\(L_2\\\\) norm sub-optimal as discussed in the introduction); 4, 3, 2 for \\\\(Q_3\\\\); and 5, 4, 3 for \\\\(Q_4\\\\), respectively.\\nFrom the literature, it is not immediately clear what the penalty parameter \\\\(\\\\gamma\\\\) should be. For example, [43] state that it needs to be larger than one, and choose \\\\(\\\\gamma=5\\\\). The FEniCS/Dolphin tutorial chooses it as \\\\(\\\\gamma=8\\\\), see https://fenicsproject.org/docs/dolfin/1.6.0/python/demo/documented/biharmonic/python/documentation.html . [208] uses a value for \\\\(\\\\gamma\\\\) larger than the number of edges belonging to an element for Kirchhoff plates (see their Section 4.2). This suggests that maybe \\\\(\\\\gamma = 1\\\\), \\\\(2\\\\), are too small; on the other hand, a value \\\\(p(p+1)\\\\) would be reasonable, where \\\\(p\\\\) is the degree of polynomials. The last of these choices is the one one would expect to work by comparing to the discontinuous Galerkin formulations for the Laplace equation (see, for example, the discussions in step-39 and step-74), and it will turn out to also work here. But we should check what value of \\\\(\\\\gamma\\\\) is right, and we will do so below; changing \\\\(\\\\gamma\\\\) is easy in the two face_worker and boundary_worker functions defined in assemble_system().\\nTest results on Q2 with \\u03b3 = p(p+1) \\nWe run the code with differently refined meshes and get the following convergence rates.\\n\\n\\nNumber of refinements \\\\(\\\\|u-u_h\\\\|_{L_2}\\\\) Conv. rates \\\\(|u-u_h|_{H^1}\\\\) Conv. rates \\\\(|u-u_h|^\\\\circ_{H^2}\\\\) Conv. rates   \\n\\n2 8.780e-03 7.095e-02 1.645 \\n\\n3 3.515e-03 1.32 2.174e-02 1.70 8.121e-01 1.018   \\n\\n4 1.103e-03 1.67 6.106e-03 1.83 4.015e-01 1.016   \\n\\n5 3.084e-04 1.83 1.622e-03 1.91 1.993e-01 1.010   \\n\\nWe can see that the \\\\(L_2\\\\) convergence rates are around 2, \\\\(H^1\\\\)-seminorm convergence rates are around 2, and \\\\(H^2\\\\)-seminorm convergence rates are around 1. The latter two match the theoretically expected rates; for the former, we have no theorem but are not surprised that it is sub-optimal given the remark in the introduction.\\nTest results on Q3 with \\u03b3 = p(p+1) \\n\\n\\nNumber of refinements \\\\(\\\\|u-u_h\\\\|_{L_2}\\\\) Conv. rates \\\\(|u-u_h|_{H^1}\\\\) Conv. rates \\\\(|u-u_h|^\\\\circ_{H^2}\\\\) Conv. rates   \\n\\n2 2.045e-04 4.402e-03 1.641e-01 \\n\\n3 1.312e-05 3.96 5.537e-04 2.99 4.096e-02 2.00   \\n\\n4 8.239e-07 3.99 6.904e-05 3.00 1.023e-02 2.00   \\n\\n5 5.158e-08 3.99 8.621e-06 3.00 2.558e-03 2.00   \\n\\nWe can see that the \\\\(L_2\\\\) convergence rates are around 4, \\\\(H^1\\\\)-seminorm convergence rates are around 3, and \\\\(H^2\\\\)-seminorm convergence rates are around 2. This, of course, matches our theoretical expectations.\\nTest results on Q4 with \\u03b3 = p(p+1) \\n\\n\\nNumber of refinements \\\\(\\\\|u-u_h\\\\|_{L_2}\\\\) Conv. rates \\\\(|u-u_h|_{H^1}\\\\) Conv. rates \\\\(|u-u_h|^\\\\circ_{H^2}\\\\) Conv. rates   \\n\\n2 6.510e-06 2.215e-04 1.275e-02 \\n\\n3 2.679e-07 4.60 1.569e-05 3.81 1.496e-03 3.09   \\n\\n4 9.404e-09 4.83 1.040e-06 3.91 1.774e-04 3.07   \\n\\n5 7.943e-10 3.56 6.693e-08 3.95 2.150e-05 3.04   \\n\\nWe can see that the \\\\(L_2\\\\) norm convergence rates are around 5, \\\\(H^1\\\\)-seminorm convergence rates are around 4, and \\\\(H^2\\\\)-seminorm convergence rates are around 3. On the finest mesh, the \\\\(L_2\\\\) norm convergence rate is much smaller than our theoretical expectations because the linear solver becomes the limiting factor due to round-off. Of course the \\\\(L_2\\\\) error is also very small already in that case.\\nTest results on Q2 with \\u03b3 = 1 \\nFor comparison with the results above, let us now also consider the case where we simply choose \\\\(\\\\gamma=1\\\\):\\n\\n\\nNumber of refinements \\\\(\\\\|u-u_h\\\\|_{L_2}\\\\) Conv. rates \\\\(|u-u_h|_{H^1}\\\\) Conv. rates \\\\(|u-u_h|^\\\\circ_{H^2}\\\\) Conv. rates   \\n\\n2 7.350e-02 7.323e-01 10.343 \\n\\n3 6.798e-03 3.43 1.716e-01 2.09 4.836 1.09   \\n\\n4 9.669e-04 2.81 6.436e-02 1.41 3.590 0.430   \\n\\n5 1.755e-04 2.46 2.831e-02 1.18 3.144 0.19   \\n\\nAlthough \\\\(L_2\\\\) norm convergence rates of \\\\(u\\\\) more or less follows the theoretical expectations, the \\\\(H^1\\\\)-seminorm and \\\\(H^2\\\\)-seminorm do not seem to converge as expected. Comparing results from \\\\(\\\\gamma = 1\\\\) and \\\\(\\\\gamma = p(p+1)\\\\), it is clear that \\\\(\\\\gamma = p(p+1)\\\\) is a better penalty. Given that \\\\(\\\\gamma=1\\\\) is already too small for \\\\(Q_2\\\\) elements, it may not be surprising that if one repeated the experiment with a \\\\(Q_3\\\\) element, the results are even more disappointing: One again only obtains convergence rates of 2, 1, zero \\u2013 i.e., no better than for the \\\\(Q_2\\\\) element (although the errors are smaller in magnitude). Maybe surprisingly, however, one obtains more or less the expected convergence orders when using \\\\(Q_4\\\\) elements. Regardless, this uncertainty suggests that \\\\(\\\\gamma=1\\\\) is at best a risky choice, and at worst an unreliable one and that we should choose \\\\(\\\\gamma\\\\) larger.\\nTest results on Q2 with \\u03b3 = 2 \\nSince \\\\(\\\\gamma=1\\\\) is clearly too small, one might conjecture that \\\\(\\\\gamma=2\\\\) might actually work better. Here is what one obtains in that case:\\n\\n\\nNumber of refinements \\\\(\\\\|u-u_h\\\\|_{L_2}\\\\) Conv. rates \\\\(|u-u_h|_{H^1}\\\\) Conv. rates \\\\(|u-u_h|^\\\\circ_{H^2}\\\\) Conv. rates   \\n\\n2 4.133e-02 2.517e-01 3.056 \\n\\n3 6.500e-03 2.66 5.916e-02 2.08 1.444 1.08   \\n\\n4 6.780e-04 3.26 1.203e-02 2.296 6.151e-01 1.231   \\n\\n5 1.622e-04 2.06 2.448e-03 2.297 2.618e-01 1.232   \\n\\nIn this case, the convergence rates more or less follow the theoretical expectations, but, compared to the results from  \\\\(\\\\gamma =\\np(p+1)\\\\), are more variable. Again, we could repeat this kind of experiment for \\\\(Q_3\\\\) and \\\\(Q_4\\\\) elements. In both cases, we will find that we obtain roughly the expected convergence rates. Of more interest may then be to compare the absolute size of the errors. While in the table above, for the \\\\(Q_2\\\\) case, the errors on the finest grid are comparable between the \\\\(\\\\gamma=p(p+1)\\\\) and \\\\(\\\\gamma=2\\\\) case, for \\\\(Q_3\\\\) the errors are substantially larger for \\\\(\\\\gamma=2\\\\) than for \\\\(\\\\gamma=p(p+1)\\\\). The same is true for the \\\\(Q_4\\\\) case.\\nConclusions for the choice of the penalty parameter \\nThe conclusions for which of the \\\"reasonable\\\" choices one should use for the penalty parameter is that \\\\(\\\\gamma=p(p+1)\\\\) yields the expected results. It is, consequently, what the code uses as currently written.\\nPossibilities for extensions \\nThere are a number of obvious extensions to this program that would make sense:\\n\\nThe program uses a square domain and a uniform mesh. Real problems don't come this way, and one should verify convergence also on domains with other shapes and, in particular, curved boundaries. One may also be interested in resolving areas of less regularity by using adaptive mesh refinement.\\nFrom a more theoretical perspective, the convergence results above only used the \\\"broken\\\" \\\\(H^2\\\\) seminorm \\\\(|\\\\cdot|^\\\\circ_{H^2}\\\\) instead of the \\\"equivalent\\\" norm \\\\(|\\\\cdot|_h\\\\). This is good enough to convince ourselves that the program isn't fundamentally broken. However, it might be interesting to measure the error in the actual norm for which we have theoretical results. Implementing this addition should not be overly difficult using, for example, the FEInterfaceValues class combined with MeshWorker::mesh_loop() in the same spirit as we used for the assembly of the linear system.\\n\\n Derivation for the simply supported plates \\nSimilar to the \\\"clamped\\\" boundary condition addressed in the implementation, we will derive the \\\\(C^0\\\\) IP finite element scheme for simply supported plates:        \\n\\\\begin{align*}\\n    \\\\Delta^2 u(\\\\mathbf x) &= f(\\\\mathbf x)\\n    \\\\qquad \\\\qquad &&\\\\forall \\\\mathbf x \\\\in \\\\Omega,\\n    u(\\\\mathbf x) &= g(\\\\mathbf x) \\\\qquad \\\\qquad\\n    &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega, \\\\\\\\\\n    \\\\Delta u(\\\\mathbf x) &= h(\\\\mathbf x) \\\\qquad \\\\qquad\\n    &&\\\\forall \\\\mathbf x \\\\in \\\\partial\\\\Omega.\\n  \\\\end{align*}\\n\\n We multiply the biharmonic equation by the test function \\\\(v_h\\\\) and integrate over \\\\( K \\\\) and get:      \\n\\\\begin{align*}\\n    \\\\int_K v_h (\\\\Delta^2 u_h)\\n     &= \\\\int_K (D^2 v_h) : (D^2 u_h)\\n       + \\\\int_{\\\\partial K} v_h \\\\frac{\\\\partial (\\\\Delta u_h)}{\\\\partial \\\\mathbf{n}}\\n       -\\\\int_{\\\\partial K} (\\\\nabla v_h) \\\\cdot (\\\\frac{\\\\partial \\\\nabla u_h}{\\\\partial \\\\mathbf{n}}).\\n  \\\\end{align*}\\n\\nSumming up over all cells \\\\(K \\\\in  \\\\mathbb{T}\\\\),since normal directions of \\\\(\\\\Delta u_h\\\\) are pointing at opposite directions on each interior edge shared by two cells and \\\\(v_h = 0\\\\) on \\\\(\\\\partial \\\\Omega\\\\),   \\n\\\\begin{align*}\\n  \\\\sum_{K \\\\in \\\\mathbb{T}} \\\\int_{\\\\partial K} v_h \\\\frac{\\\\partial (\\\\Delta u_h)}{\\\\partial \\\\mathbf{n}} = 0,\\n  \\\\end{align*}\\n\\n and by the definition of jump over cell interfaces,   \\n\\\\begin{align*}\\n  -\\\\sum_{K \\\\in \\\\mathbb{T}} \\\\int_{\\\\partial K} (\\\\nabla v_h) \\\\cdot (\\\\frac{\\\\partial \\\\nabla u_h}{\\\\partial \\\\mathbf{n}}) = -\\\\sum_{e \\\\in \\\\mathbb{F}} \\\\int_{e} \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf{n}}} (\\\\frac{\\\\partial^2 u_h}{\\\\partial \\\\mathbf{n^2}}).\\n  \\\\end{align*}\\n\\n We separate interior faces and boundary faces of the domain,    \\n\\\\begin{align*}\\n  -\\\\sum_{K \\\\in \\\\mathbb{T}} \\\\int_{\\\\partial K} (\\\\nabla v_h) \\\\cdot (\\\\frac{\\\\partial \\\\nabla u_h}{\\\\partial \\\\mathbf{n}}) = -\\\\sum_{e \\\\in \\\\mathbb{F}^i} \\\\int_{e} \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf{n}}} (\\\\frac{\\\\partial^2 u_h}{\\\\partial \\\\mathbf{n^2}})\\n  - \\\\sum_{e \\\\in \\\\partial \\\\Omega} \\\\int_{e} \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf{n}}} h,\\n  \\\\end{align*}\\n\\n where \\\\(\\\\mathbb{F}^i\\\\) is the set of interior faces. This leads us to    \\n\\\\begin{align*}\\n  \\\\sum_{K \\\\in \\\\mathbb{T}} \\\\int_K (D^2 v_h) : (D^2 u_h) \\\\ dx - \\\\sum_{e \\\\in \\\\mathbb{F}^i} \\\\int_{e} \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf{n}}} (\\\\frac{\\\\partial^2 u_h}{\\\\partial \\\\mathbf{n^2}}) \\\\ ds\\n  = \\\\sum_{K \\\\in \\\\mathbb{T}}\\\\int_{K} v_h f  \\\\ dx + \\\\sum_{e\\\\subset\\\\partial\\\\Omega} \\\\int_{e} \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf{n}}} h \\\\ ds.\\n  \\\\end{align*}\\n\\nIn order to symmetrize and stabilize the discrete problem, we add symmetrization and stabilization term. We finally get the \\\\(C^0\\\\) IP finite element scheme for the biharmonic equation: find \\\\(u_h\\\\) such that \\\\(u_h =g\\\\) on \\\\(\\\\partial \\\\Omega\\\\) and   \\n\\\\begin{align*}\\n  \\\\mathcal{A}(v_h,u_h)&=\\\\mathcal{F}(v_h) \\\\quad \\\\text{holds for all test functions } v_h,\\n  \\\\end{align*}\\n\\n where                 \\n\\\\begin{align*}\\n  \\\\mathcal{A}(v_h,u_h):=&\\\\sum_{K \\\\in \\\\mathbb{T}}\\\\int_K D^2v_h:D^2u_h \\\\ dx\\n  \\\\\\\\\\n  &\\n   -\\\\sum_{e \\\\in \\\\mathbb{F}^i} \\\\int_{e}\\n    \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n    \\\\average{\\\\frac{\\\\partial^2 u_h}{\\\\partial \\\\mathbf n^2}} \\\\ ds\\n   -\\\\sum_{e \\\\in \\\\mathbb{F}^i} \\\\int_{e}\\n   \\\\average{\\\\frac{\\\\partial^2 v_h}{\\\\partial \\\\mathbf n^2}}\\n   \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\ ds\\n  \\\\\\\\\\n  &+ \\\\sum_{e \\\\in \\\\mathbb{F}^i}\\n   \\\\frac{\\\\gamma}{h_e}\\n   \\\\int_e\\n   \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}}\\n   \\\\jump{\\\\frac{\\\\partial u_h}{\\\\partial \\\\mathbf n}} \\\\ ds,\\n  \\\\end{align*}\\n\\n and      \\n\\\\begin{align*}\\n  \\\\mathcal{F}(v_h)&:=\\\\sum_{K \\\\in \\\\mathbb{T}}\\\\int_{K} v_h f \\\\ dx\\n  +\\n  \\\\sum_{e\\\\subset\\\\partial\\\\Omega}\\n  \\\\int_e \\\\jump{\\\\frac{\\\\partial v_h}{\\\\partial \\\\mathbf n}} h \\\\ ds.\\n  \\\\end{align*}\\n\\n The implementation of this boundary case is similar to the \\\"clamped\\\" version except that boundary_worker is no longer needed for system assembling and the right hand side is changed according to the formulation.\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2020 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Authors: Natasha Sharma, University of Texas at El Paso,\\n *          Guido Kanschat, University of Heidelberg\\n *          Timo Heister, Clemson University\\n *          Wolfgang Bangerth, Colorado State University\\n *          Zhuroan Wang, Colorado State University\\n */\\n \\n \\n \\n \\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/function.h>\\n \\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/full_matrix.h>\\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/sparse_direct.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n \\n#include <deal.II/fe/fe_q.h>\\n#include <deal.II/fe/fe_values.h>\\n#include <deal.II/fe/mapping_q.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_tools.h>\\n \\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n \\n#include <deal.II/fe/fe_interface_values.h>\\n#include <deal.II/meshworker/mesh_loop.h>\\n \\n \\n#include <fstream>\\n#include <iostream>\\n#include <cmath>\\n \\n \\nnamespace Step47\\n{\\n using namespace dealii;\\n \\n \\n namespace ExactSolution\\n  {\\n using numbers::PI;\\n \\n template <int dim>\\n class Solution : public Function<dim>\\n    {\\n public:\\n static_assert(dim == 2, \\\"Only dim==2 is implemented.\\\");\\n \\n virtual double value(const Point<dim> &p,\\n const unsigned int /*component*/ = 0) const override\\n {\\n return std::sin(PI * p[0]) * std::sin(PI * p[1]);\\n      }\\n \\n virtual Tensor<1, dim>\\n      gradient(const Point<dim> &p,\\n const unsigned int /*component*/ = 0) const override\\n {\\n Tensor<1, dim> r;\\n        r[0] = PI * std::cos(PI * p[0]) * std::sin(PI * p[1]);\\n        r[1] = PI * std::cos(PI * p[1]) * std::sin(PI * p[0]);\\n return r;\\n      }\\n \\n virtual void\\n      hessian_list(const std::vector<Point<dim>>        &points,\\n                   std::vector<SymmetricTensor<2, dim>> &hessians,\\n const unsigned int /*component*/ = 0) const override\\n {\\n for (unsigned i = 0; i < points.size(); ++i)\\n          {\\n const double x = points[i][0];\\n const double y = points[i][1];\\n \\n hessians[i][0][0] = -PI * PI * std::sin(PI * x) * std::sin(PI * y);\\n hessians[i][0][1] = PI * PI * std::cos(PI * x) * std::cos(PI * y);\\n hessians[i][1][1] = -PI * PI * std::sin(PI * x) * std::sin(PI * y);\\n          }\\n      }\\n    };\\n \\n \\n template <int dim>\\n class RightHandSide : public Function<dim>\\n    {\\n public:\\n static_assert(dim == 2, \\\"Only dim==2 is implemented\\\");\\n \\n virtual double value(const Point<dim> &p,\\n const unsigned int /*component*/ = 0) const override\\n \\n {\\n return 4 * Utilities::fixed_power<4>(PI) * std::sin(PI * p[0]) *\\n std::sin(PI * p[1]);\\n      }\\n    };\\n  } // namespace ExactSolution\\n \\n \\n \\n template <int dim>\\n class BiharmonicProblem\\n  {\\n public:\\n    BiharmonicProblem(const unsigned int fe_degree);\\n \\n void run();\\n \\n private:\\n void make_grid();\\n void setup_system();\\n void assemble_system();\\n void solve();\\n void compute_errors();\\n void output_results(const unsigned int iteration) const;\\n \\n Triangulation<dim> triangulation;\\n \\n MappingQ<dim> mapping;\\n \\n const FE_Q<dim>           fe;\\n DoFHandler<dim>           dof_handler;\\n AffineConstraints<double> constraints;\\n \\n SparsityPattern      sparsity_pattern;\\n SparseMatrix<double> system_matrix;\\n \\n Vector<double> solution;\\n Vector<double> system_rhs;\\n  };\\n \\n \\n \\n template <int dim>\\n  BiharmonicProblem<dim>::BiharmonicProblem(const unsigned int fe_degree)\\n    : mapping(1)\\n    , fe(fe_degree)\\n    , dof_handler(triangulation)\\n  {}\\n \\n \\n \\n template <int dim>\\n void BiharmonicProblem<dim>::make_grid()\\n  {\\n GridGenerator::hyper_cube(triangulation, 0., 1.);\\n triangulation.refine_global(1);\\n \\n    std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n              << std::endl\\n              << \\\"Total number of cells: \\\" << triangulation.n_cells()\\n              << std::endl;\\n  }\\n \\n \\n \\n template <int dim>\\n void BiharmonicProblem<dim>::setup_system()\\n  {\\n    dof_handler.distribute_dofs(fe);\\n \\n    std::cout << \\\"   Number of degrees of freedom: \\\" << dof_handler.n_dofs()\\n              << std::endl;\\n \\n    constraints.clear();\\n DoFTools::make_hanging_node_constraints(dof_handler, constraints);\\n \\n VectorTools::interpolate_boundary_values(dof_handler,\\n                                             0,\\n                                             ExactSolution::Solution<dim>(),\\n                                             constraints);\\n    constraints.close();\\n \\n \\n DynamicSparsityPattern dsp(dof_handler.n_dofs());\\n DoFTools::make_flux_sparsity_pattern(dof_handler, dsp, constraints, true);\\n    sparsity_pattern.copy_from(dsp);\\n    system_matrix.reinit(sparsity_pattern);\\n \\n    solution.reinit(dof_handler.n_dofs());\\n    system_rhs.reinit(dof_handler.n_dofs());\\n  }\\n \\n \\n \\n template <int dim>\\n struct ScratchData\\n  {\\n    ScratchData(const Mapping<dim>       &mapping,\\n const FiniteElement<dim> &fe,\\n const unsigned int        quadrature_degree,\\n const UpdateFlags         update_flags,\\n const UpdateFlags         interface_update_flags)\\n      : fe_values(mapping, fe, QGauss<dim>(quadrature_degree), update_flags)\\n      , fe_interface_values(mapping,\\n                            fe,\\n QGauss<dim - 1>(quadrature_degree),\\n                            interface_update_flags)\\n    {}\\n \\n \\n    ScratchData(const ScratchData<dim> &scratch_data)\\n      : fe_values(scratch_data.fe_values.get_mapping(),\\n                  scratch_data.fe_values.get_fe(),\\n                  scratch_data.fe_values.get_quadrature(),\\n                  scratch_data.fe_values.get_update_flags())\\n      , fe_interface_values(scratch_data.fe_values.get_mapping(),\\n                            scratch_data.fe_values.get_fe(),\\n                            scratch_data.fe_interface_values.get_quadrature(),\\n                            scratch_data.fe_interface_values.get_update_flags())\\n    {}\\n \\n FEValues<dim>          fe_values;\\n FEInterfaceValues<dim> fe_interface_values;\\n  };\\n \\n \\n \\n struct CopyData\\n  {\\n    CopyData(const unsigned int dofs_per_cell)\\n      : cell_matrix(dofs_per_cell, dofs_per_cell)\\n      , cell_rhs(dofs_per_cell)\\n      , local_dof_indices(dofs_per_cell)\\n    {}\\n \\n \\n    CopyData(const CopyData &) = default;\\n \\n \\n    CopyData(CopyData &&) = default;\\n \\n \\n    ~CopyData() = default;\\n \\n \\n    CopyData &operator=(const CopyData &) = default;\\n \\n \\n    CopyData &operator=(CopyData &&) = default;\\n \\n \\n struct FaceData\\n    {\\n FullMatrix<double> cell_matrix;\\n      std::vector<types::global_dof_index> joint_dof_indices;\\n    };\\n \\n FullMatrix<double> cell_matrix;\\n Vector<double>                       cell_rhs;\\n    std::vector<types::global_dof_index> local_dof_indices;\\n    std::vector<FaceData>                face_data;\\n  };\\n \\n \\n \\n template <int dim>\\n void BiharmonicProblem<dim>::assemble_system()\\n  {\\n using Iterator = typename DoFHandler<dim>::active_cell_iterator;\\n \\n auto cell_worker = [&](const Iterator   &cell,\\n                           ScratchData<dim> &scratch_data,\\n                           CopyData         &copy_data) {\\n      copy_data.cell_matrix = 0;\\n      copy_data.cell_rhs    = 0;\\n \\n FEValues<dim> &fe_values = scratch_data.fe_values;\\n      fe_values.reinit(cell);\\n \\n      cell->get_dof_indices(copy_data.local_dof_indices);\\n \\n      ExactSolution::RightHandSide<dim> right_hand_side;\\n \\n const unsigned int dofs_per_cell =\\n        scratch_data.fe_values.get_fe().n_dofs_per_cell();\\n \\n for (unsigned int qpoint = 0; qpoint < fe_values.n_quadrature_points;\\n           ++qpoint)\\n        {\\n for (unsigned int i = 0; i < dofs_per_cell; ++i)\\n            {\\n const Tensor<2, dim> &hessian_i =\\n                fe_values.shape_hessian(i, qpoint);\\n \\n for (unsigned int j = 0; j < dofs_per_cell; ++j)\\n                {\\n const Tensor<2, dim> &hessian_j =\\n                    fe_values.shape_hessian(j, qpoint);\\n \\n                  copy_data.cell_matrix(i, j) +=\\n                    scalar_product(hessian_i,   // nabla^2 phi_i(x)\\n                                   hessian_j) * // nabla^2 phi_j(x)\\n                    fe_values.JxW(qpoint);      // dx\\n                }\\n \\n              copy_data.cell_rhs(i) +=\\n                fe_values.shape_value(i, qpoint) * // phi_i(x)\\n                right_hand_side.value(\\n                  fe_values.quadrature_point(qpoint)) * // f(x)\\n                fe_values.JxW(qpoint);                  // dx\\n            }\\n        }\\n    };\\n \\n \\n auto face_worker = [&](const Iterator     &cell,\\n const unsigned int &f,\\n const unsigned int &sf,\\n const Iterator     &ncell,\\n const unsigned int &nf,\\n const unsigned int &nsf,\\n                           ScratchData<dim>   &scratch_data,\\n                           CopyData           &copy_data) {\\n FEInterfaceValues<dim> &fe_interface_values =\\n        scratch_data.fe_interface_values;\\n      fe_interface_values.reinit(cell, f, sf, ncell, nf, nsf);\\n \\n      copy_data.face_data.emplace_back();\\n      CopyData::FaceData &copy_data_face = copy_data.face_data.back();\\n \\n      copy_data_face.joint_dof_indices =\\n        fe_interface_values.get_interface_dof_indices();\\n \\n const unsigned int n_interface_dofs =\\n        fe_interface_values.n_current_interface_dofs();\\n      copy_data_face.cell_matrix.reinit(n_interface_dofs, n_interface_dofs);\\n \\n const unsigned int p = fe.degree;\\n const double       gamma_over_h =\\n std::max((1.0 * p * (p + 1) /\\n                  cell->extent_in_direction(\\n GeometryInfo<dim>::unit_normal_direction[f])),\\n                 (1.0 * p * (p + 1) /\\n                  ncell->extent_in_direction(\\n GeometryInfo<dim>::unit_normal_direction[nf])));\\n \\n for (unsigned int qpoint = 0;\\n           qpoint < fe_interface_values.n_quadrature_points;\\n           ++qpoint)\\n        {\\n const auto &n = fe_interface_values.normal(qpoint);\\n \\n for (unsigned int i = 0; i < n_interface_dofs; ++i)\\n            {\\n const double av_hessian_i_dot_n_dot_n =\\n                (fe_interface_values.average_of_shape_hessians(i, qpoint) * n *\\n                 n);\\n const double jump_grad_i_dot_n =\\n                (fe_interface_values.jump_in_shape_gradients(i, qpoint) * n);\\n \\n for (unsigned int j = 0; j < n_interface_dofs; ++j)\\n                {\\n const double av_hessian_j_dot_n_dot_n =\\n                    (fe_interface_values.average_of_shape_hessians(j, qpoint) *\\n                     n * n);\\n const double jump_grad_j_dot_n =\\n                    (fe_interface_values.jump_in_shape_gradients(j, qpoint) *\\n                     n);\\n \\n                  copy_data_face.cell_matrix(i, j) +=\\n                    (-av_hessian_i_dot_n_dot_n       // - {grad^2 v n n }\\n                       * jump_grad_j_dot_n           // [grad u n]\\n                     - av_hessian_j_dot_n_dot_n      // - {grad^2 u n n }\\n                         * jump_grad_i_dot_n         // [grad v n]\\n                     +                               // +\\n                     gamma_over_h *                  // gamma/h\\n                       jump_grad_i_dot_n *           // [grad v n]\\n                       jump_grad_j_dot_n) *          // [grad u n]\\n                    fe_interface_values.JxW(qpoint); // dx\\n                }\\n            }\\n        }\\n    };\\n \\n \\n auto boundary_worker = [&](const Iterator     &cell,\\n const unsigned int &face_no,\\n                               ScratchData<dim>   &scratch_data,\\n                               CopyData           &copy_data) {\\n FEInterfaceValues<dim> &fe_interface_values =\\n        scratch_data.fe_interface_values;\\n      fe_interface_values.reinit(cell, face_no);\\n const auto &q_points = fe_interface_values.get_quadrature_points();\\n \\n      copy_data.face_data.emplace_back();\\n      CopyData::FaceData &copy_data_face = copy_data.face_data.back();\\n \\n const unsigned int n_dofs =\\n        fe_interface_values.n_current_interface_dofs();\\n      copy_data_face.joint_dof_indices =\\n        fe_interface_values.get_interface_dof_indices();\\n \\n      copy_data_face.cell_matrix.reinit(n_dofs, n_dofs);\\n \\n const std::vector<double> &JxW = fe_interface_values.get_JxW_values();\\n const std::vector<Tensor<1, dim>> &normals =\\n        fe_interface_values.get_normal_vectors();\\n \\n \\n      ExactSolution::Solution<dim> exact_solution;\\n      std::vector<Tensor<1, dim>>  exact_gradients(q_points.size());\\n      exact_solution.gradient_list(q_points, exact_gradients);\\n \\n \\n const unsigned int p = fe.degree;\\n const double       gamma_over_h =\\n        (1.0 * p * (p + 1) /\\n         cell->extent_in_direction(\\n GeometryInfo<dim>::unit_normal_direction[face_no]));\\n \\n for (unsigned int qpoint = 0; qpoint < q_points.size(); ++qpoint)\\n        {\\n const auto &n = normals[qpoint];\\n \\n for (unsigned int i = 0; i < n_dofs; ++i)\\n            {\\n const double av_hessian_i_dot_n_dot_n =\\n                (fe_interface_values.average_of_shape_hessians(i, qpoint) * n *\\n                 n);\\n const double jump_grad_i_dot_n =\\n                (fe_interface_values.jump_in_shape_gradients(i, qpoint) * n);\\n \\n for (unsigned int j = 0; j < n_dofs; ++j)\\n                {\\n const double av_hessian_j_dot_n_dot_n =\\n                    (fe_interface_values.average_of_shape_hessians(j, qpoint) *\\n                     n * n);\\n const double jump_grad_j_dot_n =\\n                    (fe_interface_values.jump_in_shape_gradients(j, qpoint) *\\n                     n);\\n \\n                  copy_data_face.cell_matrix(i, j) +=\\n                    (-av_hessian_i_dot_n_dot_n  // - {grad^2 v n n}\\n                       * jump_grad_j_dot_n      //   [grad u n]\\n                     - av_hessian_j_dot_n_dot_n // - {grad^2 u n n}\\n                         * jump_grad_i_dot_n    //   [grad v n]\\n                     + gamma_over_h             //  gamma/h\\n                         * jump_grad_i_dot_n    // [grad v n]\\n                         * jump_grad_j_dot_n    // [grad u n]\\n                     ) *\\n                    JxW[qpoint]; // dx\\n                }\\n \\n              copy_data.cell_rhs(i) +=\\n                (-av_hessian_i_dot_n_dot_n *       // - {grad^2 v n n }\\n                   (exact_gradients[qpoint] * n)   //   (grad u_exact . n)\\n                 +                                 // +\\n                 gamma_over_h                      //  gamma/h\\n                   * jump_grad_i_dot_n             // [grad v n]\\n                   * (exact_gradients[qpoint] * n) // (grad u_exact . n)\\n                 ) *\\n                JxW[qpoint]; // dx\\n            }\\n        }\\n    };\\n \\n auto copier = [&](const CopyData &copy_data) {\\n      constraints.distribute_local_to_global(copy_data.cell_matrix,\\n                                             copy_data.cell_rhs,\\n                                             copy_data.local_dof_indices,\\n                                             system_matrix,\\n                                             system_rhs);\\n \\n for (const auto &cdf : copy_data.face_data)\\n        {\\n          constraints.distribute_local_to_global(cdf.cell_matrix,\\n                                                 cdf.joint_dof_indices,\\n                                                 system_matrix);\\n        }\\n    };\\n \\n \\n const unsigned int n_gauss_points = dof_handler.get_fe().degree + 1;\\n    ScratchData<dim>   scratch_data(mapping,\\n                                  fe,\\n                                  n_gauss_points,\\n update_values | update_gradients |\\n update_hessians | update_quadrature_points |\\n update_JxW_values,\\n update_values | update_gradients |\\n update_hessians | update_quadrature_points |\\n update_JxW_values | update_normal_vectors);\\n    CopyData           copy_data(dof_handler.get_fe().n_dofs_per_cell());\\n MeshWorker::mesh_loop(dof_handler.begin_active(),\\n                          dof_handler.end(),\\n                          cell_worker,\\n                          copier,\\n                          scratch_data,\\n                          copy_data,\\n MeshWorker::assemble_own_cells |\\n MeshWorker::assemble_boundary_faces |\\n MeshWorker::assemble_own_interior_faces_once,\\n                          boundary_worker,\\n                          face_worker);\\n  }\\n \\n \\n \\n template <int dim>\\n void BiharmonicProblem<dim>::solve()\\n  {\\n    std::cout << \\\"   Solving system...\\\" << std::endl;\\n \\n SparseDirectUMFPACK A_direct;\\n    A_direct.initialize(system_matrix);\\n    A_direct.vmult(solution, system_rhs);\\n \\n    constraints.distribute(solution);\\n  }\\n \\n \\n \\n template <int dim>\\n void BiharmonicProblem<dim>::compute_errors()\\n  {\\n    {\\n Vector<float> norm_per_cell(triangulation.n_active_cells());\\n VectorTools::integrate_difference(mapping,\\n                                        dof_handler,\\n                                        solution,\\n                                        ExactSolution::Solution<dim>(),\\n                                        norm_per_cell,\\n QGauss<dim>(fe.degree + 2),\\n VectorTools::L2_norm);\\n const double error_norm =\\n VectorTools::compute_global_error(triangulation,\\n                                          norm_per_cell,\\n VectorTools::L2_norm);\\n      std::cout << \\\"   Error in the L2 norm           :     \\\" << error_norm\\n                << std::endl;\\n    }\\n \\n    {\\n Vector<float> norm_per_cell(triangulation.n_active_cells());\\n VectorTools::integrate_difference(mapping,\\n                                        dof_handler,\\n                                        solution,\\n                                        ExactSolution::Solution<dim>(),\\n                                        norm_per_cell,\\n QGauss<dim>(fe.degree + 2),\\n VectorTools::H1_seminorm);\\n const double error_norm =\\n VectorTools::compute_global_error(triangulation,\\n                                          norm_per_cell,\\n VectorTools::H1_seminorm);\\n      std::cout << \\\"   Error in the H1 seminorm       : \\\" << error_norm\\n                << std::endl;\\n    }\\n \\n    {\\n const QGauss<dim>            quadrature_formula(fe.degree + 2);\\n      ExactSolution::Solution<dim> exact_solution;\\n Vector<double> error_per_cell(triangulation.n_active_cells());\\n \\n FEValues<dim> fe_values(mapping,\\n                              fe,\\n                              quadrature_formula,\\n update_values | update_hessians |\\n update_quadrature_points | update_JxW_values);\\n \\n const FEValuesExtractors::Scalar scalar(0);\\n const unsigned int               n_q_points = quadrature_formula.size();\\n \\n      std::vector<SymmetricTensor<2, dim>> exact_hessians(n_q_points);\\n      std::vector<Tensor<2, dim>>          hessians(n_q_points);\\n for (auto &cell : dof_handler.active_cell_iterators())\\n        {\\n          fe_values.reinit(cell);\\n          fe_values[scalar].get_function_hessians(solution, hessians);\\n          exact_solution.hessian_list(fe_values.get_quadrature_points(),\\n                                      exact_hessians);\\n \\n double local_error = 0;\\n for (unsigned int q_point = 0; q_point < n_q_points; ++q_point)\\n            {\\n              local_error +=\\n                ((exact_hessians[q_point] - hessians[q_point]).norm_square() *\\n                 fe_values.JxW(q_point));\\n            }\\n          error_per_cell[cell->active_cell_index()] = std::sqrt(local_error);\\n        }\\n \\n const double error_norm =\\n VectorTools::compute_global_error(triangulation,\\n                                          error_per_cell,\\n VectorTools::L2_norm);\\n      std::cout << \\\"   Error in the broken H2 seminorm: \\\" << error_norm\\n                << std::endl;\\n    }\\n  }\\n \\n \\n \\n template <int dim>\\n void\\n  BiharmonicProblem<dim>::output_results(const unsigned int iteration) const\\n {\\n    std::cout << \\\"   Writing graphical output...\\\" << std::endl;\\n \\n DataOut<dim> data_out;\\n \\n    data_out.attach_dof_handler(dof_handler);\\n    data_out.add_data_vector(solution, \\\"solution\\\");\\n    data_out.build_patches();\\n \\n const std::string filename =\\n      (\\\"output_\\\" + Utilities::int_to_string(iteration, 6) + \\\".vtu\\\");\\n    std::ofstream output_vtu(filename);\\n    data_out.write_vtu(output_vtu);\\n  }\\n \\n \\n \\n template <int dim>\\n void BiharmonicProblem<dim>::run()\\n  {\\n    make_grid();\\n \\n const unsigned int n_cycles = 4;\\n for (unsigned int cycle = 0; cycle < n_cycles; ++cycle)\\n      {\\n        std::cout << \\\"Cycle \\\" << cycle << \\\" of \\\" << n_cycles << std::endl;\\n \\n triangulation.refine_global(1);\\n        setup_system();\\n \\n        assemble_system();\\n        solve();\\n \\n        output_results(cycle);\\n \\n        compute_errors();\\n        std::cout << std::endl;\\n      }\\n  }\\n} // namespace Step47\\n \\n \\n \\nint main()\\n{\\n try\\n    {\\n using namespace dealii;\\n using namespace Step47;\\n \\n const unsigned int fe_degree = 2;\\n Assert(fe_degree >= 2,\\n             ExcMessage(\\\"The C0IP formulation for the biharmonic problem \\\"\\n \\\"only works if one uses elements of polynomial \\\"\\n \\\"degree at least 2.\\\"));\\n \\n      BiharmonicProblem<2> biharmonic_problem(fe_degree);\\n      biharmonic_problem.run();\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n \\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n \\n return 0;\\n}\\nDataOutInterface::write_vtuvoid write_vtu(std::ostream &out) constDefinition data_out_base.cc:7692\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nFEInterfaceValues::get_JxW_valuesconst std::vector< double > & get_JxW_values() const\\nFEInterfaceValues::n_quadrature_pointsconst unsigned int n_quadrature_pointsDefinition fe_interface_values.h:1282\\nFEInterfaceValues::n_current_interface_dofsunsigned n_current_interface_dofs() const\\nFEInterfaceValues::get_normal_vectorsconst std::vector< Tensor< 1, spacedim > > & get_normal_vectors() const\\nFEInterfaceValues::get_quadrature_pointsconst std::vector< Point< spacedim > > & get_quadrature_points() const\\nFEInterfaceValues::average_of_shape_hessiansTensor< 2, spacedim > average_of_shape_hessians(const unsigned int interface_dof_index, const unsigned int q_point, const unsigned int component=0) const\\nFEInterfaceValues::JxWdouble JxW(const unsigned int quadrature_point) const\\nFEInterfaceValues::normalTensor< 1, spacedim > normal(const unsigned int q_point_index) const\\nFEInterfaceValues::jump_in_shape_gradientsTensor< 1, spacedim > jump_in_shape_gradients(const unsigned int interface_dof_index, const unsigned int q_point, const unsigned int component=0) const\\nFEInterfaceValues::get_interface_dof_indicesstd::vector< types::global_dof_index > get_interface_dof_indices() const\\nFEValuesBase::get_quadrature_pointsconst std::vector< Point< spacedim > > & get_quadrature_points() const\\nFEValuesBase::get_function_hessiansvoid get_function_hessians(const ReadVector< Number > &fe_function, std::vector< Tensor< 2, spacedim, Number > > &hessians) constDefinition fe_values_base.cc:954\\nFEValuesBase::quadrature_pointconst Point< spacedim > & quadrature_point(const unsigned int q_point) const\\nFEValuesBase::n_quadrature_pointsconst unsigned int n_quadrature_pointsDefinition fe_values_base.h:174\\nFEValuesBase::shape_hessianconst Tensor< 2, spacedim > & shape_hessian(const unsigned int i, const unsigned int q_point) const\\nFEValuesBase::JxWdouble JxW(const unsigned int q_point) const\\nFEValuesBase::shape_valueconst double & shape_value(const unsigned int i, const unsigned int q_point) const\\nSparseDirectUMFPACK::vmultvoid vmult(Vector< double > &dst, const Vector< double > &src) constDefinition sparse_direct.cc:795\\ndof_handler.h\\ndof_tools.h\\ndynamic_sparsity_pattern.h\\nfe_values.h\\nfe_interface_values.h\\nfe_q.h\\nfull_matrix.h\\nfunction.h\\ntria.h\\ngrid_generator.h\\nmapping_q.h\\nmesh_loop.h\\nWorkStream::internal::tbb_no_coloring::runvoid run(const Iterator &begin, const std_cxx20::type_identity_t< Iterator > &end, Worker worker, Copier copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const unsigned int queue_length, const unsigned int chunk_size)Definition work_stream.h:471\\ninternal::FEEvaluationImplHangingNodesRunnerTypes::scalar@ scalar\\ndata_out.h\\nquadrature_lib.h\\nsolver_cg.h\\nsparse_direct.h\\nsparse_matrix.h\\nvector.h\\nvector_tools.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"