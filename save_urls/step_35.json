"[{\"lc\": 1, \"type\": \"constructor\", \"id\": [\"langchain\", \"schema\", \"document\", \"Document\"], \"kwargs\": {\"metadata\": {\"source\": \"https://dealii.org/current/doxygen/deal.II/step_35.html\", \"content_type\": \"text/html\", \"title\": \"The deal.II Library: The step-35 tutorial program\", \"language\": \"en-US\"}, \"page_content\": \"\\n\\n\\n\\n\\n\\n\\n\\n\\nThe deal.II Library: The step-35 tutorial program\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\u00a0Reference documentation for deal.II version 9.6.0\\n\\n\\n\\n\\n\\n\\n\\n\\n\\\\(\\\\newcommand{\\\\dealvcentcolon}{\\\\mathrel{\\\\mathop{:}}}\\\\)\\n\\\\(\\\\newcommand{\\\\dealcoloneq}{\\\\dealvcentcolon\\\\mathrel{\\\\mkern-1.2mu}=}\\\\)\\n\\\\(\\\\newcommand{\\\\jump}[1]{\\\\left[\\\\!\\\\left[ #1 \\\\right]\\\\!\\\\right]}\\\\)\\n\\\\(\\\\newcommand{\\\\average}[1]{\\\\left\\\\{\\\\!\\\\left\\\\{ #1 \\\\right\\\\}\\\\!\\\\right\\\\}}\\\\)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLoading...\\nSearching...\\nNo Matches\\n\\n\\n\\n\\n\\n\\n\\nThe step-35 tutorial program\\n\\n\\nThis tutorial depends on step-22.\\n\\n\\nTable of contents\\n\\n\\n Introduction\\n\\n Motivation \\n Projection methods \\n The Fully Discrete Setting \\n Implementation \\n The Testcase \\n\\n The commented program\\n\\nInclude files\\nRun time parameters\\nEquation data\\nThe NavierStokesProjection class\\n\\n NavierStokesProjection::NavierStokesProjection \\nNavierStokesProjection::create_triangulation_and_dofs\\n NavierStokesProjection::initialize \\n NavierStokesProjection::initialize_*_matrices \\n NavierStokesProjection::run \\nNavierStokesProjection::diffusion_step\\n NavierStokesProjection::assemble_advection_term \\nNavierStokesProjection::projection_step\\n NavierStokesProjection::update_pressure \\n NavierStokesProjection::output_results \\n\\n The main function \\n\\n\\n Results\\n\\n Re = 100 \\n Re = 500 \\n Possibilities for extensions \\n\\n The plain program\\n   \\n\\n\\n This program grew out of a student project by Abner Salgado at Texas A&M University. Most of the work for this program is by him. \\n Introduction \\nMotivation \\nThe purpose of this program is to show how to effectively solve the incompressible time-dependent Navier-Stokes equations. These equations describe the flow of a viscous incompressible fluid and read    \\n\\\\begin{align*}\\n  u_t + u \\\\cdot \\\\nabla u - \\\\nu \\\\Delta u + \\\\nabla p = f, \\\\\\\\\\n  \\\\nabla \\\\cdot u = 0,\\n\\\\end{align*}\\n\\n where \\\\(u\\\\) represents the velocity of the flow and \\\\(p\\\\) the pressure. This system of equations is supplemented by the initial condition   \\n\\\\[\\n  u |_{t=0} = u_0,\\n\\\\]\\n\\n with \\\\(u_0\\\\) sufficiently smooth and solenoidal, and suitable boundary conditions. For instance, an admissible boundary condition, is   \\n\\\\[\\n  u|_{\\\\partial\\\\Omega} = u_b.\\n\\\\]\\n\\n It is possible to prescribe other boundary conditions as well. In the test case that we solve here the boundary is partitioned into two disjoint subsets \\\\(\\\\partial\\\\Omega = \\\\Gamma_1 \\\\cup \\\\Gamma_2\\\\) and we have   \\n\\\\[\\n  u|_{\\\\Gamma_1} = u_b,\\n\\\\]\\n\\n and   \\n\\\\[\\n u\\\\times n|_{\\\\Gamma_2} = 0, \\\\quad p|_{\\\\Gamma_2} = 0\\n\\\\]\\n\\n where \\\\(n\\\\) is the outer unit normal. The boundary conditions on \\\\(\\\\Gamma_2\\\\) are often used to model outflow conditions.\\nIn previous tutorial programs (see for instance step-20 and step-22) we have seen how to solve the time-independent Stokes equations using a Schur complement approach. For the time-dependent case, after time discretization, we would arrive at a system like    \\n\\\\begin{align*}\\n  \\\\frac1\\\\tau u^k - \\\\nu \\\\Delta u^k + \\\\nabla p^k = F^k, \\\\\\\\\\n  \\\\nabla \\\\cdot u^k = 0,\\n\\\\end{align*}\\n\\n where \\\\(\\\\tau\\\\) is the time-step. Although the structure of this system is similar to the Stokes system and thus it could be solved using a Schur complement approach, it turns out that the condition number of the Schur complement is proportional to \\\\(\\\\tau^{-2}\\\\). This makes the system very difficult to solve, and means that for the Navier-Stokes equations, this is not a useful avenue to the solution.\\n Projection methods \\nRather, we need to come up with a different approach to solve the time-dependent Navier-Stokes equations. The difficulty in their solution comes from the fact that the velocity and the pressure are coupled through the constraint   \\n\\\\[\\n  \\\\nabla \\\\cdot u = 0,\\n\\\\]\\n\\n for which the pressure is the Lagrange multiplier. Projection methods aim at decoupling this constraint from the diffusion (Laplace) operator.\\nLet us shortly describe how the projection methods look like in a semi-discrete setting. The objective is to obtain a sequence of velocities \\\\(\\\\{u^k\\\\}\\\\) and pressures \\\\(\\\\{p^k\\\\}\\\\). We will also obtain a sequence \\\\(\\\\{\\\\phi^k\\\\}\\\\) of auxiliary variables. Suppose that from the initial conditions, and an application of a first order method we have found \\\\((u^0,p^0,\\\\phi^0=0)\\\\) and \\\\((u^1,p^1,\\\\phi^1=p^1-p^0)\\\\). Then the projection method consists of the following steps: \\n\\nStep 0: Extrapolation. Define:   \\n\\\\[\\n    u^\\\\star = 2u^k - u^{k-1}, \\\\quad p^\\\\sharp = p^k + \\\\frac43 \\\\phi^k - \\\\frac13 \\\\phi^{k-1}.\\n  \\\\]\\n\\n\\n\\nStep 1: Diffusion step. We find \\\\(u^{k+1}\\\\) that solves the single linear equation          \\n\\\\[\\n    \\\\frac1{2\\\\tau}\\\\left( 3u^{k+1} - 4u^k + u^{k-1} \\\\right)\\n    + u^\\\\star \\\\cdot\\\\nabla u^{k+1} + \\\\frac12 \\\\left( \\\\nabla \\\\cdot u^\\\\star \\\\right) u^{k+1}\\n    -\\\\nu \\\\Delta u^{k+1} + \\\\nabla p^\\\\sharp\\n    = f^{k+1},\\n    \\\\quad\\n    u^{k+1}|_{\\\\Gamma_1} = u_b,\\n    \\\\quad\\n    u^{k+1} \\\\times n|_{\\\\Gamma_2} = 0.\\n  \\\\]\\n\\n\\n\\n\\nStep 2: Projection. Find \\\\(\\\\phi^{k+1}\\\\) that solves       \\n\\\\[\\n    \\\\Delta \\\\phi^{k+1} = \\\\frac3{2\\\\tau} \\\\nabla \\\\cdot u^{k+1},\\n    \\\\quad\\n    \\\\partial_n \\\\phi^{k+1}|_{\\\\Gamma_1} = 0,\\n    \\\\quad\\n    \\\\phi^{k+1}|_{\\\\Gamma_2} = 0\\n  \\\\]\\n\\n\\n\\nStep 3: Pressure correction. Here we have two options: \\n\\nIncremental Method in Standard Form. The pressure is updated by:   \\n\\\\[\\n        p^{k+1} = p^k + \\\\phi^{k+1}.\\n      \\\\]\\n\\n\\n\\nIncremental Method in Rotational Form. In this case   \\n\\\\[\\n        p^{k+1} = p^k + \\\\phi^{k+1} - \\\\nu \\\\nabla \\\\cdot u^{k+1}.\\n      \\\\]\\n\\n\\n\\n\\n\\nWithout going into details, let us remark a few things about the projection methods that we have just described: \\n\\nThe advection term \\\\(u\\\\cdot\\\\nabla u\\\\) is replaced by its skew symmetric form \\n\\\\[\\n    u \\\\cdot \\\\nabla u + \\\\frac12 \\\\left( \\\\nabla\\\\cdot u \\\\right) u.\\n  \\\\]\\n\\n This is consistent with the continuous equation (because \\\\(\\\\nabla\\\\cdot u = 0\\\\), though this is not true pointwise for the discrete solution) and it is needed to guarantee unconditional stability of the time-stepping scheme. Moreover, to linearize the term we use the second order extrapolation \\\\(u^\\\\star\\\\) of \\\\(u^{k+1}\\\\). \\n\\nThe projection step is a realization of the Helmholtz decomposition   \\n\\\\[\\n    L^2(\\\\Omega)^d = H \\\\oplus \\\\nabla H^1_{\\\\Gamma_2}(\\\\Omega),\\n  \\\\]\\n\\n where   \\n\\\\[\\n    H = \\\\left\\\\{ v \\\\in L^2(\\\\Omega)^d:\\\\  \\\\nabla\\\\cdot v =0, \\\\  v\\\\cdot n|_{\\\\Gamma_1} = 0 \\\\right\\\\},\\n  \\\\]\\n\\n and   \\n\\\\[\\n    H^1_{\\\\Gamma_2}(\\\\Omega) = \\\\left\\\\{ q \\\\in H^1(\\\\Omega):\\\\ q|_{\\\\Gamma_2} = 0 \\\\right\\\\}.\\n  \\\\]\\n\\n Indeed, if we use this decomposition on \\\\(u^{k+1}\\\\) we obtain   \\n\\\\[\\n    u^{k+1} = v^{k+1} + \\\\nabla \\\\left( \\\\frac{2\\\\tau}{3}  \\\\phi^{k+1} \\\\right),\\n  \\\\]\\n\\n with \\\\(v^{k+1}\\\\in H\\\\). Taking the divergence of this equation we arrive at the projection equation. \\n\\nThe more accurate of the two variants outlined above is the rotational one. However, the program below implements both variants. Moreover, in the author's experience, the standard form is the one that should be used if, for instance, the viscosity \\\\(\\\\nu\\\\) is variable. \\n\\nThe standard incremental scheme and the rotational incremental scheme were first considered by van Kan in \\n\\nJ. van Kan, \\\"A second-order accurate pressure-correction scheme for viscous incompressible flow\\\", SIAM Journal on Scientific and Statistical Computing, vol. 7, no. 3, pp. 870\\u2013891, 1986 \\n\\nand is analyzed by Guermond in \\n\\nJ.-L. Guermond, \\\"Un r\\u00e9sultat de convergence d\\u2019ordre deux en temps pour\\n                        l\\u2019approximation des \\u00e9quations de Navier\\u2013Stokes par une technique de projection incr\\u00e9mentale\\\", ESAIM: Mathematical Modelling and Numerical Analysis, vol. 33, no. 1, pp. 169\\u2013189, 1999 \\n\\nfor the case \\\\(\\\\nu = 1\\\\). It turns out that this technique suffers from unphysical boundary conditions for the kinematic pressure that lead to reduced rates of convergence. To prevent this, Timmermans et al. proposed in \\n\\nL. Timmermans, P. Minev, and F. Van De Vosse, \\\"An approximate projection scheme for incompressible flow using spectral elements\\\", International Journal for Numerical Methods in Fluids, vol. 22, no. 7, pp. 673\\u2013688, 1996 \\n\\nthe rotational pressure-correction projection method that uses a divergence correction for the kinematic pressure. A thorough analysis for scheme has first been performed in \\n\\nJ.-L. Guermond and J. Shen, \\\"On the error estimates for the rotational pressure-correction projection methods\\\", Mathematics of Computation, vol. 73, no. 248, pp. 1719\\u20131737, 2004 \\n\\nfor the Stokes problem. \\n The Fully Discrete Setting \\nTo obtain a fully discrete setting of the method we, as always, need a variational formulation. There is one subtle issue here given the nature of the boundary conditions. When we multiply the equation by a suitable test function one of the term that arises is   \\n\\\\[\\n  -\\\\nu \\\\int_\\\\Omega \\\\Delta u \\\\cdot v.\\n\\\\]\\n\\n If we, say, had Dirichlet boundary conditions on the whole boundary then after integration by parts we would obtain     \\n\\\\[\\n  -\\\\nu \\\\int_\\\\Omega \\\\Delta u \\\\cdot v = \\\\nu \\\\int_\\\\Omega \\\\nabla u : \\\\nabla v\\n                                    - \\\\int_{\\\\partial\\\\Omega} \\\\partial_n u \\\\cdot v\\n                                    = \\\\nu \\\\int_\\\\Omega \\\\nabla u : \\\\nabla v.\\n\\\\]\\n\\n One of the advantages of this formulation is that it fully decouples the components of the velocity. Moreover, they all share the same system matrix. This can be exploited in the program.\\nHowever, given the nonstandard boundary conditions, to be able to take them into account we need to use the following identity   \\n\\\\[\\n  \\\\Delta u = \\\\nabla\\\\nabla\\\\cdot u - \\\\nabla\\\\times\\\\nabla\\\\times u,\\n\\\\]\\n\\n so that when we integrate by parts and take into account the boundary conditions we obtain    \\n\\\\[\\n  -\\\\nu \\\\int_\\\\Omega \\\\Delta u \\\\cdot v = \\\\nu \\\\int_\\\\Omega \\\\left[ \\\\nabla \\\\cdot u \\\\nabla \\\\cdot v\\n                                    + \\\\nabla \\\\times u \\\\nabla \\\\times v \\\\right],\\n\\\\]\\n\\n which is the form that we would have to use. Notice that this couples the components of the velocity. Moreover, to enforce the boundary condition on the pressure, we need to rewrite     \\n\\\\[\\n  \\\\int_\\\\Omega \\\\nabla p \\\\cdot v = -\\\\int_\\\\Omega p \\\\nabla \\\\cdot v + \\\\int_{\\\\Gamma_1} p v\\\\cdot n\\n                                + \\\\int_{\\\\Gamma_2} p v\\\\cdot n\\n                               = -\\\\int_\\\\Omega p \\\\nabla \\\\cdot v,\\n\\\\]\\n\\n where the boundary integral in \\\\(\\\\Gamma_1\\\\) equals zero given the boundary conditions for the velocity, and the one in \\\\(\\\\Gamma_2\\\\) given the boundary conditions for the pressure.\\nIn the simplified case where the boundary \\\\(\\\\Gamma_2\\\\) is parallel to a coordinate axis, which holds for the testcase that we carry out below, it can actually be shown that    \\n\\\\[\\n  \\\\nu \\\\int_\\\\Omega \\\\nabla u : \\\\nabla v = \\\\nu \\\\int_\\\\Omega \\\\left[ \\\\nabla \\\\cdot u \\\\nabla \\\\cdot v\\n                                    + \\\\nabla \\\\times u \\\\nabla \\\\times v \\\\right].\\n\\\\]\\n\\n This issue is not very often addressed in the literature. For more information the reader can consult, for instance, \\n\\nJ.-L. GUERMOND, L. QUARTAPELLE, On the approximation of the unsteady Navier-Stokes equations by finite element projection methods, Numer. Math., 80 (1998) 207-238 \\n\\nJ.-L. GUERMOND, P. MINEV, J. SHEN, Error analysis of pressure-correction schemes for the Navier-Stokes equations with open boundary conditions, SIAM J. Numer. Anal., 43 1 (2005) 239\\u2013258. \\n\\n Implementation \\nOur implementation of the projection methods follows verbatim the description given above. We must note, however, that as opposed to most other problems that have several solution components, we do not use vector-valued finite elements. Instead, we use separate finite elements the components of the velocity and the pressure, respectively, and use different DoFHandler's for those as well. The main reason for doing this is that, as we see from the description of the scheme, the dim components of the velocity and the pressure are decoupled. As a consequence, the equations for all the velocity components look all the same, have the same system matrix, and can be solved in parallel. Obviously, this approach has also its disadvantages. For instance, we need to keep several DoFHandlers and iterators synchronized when assembling matrices and right hand sides; obtaining quantities that are inherent to vector-valued functions (e.g. divergences) becomes a little awkward, and others.\\n The Testcase \\nThe testcase that we use for this program consists of the flow around a square obstacle. The geometry is as follows:\\n\\nwith \\\\(H=4.1\\\\), making the geometry slightly non-symmetric.\\nWe impose no-slip boundary conditions on both the top and bottom walls and the obstacle. On the left side we have the inflow boundary condition    \\n\\\\[\\n  u =\\n  \\\\left( \\\\begin{array}{c} 4 U_m y (H-y)/H^2 \\\\\\\\ 0 \\\\end{array} \\\\right),\\n\\\\]\\n\\n with \\\\(U_m = 1.5\\\\), i.e. the inflow boundary conditions correspond to Poiseuille flow for this configuration. Finally, on the right vertical wall we impose the condition that the vertical component of the velocity and the pressure should both be zero. The final time \\\\(T=10\\\\).\\n The commented program\\n Include files\\nWe start by including all the necessary deal.II header files and some C++ related ones. Each one of them has been discussed in previous tutorial programs, so we will not get into details here.\\n\\u00a0 #include <deal.II/base/parameter_handler.h>\\n\\u00a0 #include <deal.II/base/point.h>\\n\\u00a0 #include <deal.II/base/function.h>\\n\\u00a0 #include <deal.II/base/quadrature_lib.h>\\n\\u00a0 #include <deal.II/base/multithread_info.h>\\n\\u00a0 #include <deal.II/base/thread_management.h>\\n\\u00a0 #include <deal.II/base/work_stream.h>\\n\\u00a0 #include <deal.II/base/parallel.h>\\n\\u00a0 #include <deal.II/base/utilities.h>\\n\\u00a0 #include <deal.II/base/conditional_ostream.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/lac/vector.h>\\n\\u00a0 #include <deal.II/lac/sparse_matrix.h>\\n\\u00a0 #include <deal.II/lac/dynamic_sparsity_pattern.h>\\n\\u00a0 #include <deal.II/lac/solver_cg.h>\\n\\u00a0 #include <deal.II/lac/precondition.h>\\n\\u00a0 #include <deal.II/lac/solver_gmres.h>\\n\\u00a0 #include <deal.II/lac/sparse_ilu.h>\\n\\u00a0 #include <deal.II/lac/sparse_direct.h>\\n\\u00a0 #include <deal.II/lac/affine_constraints.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/grid/tria.h>\\n\\u00a0 #include <deal.II/grid/grid_generator.h>\\n\\u00a0 #include <deal.II/grid/grid_refinement.h>\\n\\u00a0 #include <deal.II/grid/grid_in.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/dofs/dof_handler.h>\\n\\u00a0 #include <deal.II/dofs/dof_tools.h>\\n\\u00a0 #include <deal.II/dofs/dof_renumbering.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/fe/fe_q.h>\\n\\u00a0 #include <deal.II/fe/fe_values.h>\\n\\u00a0 #include <deal.II/fe/fe_tools.h>\\n\\u00a0 #include <deal.II/fe/fe_system.h>\\n\\u00a0 \\n\\u00a0 #include <deal.II/numerics/matrix_creator.h>\\n\\u00a0 #include <deal.II/numerics/matrix_tools.h>\\n\\u00a0 #include <deal.II/numerics/vector_tools.h>\\n\\u00a0 #include <deal.II/numerics/data_out.h>\\n\\u00a0 \\n\\u00a0 #include <fstream>\\n\\u00a0 #include <cmath>\\n\\u00a0 #include <iostream>\\n\\u00a0 \\nparallelDefinition distributed.h:424\\nFinally this is as in all previous programs:\\n\\u00a0 namespace Step35\\n\\u00a0 {\\n\\u00a0   using namespace dealii;\\n\\u00a0 \\ndealiiDefinition namespace_dealii.h:25\\n Run time parameters\\nSince our method has several parameters that can be fine-tuned we put them into an external file, so that they can be determined at run-time.\\nThis includes, in particular, the formulation of the equation for the auxiliary variable \\\\(\\\\phi\\\\), for which we declare an enum. Next, we declare a class that is going to read and store all the parameters that our program needs to run.\\n\\u00a0   namespace RunTimeParameters\\n\\u00a0   {\\n\\u00a0     enum class Method\\n\\u00a0     {\\n\\u00a0       standard,\\n\\u00a0       rotational\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     class Data_Storage\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       Data_Storage();\\n\\u00a0 \\n\\u00a0       void read_data(const std::string &filename);\\n\\u00a0 \\n\\u00a0       Method form;\\n\\u00a0 \\n\\u00a0       double dt;\\n\\u00a0       double initial_time;\\n\\u00a0       double final_time;\\n\\u00a0 \\n\\u00a0       double Reynolds;\\n\\u00a0 \\n\\u00a0       unsigned int n_global_refines;\\n\\u00a0 \\n\\u00a0       unsigned int pressure_degree;\\n\\u00a0 \\n\\u00a0       unsigned int vel_max_iterations;\\n\\u00a0       unsigned int vel_Krylov_size;\\n\\u00a0       unsigned int vel_off_diagonals;\\n\\u00a0       unsigned int vel_update_prec;\\n\\u00a0       double       vel_eps;\\n\\u00a0       double       vel_diag_strength;\\n\\u00a0 \\n\\u00a0       bool         verbose;\\n\\u00a0       unsigned int output_interval;\\n\\u00a0 \\n\\u00a0     protected:\\n\\u00a0       ParameterHandler prm;\\n\\u00a0     };\\n\\u00a0 \\nParameterHandlerDefinition parameter_handler.h:855\\nIn the constructor of this class we declare all the parameters. The details of how this works have been discussed elsewhere, for example in step-29.\\n\\u00a0     Data_Storage::Data_Storage()\\n\\u00a0       : form(Method::rotational)\\n\\u00a0       , dt(5e-4)\\n\\u00a0       , initial_time(0.)\\n\\u00a0       , final_time(1.)\\n\\u00a0       , Reynolds(1.)\\n\\u00a0       , n_global_refines(0)\\n\\u00a0       , pressure_degree(1)\\n\\u00a0       , vel_max_iterations(1000)\\n\\u00a0       , vel_Krylov_size(30)\\n\\u00a0       , vel_off_diagonals(60)\\n\\u00a0       , vel_update_prec(15)\\n\\u00a0       , vel_eps(1e-12)\\n\\u00a0       , vel_diag_strength(0.01)\\n\\u00a0       , verbose(true)\\n\\u00a0       , output_interval(15)\\n\\u00a0     {\\n\\u00a0       prm.declare_entry(\\\"Method_Form\\\",\\n\\u00a0                         \\\"rotational\\\",\\n\\u00a0                         Patterns::Selection(\\\"rotational|standard\\\"),\\n\\u00a0                         \\\" Used to select the type of method that we are going \\\"\\n\\u00a0                         \\\"to use. \\\");\\n\\u00a0       prm.enter_subsection(\\\"Physical data\\\");\\n\\u00a0       {\\n\\u00a0         prm.declare_entry(\\\"initial_time\\\",\\n\\u00a0                           \\\"0.\\\",\\n\\u00a0                           Patterns::Double(0.),\\n\\u00a0                           \\\" The initial time of the simulation. \\\");\\n\\u00a0         prm.declare_entry(\\\"final_time\\\",\\n\\u00a0                           \\\"1.\\\",\\n\\u00a0                           Patterns::Double(0.),\\n\\u00a0                           \\\" The final time of the simulation. \\\");\\n\\u00a0         prm.declare_entry(\\\"Reynolds\\\",\\n\\u00a0                           \\\"1.\\\",\\n\\u00a0                           Patterns::Double(0.),\\n\\u00a0                           \\\" The Reynolds number. \\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Time step data\\\");\\n\\u00a0       {\\n\\u00a0         prm.declare_entry(\\\"dt\\\",\\n\\u00a0                           \\\"5e-4\\\",\\n\\u00a0                           Patterns::Double(0.),\\n\\u00a0                           \\\" The time step size. \\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Space discretization\\\");\\n\\u00a0       {\\n\\u00a0         prm.declare_entry(\\\"n_of_refines\\\",\\n\\u00a0                           \\\"0\\\",\\n\\u00a0                           Patterns::Integer(0, 15),\\n\\u00a0                           \\\" The number of global refines we do on the mesh. \\\");\\n\\u00a0         prm.declare_entry(\\\"pressure_fe_degree\\\",\\n\\u00a0                           \\\"1\\\",\\n\\u00a0                           Patterns::Integer(1, 5),\\n\\u00a0                           \\\" The polynomial degree for the pressure space. \\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Data solve velocity\\\");\\n\\u00a0       {\\n\\u00a0         prm.declare_entry(\\n\\u00a0           \\\"max_iterations\\\",\\n\\u00a0           \\\"1000\\\",\\n\\u00a0           Patterns::Integer(1, 1000),\\n\\u00a0           \\\" The maximal number of iterations GMRES must make. \\\");\\n\\u00a0         prm.declare_entry(\\\"eps\\\",\\n\\u00a0                           \\\"1e-12\\\",\\n\\u00a0                           Patterns::Double(0.),\\n\\u00a0                           \\\" The stopping criterion. \\\");\\n\\u00a0         prm.declare_entry(\\\"Krylov_size\\\",\\n\\u00a0                           \\\"30\\\",\\n\\u00a0                           Patterns::Integer(1),\\n\\u00a0                           \\\" The size of the Krylov subspace to be used. \\\");\\n\\u00a0         prm.declare_entry(\\\"off_diagonals\\\",\\n\\u00a0                           \\\"60\\\",\\n\\u00a0                           Patterns::Integer(0),\\n\\u00a0                           \\\" The number of off-diagonal elements ILU must \\\"\\n\\u00a0                           \\\"compute. \\\");\\n\\u00a0         prm.declare_entry(\\\"diag_strength\\\",\\n\\u00a0                           \\\"0.01\\\",\\n\\u00a0                           Patterns::Double(0.),\\n\\u00a0                           \\\" Diagonal strengthening coefficient. \\\");\\n\\u00a0         prm.declare_entry(\\\"update_prec\\\",\\n\\u00a0                           \\\"15\\\",\\n\\u00a0                           Patterns::Integer(1),\\n\\u00a0                           \\\" This number indicates how often we need to \\\"\\n\\u00a0                           \\\"update the preconditioner\\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.declare_entry(\\\"verbose\\\",\\n\\u00a0                         \\\"true\\\",\\n\\u00a0                         Patterns::Bool(),\\n\\u00a0                         \\\" This indicates whether the output of the solution \\\"\\n\\u00a0                         \\\"process should be verbose. \\\");\\n\\u00a0 \\n\\u00a0       prm.declare_entry(\\\"output_interval\\\",\\n\\u00a0                         \\\"1\\\",\\n\\u00a0                         Patterns::Integer(1),\\n\\u00a0                         \\\" This indicates between how many time steps we print \\\"\\n\\u00a0                         \\\"the solution. \\\");\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0     void Data_Storage::read_data(const std::string &filename)\\n\\u00a0     {\\n\\u00a0       std::ifstream file(filename);\\n\\u00a0       AssertThrow(file, ExcFileNotOpen(filename));\\n\\u00a0 \\n\\u00a0       prm.parse_input(file);\\n\\u00a0 \\n\\u00a0       if (prm.get(\\\"Method_Form\\\") == std::string(\\\"rotational\\\"))\\n\\u00a0         form = Method::rotational;\\n\\u00a0       else\\n\\u00a0         form = Method::standard;\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Physical data\\\");\\n\\u00a0       {\\n\\u00a0         initial_time = prm.get_double(\\\"initial_time\\\");\\n\\u00a0         final_time   = prm.get_double(\\\"final_time\\\");\\n\\u00a0         Reynolds     = prm.get_double(\\\"Reynolds\\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Time step data\\\");\\n\\u00a0       {\\n\\u00a0         dt = prm.get_double(\\\"dt\\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Space discretization\\\");\\n\\u00a0       {\\n\\u00a0         n_global_refines = prm.get_integer(\\\"n_of_refines\\\");\\n\\u00a0         pressure_degree  = prm.get_integer(\\\"pressure_fe_degree\\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       prm.enter_subsection(\\\"Data solve velocity\\\");\\n\\u00a0       {\\n\\u00a0         vel_max_iterations = prm.get_integer(\\\"max_iterations\\\");\\n\\u00a0         vel_eps            = prm.get_double(\\\"eps\\\");\\n\\u00a0         vel_Krylov_size    = prm.get_integer(\\\"Krylov_size\\\");\\n\\u00a0         vel_off_diagonals  = prm.get_integer(\\\"off_diagonals\\\");\\n\\u00a0         vel_diag_strength  = prm.get_double(\\\"diag_strength\\\");\\n\\u00a0         vel_update_prec    = prm.get_integer(\\\"update_prec\\\");\\n\\u00a0       }\\n\\u00a0       prm.leave_subsection();\\n\\u00a0 \\n\\u00a0       verbose = prm.get_bool(\\\"verbose\\\");\\n\\u00a0 \\n\\u00a0       output_interval = prm.get_integer(\\\"output_interval\\\");\\n\\u00a0     }\\n\\u00a0   } // namespace RunTimeParameters\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nPatterns::BoolDefinition patterns.h:980\\nPatterns::DoubleDefinition patterns.h:291\\nPatterns::IntegerDefinition patterns.h:188\\nPatterns::SelectionDefinition patterns.h:381\\nAssertThrow#define AssertThrow(cond, exc)Definition exceptions.h:1739\\n Equation data\\nIn the next namespace, we declare the initial and boundary conditions:\\n\\u00a0   namespace EquationData\\n\\u00a0   {\\nAs we have chosen a completely decoupled formulation, we will not take advantage of deal.II's capabilities to handle vector valued problems. We do, however, want to use an interface for the equation data that is somehow dimension independent. To be able to do that, our functions should be able to know on which spatial component we are currently working, and we should be able to have a common interface to do that. The following class is an attempt in that direction.\\n\\u00a0     template <int dim>\\n\\u00a0     class MultiComponentFunction : public Function<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       MultiComponentFunction(const double initial_time = 0.);\\n\\u00a0       void set_component(const unsigned int d);\\n\\u00a0 \\n\\u00a0     protected:\\n\\u00a0       unsigned int comp;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     MultiComponentFunction<dim>::MultiComponentFunction(\\n\\u00a0       const double initial_time)\\n\\u00a0       : Function<dim>(1, initial_time)\\n\\u00a0       , comp(0)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     void MultiComponentFunction<dim>::set_component(const unsigned int d)\\n\\u00a0     {\\n\\u00a0       Assert(d < dim, ExcIndexRange(d, 0, dim));\\n\\u00a0       comp = d;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0 \\nFunctionDefinition function.h:152\\nint\\nAssert#define Assert(cond, exc)Definition exceptions.h:1638\\nWith this class defined, we declare classes that describe the boundary conditions for velocity and pressure:\\n\\u00a0     template <int dim>\\n\\u00a0     class Velocity : public MultiComponentFunction<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       Velocity(const double initial_time = 0.0);\\n\\u00a0 \\n\\u00a0       virtual double value(const Point<dim>  &p,\\n\\u00a0                            const unsigned int component = 0) const override;\\n\\u00a0 \\n\\u00a0       virtual void value_list(const std::vector<Point<dim>> &points,\\n\\u00a0                               std::vector<double>           &values,\\n\\u00a0                               const unsigned int component = 0) const override;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     Velocity<dim>::Velocity(const double initial_time)\\n\\u00a0       : MultiComponentFunction<dim>(initial_time)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     void Velocity<dim>::value_list(const std::vector<Point<dim>> &points,\\n\\u00a0                                    std::vector<double>           &values,\\n\\u00a0                                    const unsigned int) const\\n\\u00a0     {\\n\\u00a0       const unsigned int n_points = points.size();\\n\\u00a0       AssertDimension(values.size(), n_points);\\n\\u00a0       for (unsigned int i = 0; i < n_points; ++i)\\n\\u00a0         values[i] = Velocity<dim>::value(points[i]);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     double Velocity<dim>::value(const Point<dim> &p, const unsigned int) const\\n\\u00a0     {\\n\\u00a0       if (this->comp == 0)\\n\\u00a0         {\\n\\u00a0           const double Um = 1.5;\\n\\u00a0           const double H  = 4.1;\\n\\u00a0           return 4. * Um * p[1] * (H - p[1]) / (H * H);\\n\\u00a0         }\\n\\u00a0       else\\n\\u00a0         return 0.;\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     class Pressure : public Function<dim>\\n\\u00a0     {\\n\\u00a0     public:\\n\\u00a0       Pressure(const double initial_time = 0.0);\\n\\u00a0 \\n\\u00a0       virtual double value(const Point<dim>  &p,\\n\\u00a0                            const unsigned int component = 0) const override;\\n\\u00a0 \\n\\u00a0       virtual void value_list(const std::vector<Point<dim>> &points,\\n\\u00a0                               std::vector<double>           &values,\\n\\u00a0                               const unsigned int component = 0) const override;\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     Pressure<dim>::Pressure(const double initial_time)\\n\\u00a0       : Function<dim>(1, initial_time)\\n\\u00a0     {}\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     double Pressure<dim>::value(const Point<dim>  &p,\\n\\u00a0                                 const unsigned int component) const\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       AssertIndexRange(component, 1);\\n\\u00a0       return 25. - p[0];\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     template <int dim>\\n\\u00a0     void Pressure<dim>::value_list(const std::vector<Point<dim>> &points,\\n\\u00a0                                    std::vector<double>           &values,\\n\\u00a0                                    const unsigned int component) const\\n\\u00a0     {\\n\\u00a0       (void)component;\\n\\u00a0       AssertIndexRange(component, 1);\\n\\u00a0       const unsigned int n_points = points.size();\\n\\u00a0       AssertDimension(values.size(), n_points);\\n\\u00a0       for (unsigned int i = 0; i < n_points; ++i)\\n\\u00a0         values[i] = Pressure<dim>::value(points[i]);\\n\\u00a0     }\\n\\u00a0   } // namespace EquationData\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nFunction::value_listvirtual void value_list(const std::vector< Point< dim > > &points, std::vector< RangeNumberType > &values, const unsigned int component=0) const\\nFunction::valuevirtual RangeNumberType value(const Point< dim > &p, const unsigned int component=0) const\\nPointDefinition point.h:111\\nAssertDimension#define AssertDimension(dim1, dim2)Definition exceptions.h:1985\\nAssertIndexRange#define AssertIndexRange(index, range)Definition exceptions.h:2053\\ninternal::EvaluatorQuantity::value@ value\\nstdSTL namespace.\\n The NavierStokesProjection class\\nNow for the main class of the program. It implements the various versions of the projection method for Navier-Stokes equations. The names for all the methods and member variables should be self-explanatory, taking into account the implementation details given in the introduction.\\n\\u00a0   template <int dim>\\n\\u00a0   class NavierStokesProjection\\n\\u00a0   {\\n\\u00a0   public:\\n\\u00a0     NavierStokesProjection(const RunTimeParameters::Data_Storage &data);\\n\\u00a0 \\n\\u00a0     void run(const bool verbose = false, const unsigned int n_plots = 10);\\n\\u00a0 \\n\\u00a0   protected:\\n\\u00a0     RunTimeParameters::Method type;\\n\\u00a0 \\n\\u00a0     const unsigned int deg;\\n\\u00a0     const double       dt;\\n\\u00a0     const double       t_0;\\n\\u00a0     const double       T;\\n\\u00a0     const double       Re;\\n\\u00a0 \\n\\u00a0     EquationData::Velocity<dim>               vel_exact;\\n\\u00a0     std::map<types::global_dof_index, double> boundary_values;\\n\\u00a0     std::vector<types::boundary_id>           boundary_ids;\\n\\u00a0 \\n\\u00a0     Triangulation<dim> triangulation;\\n\\u00a0 \\n\\u00a0     const FE_Q<dim> fe_velocity;\\n\\u00a0     const FE_Q<dim> fe_pressure;\\n\\u00a0 \\n\\u00a0     DoFHandler<dim> dof_handler_velocity;\\n\\u00a0     DoFHandler<dim> dof_handler_pressure;\\n\\u00a0 \\n\\u00a0     const QGauss<dim> quadrature_pressure;\\n\\u00a0     const QGauss<dim> quadrature_velocity;\\n\\u00a0 \\n\\u00a0     SparsityPattern sparsity_pattern_velocity;\\n\\u00a0     SparsityPattern sparsity_pattern_pressure;\\n\\u00a0     SparsityPattern sparsity_pattern_pres_vel;\\n\\u00a0 \\n\\u00a0     SparseMatrix<double> vel_Laplace_plus_Mass;\\n\\u00a0     SparseMatrix<double> vel_it_matrix[dim];\\n\\u00a0     SparseMatrix<double> vel_Mass;\\n\\u00a0     SparseMatrix<double> vel_Laplace;\\n\\u00a0     SparseMatrix<double> vel_Advection;\\n\\u00a0     SparseMatrix<double> pres_Laplace;\\n\\u00a0     SparseMatrix<double> pres_Mass;\\n\\u00a0     SparseMatrix<double> pres_Diff[dim];\\n\\u00a0     SparseMatrix<double> pres_iterative;\\n\\u00a0 \\n\\u00a0     Vector<double> pres_n;\\n\\u00a0     Vector<double> pres_n_minus_1;\\n\\u00a0     Vector<double> phi_n;\\n\\u00a0     Vector<double> phi_n_minus_1;\\n\\u00a0     Vector<double> u_n[dim];\\n\\u00a0     Vector<double> u_n_minus_1[dim];\\n\\u00a0     Vector<double> u_star[dim];\\n\\u00a0     Vector<double> force[dim];\\n\\u00a0     Vector<double> v_tmp;\\n\\u00a0     Vector<double> pres_tmp;\\n\\u00a0     Vector<double> rot_u;\\n\\u00a0 \\n\\u00a0     SparseILU<double>   prec_velocity[dim];\\n\\u00a0     SparseILU<double>   prec_pres_Laplace;\\n\\u00a0     SparseDirectUMFPACK prec_mass;\\n\\u00a0     SparseDirectUMFPACK prec_vel_mass;\\n\\u00a0 \\n\\u00a0     DeclException2(ExcInvalidTimeStep,\\n\\u00a0                    double,\\n\\u00a0                    double,\\n\\u00a0                    << \\\" The time step \\\" << arg1 << \\\" is out of range.\\\"\\n\\u00a0                    << std::endl\\n\\u00a0                    << \\\" The permitted range is (0,\\\" << arg2 << ']');\\n\\u00a0 \\n\\u00a0     void create_triangulation_and_dofs(const unsigned int n_refines);\\n\\u00a0 \\n\\u00a0     void initialize();\\n\\u00a0 \\n\\u00a0     void interpolate_velocity();\\n\\u00a0 \\n\\u00a0     void diffusion_step(const bool reinit_prec);\\n\\u00a0 \\n\\u00a0     void projection_step(const bool reinit_prec);\\n\\u00a0 \\n\\u00a0     void update_pressure(const bool reinit_prec);\\n\\u00a0 \\n\\u00a0   private:\\n\\u00a0     unsigned int vel_max_its;\\n\\u00a0     unsigned int vel_Krylov_size;\\n\\u00a0     unsigned int vel_off_diagonals;\\n\\u00a0     unsigned int vel_update_prec;\\n\\u00a0     double       vel_eps;\\n\\u00a0     double       vel_diag_strength;\\n\\u00a0 \\n\\u00a0     void initialize_velocity_matrices();\\n\\u00a0 \\n\\u00a0     void initialize_pressure_matrices();\\n\\u00a0 \\nDoFHandlerDefinition dof_handler.h:317\\nFE_QDefinition fe_q.h:554\\nQGaussDefinition quadrature_lib.h:40\\nSparseDirectUMFPACKDefinition sparse_direct.h:92\\nSparseILUDefinition sparse_ilu.h:60\\nSparseMatrixDefinition sparse_matrix.h:520\\nSparsityPatternDefinition sparsity_pattern.h:343\\nTriangulationDefinition tria.h:1323\\nVectorDefinition vector.h:120\\nDeclException2#define DeclException2(Exception2, type1, type2, outsequence)Definition exceptions.h:539\\ntriangulationconst ::parallel::distributed::Triangulation< dim, spacedim > * triangulationDefinition p4est_wrappers.cc:68\\nThe next few structures and functions are for doing various things in parallel. They follow the scheme laid out in Parallel computing with multiple processors accessing shared memory, using the WorkStream class. As explained there, this requires us to declare two structures for each of the assemblers, a per-task data and a scratch data structure. These are then handed over to functions that assemble local contributions and that copy these local contributions to the global objects.\\nOne of the things that are specific to this program is that we don't just have a single DoFHandler object that represents both the velocities and the pressure, but we use individual DoFHandler objects for these two kinds of variables. We pay for this optimization when we want to assemble terms that involve both variables, such as the divergence of the velocity and the gradient of the pressure, times the respective test functions. When doing so, we can't just anymore use a single FEValues object, but rather we need two, and they need to be initialized with cell iterators that point to the same cell in the triangulation but different DoFHandlers.\\nTo do this in practice, we declare a \\\"synchronous\\\" iterator \\u2013 an object that internally consists of several (in our case two) iterators, and each time the synchronous iteration is moved forward one step, each of the iterators stored internally is moved forward one step as well, thereby always staying in sync. As it so happens, there is a deal.II class that facilitates this sort of thing. (What is important here is to know that two DoFHandler objects built on the same triangulation will walk over the cells of the triangulation in the same order.)\\n\\u00a0     using IteratorTuple =\\n\\u00a0       std::tuple<typename DoFHandler<dim>::active_cell_iterator,\\n\\u00a0                  typename DoFHandler<dim>::active_cell_iterator>;\\n\\u00a0 \\n\\u00a0     using IteratorPair = SynchronousIterators<IteratorTuple>;\\n\\u00a0 \\n\\u00a0     void initialize_gradient_operator();\\n\\u00a0 \\n\\u00a0     struct InitGradPerTaskData\\n\\u00a0     {\\n\\u00a0       unsigned int                         d;\\n\\u00a0       unsigned int                         vel_dpc;\\n\\u00a0       unsigned int                         pres_dpc;\\n\\u00a0       FullMatrix<double>                   local_grad;\\n\\u00a0       std::vector<types::global_dof_index> vel_local_dof_indices;\\n\\u00a0       std::vector<types::global_dof_index> pres_local_dof_indices;\\n\\u00a0 \\n\\u00a0       InitGradPerTaskData(const unsigned int dd,\\n\\u00a0                           const unsigned int vdpc,\\n\\u00a0                           const unsigned int pdpc)\\n\\u00a0         : d(dd)\\n\\u00a0         , vel_dpc(vdpc)\\n\\u00a0         , pres_dpc(pdpc)\\n\\u00a0         , local_grad(vdpc, pdpc)\\n\\u00a0         , vel_local_dof_indices(vdpc)\\n\\u00a0         , pres_local_dof_indices(pdpc)\\n\\u00a0       {}\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     struct InitGradScratchData\\n\\u00a0     {\\n\\u00a0       unsigned int  nqp;\\n\\u00a0       FEValues<dim> fe_val_vel;\\n\\u00a0       FEValues<dim> fe_val_pres;\\n\\u00a0       InitGradScratchData(const FE_Q<dim>   &fe_v,\\n\\u00a0                           const FE_Q<dim>   &fe_p,\\n\\u00a0                           const QGauss<dim> &quad,\\n\\u00a0                           const UpdateFlags  flags_v,\\n\\u00a0                           const UpdateFlags  flags_p)\\n\\u00a0         : nqp(quad.size())\\n\\u00a0         , fe_val_vel(fe_v, quad, flags_v)\\n\\u00a0         , fe_val_pres(fe_p, quad, flags_p)\\n\\u00a0       {}\\n\\u00a0       InitGradScratchData(const InitGradScratchData &data)\\n\\u00a0         : nqp(data.nqp)\\n\\u00a0         , fe_val_vel(data.fe_val_vel.get_fe(),\\n\\u00a0                      data.fe_val_vel.get_quadrature(),\\n\\u00a0                      data.fe_val_vel.get_update_flags())\\n\\u00a0         , fe_val_pres(data.fe_val_pres.get_fe(),\\n\\u00a0                       data.fe_val_pres.get_quadrature(),\\n\\u00a0                       data.fe_val_pres.get_update_flags())\\n\\u00a0       {}\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     void assemble_one_cell_of_gradient(const IteratorPair  &SI,\\n\\u00a0                                        InitGradScratchData &scratch,\\n\\u00a0                                        InitGradPerTaskData &data);\\n\\u00a0 \\n\\u00a0     void copy_gradient_local_to_global(const InitGradPerTaskData &data);\\n\\u00a0 \\nFEValuesDefinition fe_values.h:63\\nFullMatrixDefinition full_matrix.h:79\\nDoFHandler::active_cell_iteratortypename ActiveSelector::active_cell_iterator active_cell_iteratorDefinition dof_handler.h:440\\nUpdateFlagsUpdateFlagsDefinition fe_update_flags.h:64\\nSynchronousIteratorsDefinition synchronous_iterator.h:50\\nThe same general layout also applies to the following classes and functions implementing the assembly of the advection term:\\n\\u00a0     void assemble_advection_term();\\n\\u00a0 \\n\\u00a0     struct AdvectionPerTaskData\\n\\u00a0     {\\n\\u00a0       FullMatrix<double>                   local_advection;\\n\\u00a0       std::vector<types::global_dof_index> local_dof_indices;\\n\\u00a0       AdvectionPerTaskData(const unsigned int dpc)\\n\\u00a0         : local_advection(dpc, dpc)\\n\\u00a0         , local_dof_indices(dpc)\\n\\u00a0       {}\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     struct AdvectionScratchData\\n\\u00a0     {\\n\\u00a0       unsigned int                nqp;\\n\\u00a0       unsigned int                dpc;\\n\\u00a0       std::vector<Point<dim>>     u_star_local;\\n\\u00a0       std::vector<Tensor<1, dim>> grad_u_star;\\n\\u00a0       std::vector<double>         u_star_tmp;\\n\\u00a0       FEValues<dim>               fe_val;\\n\\u00a0       AdvectionScratchData(const FE_Q<dim>   &fe,\\n\\u00a0                            const QGauss<dim> &quad,\\n\\u00a0                            const UpdateFlags  flags)\\n\\u00a0         : nqp(quad.size())\\n\\u00a0         , dpc(fe.n_dofs_per_cell())\\n\\u00a0         , u_star_local(nqp)\\n\\u00a0         , grad_u_star(nqp)\\n\\u00a0         , u_star_tmp(nqp)\\n\\u00a0         , fe_val(fe, quad, flags)\\n\\u00a0       {}\\n\\u00a0 \\n\\u00a0       AdvectionScratchData(const AdvectionScratchData &data)\\n\\u00a0         : nqp(data.nqp)\\n\\u00a0         , dpc(data.dpc)\\n\\u00a0         , u_star_local(nqp)\\n\\u00a0         , grad_u_star(nqp)\\n\\u00a0         , u_star_tmp(nqp)\\n\\u00a0         , fe_val(data.fe_val.get_fe(),\\n\\u00a0                  data.fe_val.get_quadrature(),\\n\\u00a0                  data.fe_val.get_update_flags())\\n\\u00a0       {}\\n\\u00a0     };\\n\\u00a0 \\n\\u00a0     void assemble_one_cell_of_advection(\\n\\u00a0       const typename DoFHandler<dim>::active_cell_iterator &cell,\\n\\u00a0       AdvectionScratchData                                 &scratch,\\n\\u00a0       AdvectionPerTaskData                                 &data);\\n\\u00a0 \\n\\u00a0     void copy_advection_local_to_global(const AdvectionPerTaskData &data);\\n\\u00a0 \\nThe final few functions implement the diffusion solve as well as postprocessing the output, including computing the curl of the velocity:\\n\\u00a0     void diffusion_component_solve(const unsigned int d);\\n\\u00a0 \\n\\u00a0     void output_results(const unsigned int step);\\n\\u00a0 \\n\\u00a0     void assemble_vorticity(const bool reinit_prec);\\n\\u00a0   };\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n NavierStokesProjection::NavierStokesProjection \\nIn the constructor, we just read all the data from the Data_Storage object that is passed as an argument, verify that the data we read is reasonable and, finally, create the triangulation and load the initial data.\\n\\u00a0   template <int dim>\\n\\u00a0   NavierStokesProjection<dim>::NavierStokesProjection(\\n\\u00a0     const RunTimeParameters::Data_Storage &data)\\n\\u00a0     : type(data.form)\\n\\u00a0     , deg(data.pressure_degree)\\n\\u00a0     , dt(data.dt)\\n\\u00a0     , t_0(data.initial_time)\\n\\u00a0     , T(data.final_time)\\n\\u00a0     , Re(data.Reynolds)\\n\\u00a0     , vel_exact(data.initial_time)\\n\\u00a0     , fe_velocity(deg + 1)\\n\\u00a0     , fe_pressure(deg)\\n\\u00a0     , dof_handler_velocity(triangulation)\\n\\u00a0     , dof_handler_pressure(triangulation)\\n\\u00a0     , quadrature_pressure(deg + 1)\\n\\u00a0     , quadrature_velocity(deg + 2)\\n\\u00a0     , vel_max_its(data.vel_max_iterations)\\n\\u00a0     , vel_Krylov_size(data.vel_Krylov_size)\\n\\u00a0     , vel_off_diagonals(data.vel_off_diagonals)\\n\\u00a0     , vel_update_prec(data.vel_update_prec)\\n\\u00a0     , vel_eps(data.vel_eps)\\n\\u00a0     , vel_diag_strength(data.vel_diag_strength)\\n\\u00a0   {\\n\\u00a0     if (deg < 1)\\n\\u00a0       std::cout\\n\\u00a0         << \\\" WARNING: The chosen pair of finite element spaces is not stable.\\\"\\n\\u00a0         << std::endl\\n\\u00a0         << \\\" The obtained results will be nonsense\\\" << std::endl;\\n\\u00a0 \\n\\u00a0     AssertThrow(!((dt <= 0.) || (dt > .5 * T)), ExcInvalidTimeStep(dt, .5 * T));\\n\\u00a0 \\n\\u00a0     create_triangulation_and_dofs(data.n_global_refines);\\n\\u00a0     initialize();\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n NavierStokesProjection::create_triangulation_and_dofs\\nThe method that creates the triangulation and refines it the needed number of times. After creating the triangulation, it creates the mesh dependent data, i.e. it distributes degrees of freedom and renumbers them, and initializes the matrices and vectors that we will use.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::create_triangulation_and_dofs(\\n\\u00a0     const unsigned int n_refines)\\n\\u00a0   {\\n\\u00a0     GridIn<dim> grid_in;\\n\\u00a0     grid_in.attach_triangulation(triangulation);\\n\\u00a0 \\n\\u00a0     {\\n\\u00a0       std::string   filename = \\\"nsbench2.inp\\\";\\n\\u00a0       std::ifstream file(filename);\\n\\u00a0       Assert(file, ExcFileNotOpen(filename));\\n\\u00a0       grid_in.read_ucd(file);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     std::cout << \\\"Number of refines = \\\" << n_refines << std::endl;\\n\\u00a0     triangulation.refine_global(n_refines);\\n\\u00a0     std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n\\u00a0               << std::endl;\\n\\u00a0 \\n\\u00a0     boundary_ids = triangulation.get_boundary_ids();\\n\\u00a0 \\n\\u00a0     dof_handler_velocity.distribute_dofs(fe_velocity);\\n\\u00a0     DoFRenumbering::boost::Cuthill_McKee(dof_handler_velocity);\\n\\u00a0     dof_handler_pressure.distribute_dofs(fe_pressure);\\n\\u00a0     DoFRenumbering::boost::Cuthill_McKee(dof_handler_pressure);\\n\\u00a0 \\n\\u00a0     initialize_velocity_matrices();\\n\\u00a0     initialize_pressure_matrices();\\n\\u00a0     initialize_gradient_operator();\\n\\u00a0 \\n\\u00a0     pres_n.reinit(dof_handler_pressure.n_dofs());\\n\\u00a0     pres_n_minus_1.reinit(dof_handler_pressure.n_dofs());\\n\\u00a0     phi_n.reinit(dof_handler_pressure.n_dofs());\\n\\u00a0     phi_n_minus_1.reinit(dof_handler_pressure.n_dofs());\\n\\u00a0     pres_tmp.reinit(dof_handler_pressure.n_dofs());\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         u_n[d].reinit(dof_handler_velocity.n_dofs());\\n\\u00a0         u_n_minus_1[d].reinit(dof_handler_velocity.n_dofs());\\n\\u00a0         u_star[d].reinit(dof_handler_velocity.n_dofs());\\n\\u00a0         force[d].reinit(dof_handler_velocity.n_dofs());\\n\\u00a0       }\\n\\u00a0     v_tmp.reinit(dof_handler_velocity.n_dofs());\\n\\u00a0     rot_u.reinit(dof_handler_velocity.n_dofs());\\n\\u00a0 \\n\\u00a0     std::cout << \\\"dim (X_h) = \\\" << (dof_handler_velocity.n_dofs() * dim) \\n\\u00a0               << std::endl                                               \\n\\u00a0               << \\\"dim (M_h) = \\\" << dof_handler_pressure.n_dofs()         \\n\\u00a0               << std::endl                                               \\n\\u00a0               << \\\"Re        = \\\" << Re << std::endl                       \\n\\u00a0               << std::endl;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nGridInDefinition grid_in.h:311\\nGridIn::attach_triangulationvoid attach_triangulation(Triangulation< dim, spacedim > &tria)Definition grid_in.cc:153\\nTriangulation::n_active_cellsunsigned int n_active_cells() const\\nTriangulation::refine_globalvoid refine_global(const unsigned int times=1)\\nparallel::TriangulationBase::get_boundary_idsvirtual std::vector< types::boundary_id > get_boundary_ids() const overrideDefinition tria_base.cc:375\\nDoFRenumbering::boost::Cuthill_McKeevoid Cuthill_McKee(DoFHandler< dim, spacedim > &dof_handler, const bool reversed_numbering=false, const bool use_constraints=false)Definition dof_renumbering.cc:129\\n NavierStokesProjection::initialize \\nThis method creates the constant matrices and loads the initial data\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::initialize()\\n\\u00a0   {\\n\\u00a0     vel_Laplace_plus_Mass = 0.;\\n\\u00a0     vel_Laplace_plus_Mass.add(1. / Re, vel_Laplace);\\n\\u00a0     vel_Laplace_plus_Mass.add(1.5 / dt, vel_Mass);\\n\\u00a0 \\n\\u00a0     EquationData::Pressure<dim> pres(t_0);\\n\\u00a0     VectorTools::interpolate(dof_handler_pressure, pres, pres_n_minus_1);\\n\\u00a0     pres.advance_time(dt);\\n\\u00a0     VectorTools::interpolate(dof_handler_pressure, pres, pres_n);\\n\\u00a0     phi_n         = 0.;\\n\\u00a0     phi_n_minus_1 = 0.;\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         vel_exact.set_time(t_0);\\n\\u00a0         vel_exact.set_component(d);\\n\\u00a0         VectorTools::interpolate(dof_handler_velocity,\\n\\u00a0                                  vel_exact,\\n\\u00a0                                  u_n_minus_1[d]);\\n\\u00a0         vel_exact.advance_time(dt);\\n\\u00a0         VectorTools::interpolate(dof_handler_velocity, vel_exact, u_n[d]);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nVectorTools::interpolatevoid interpolate(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Function< spacedim, typename VectorType::value_type > &function, VectorType &vec, const ComponentMask &component_mask={})\\n NavierStokesProjection::initialize_*_matrices \\nIn this set of methods we initialize the sparsity patterns, the constraints (if any) and assemble the matrices that do not depend on the timestep dt. Note that for the Laplace and mass matrices, we can use functions in the library that do this. Because the expensive operations of this function \\u2013 creating the two matrices \\u2013 are entirely independent, we could in principle mark them as tasks that can be worked on in parallel using the Threads::new_task functions. We won't do that here since these functions internally already are parallelized, and in particular because the current function is only called once per program run and so does not incur a cost in each time step. The necessary modifications would be quite straightforward, however.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::initialize_velocity_matrices()\\n\\u00a0   {\\n\\u00a0     {\\n\\u00a0       DynamicSparsityPattern dsp(dof_handler_velocity.n_dofs(),\\n\\u00a0                                  dof_handler_velocity.n_dofs());\\n\\u00a0       DoFTools::make_sparsity_pattern(dof_handler_velocity, dsp);\\n\\u00a0       sparsity_pattern_velocity.copy_from(dsp);\\n\\u00a0     }\\n\\u00a0     vel_Laplace_plus_Mass.reinit(sparsity_pattern_velocity);\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       vel_it_matrix[d].reinit(sparsity_pattern_velocity);\\n\\u00a0     vel_Mass.reinit(sparsity_pattern_velocity);\\n\\u00a0     vel_Laplace.reinit(sparsity_pattern_velocity);\\n\\u00a0     vel_Advection.reinit(sparsity_pattern_velocity);\\n\\u00a0 \\n\\u00a0     MatrixCreator::create_mass_matrix(dof_handler_velocity,\\n\\u00a0                                       quadrature_velocity,\\n\\u00a0                                       vel_Mass);\\n\\u00a0     MatrixCreator::create_laplace_matrix(dof_handler_velocity,\\n\\u00a0                                          quadrature_velocity,\\n\\u00a0                                          vel_Laplace);\\n\\u00a0   }\\n\\u00a0 \\nDynamicSparsityPatternDefinition dynamic_sparsity_pattern.h:322\\nDoFTools::make_sparsity_patternvoid make_sparsity_pattern(const DoFHandler< dim, spacedim > &dof_handler, SparsityPatternBase &sparsity_pattern, const AffineConstraints< number > &constraints={}, const bool keep_constrained_dofs=true, const types::subdomain_id subdomain_id=numbers::invalid_subdomain_id)Definition dof_tools_sparsity.cc:56\\nMatrixCreator::create_mass_matrixvoid create_mass_matrix(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, MatrixType &matrix, const Function< spacedim, typename MatrixType::value_type > *const a=nullptr, const AffineConstraints< typename MatrixType::value_type > &constraints=AffineConstraints< typename MatrixType::value_type >())\\nMatrixCreator::create_laplace_matrixvoid create_laplace_matrix(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const Quadrature< dim > &q, MatrixType &matrix, const Function< spacedim, typename MatrixType::value_type > *const a=nullptr, const AffineConstraints< typename MatrixType::value_type > &constraints=AffineConstraints< typename MatrixType::value_type >())\\nThe initialization of the matrices that act on the pressure space is similar to the ones that act on the velocity space.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::initialize_pressure_matrices()\\n\\u00a0   {\\n\\u00a0     {\\n\\u00a0       DynamicSparsityPattern dsp(dof_handler_pressure.n_dofs(),\\n\\u00a0                                  dof_handler_pressure.n_dofs());\\n\\u00a0       DoFTools::make_sparsity_pattern(dof_handler_pressure, dsp);\\n\\u00a0       sparsity_pattern_pressure.copy_from(dsp);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     pres_Laplace.reinit(sparsity_pattern_pressure);\\n\\u00a0     pres_iterative.reinit(sparsity_pattern_pressure);\\n\\u00a0     pres_Mass.reinit(sparsity_pattern_pressure);\\n\\u00a0 \\n\\u00a0     MatrixCreator::create_laplace_matrix(dof_handler_pressure,\\n\\u00a0                                          quadrature_pressure,\\n\\u00a0                                          pres_Laplace);\\n\\u00a0     MatrixCreator::create_mass_matrix(dof_handler_pressure,\\n\\u00a0                                       quadrature_pressure,\\n\\u00a0                                       pres_Mass);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nFor the gradient operator, we start by initializing the sparsity pattern and compressing it. It is important to notice here that the gradient operator acts from the pressure space into the velocity space, so we have to deal with two different finite element spaces. To keep the loops synchronized, we use the alias that we have defined before, namely PairedIterators and IteratorPair.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::initialize_gradient_operator()\\n\\u00a0   {\\n\\u00a0     {\\n\\u00a0       DynamicSparsityPattern dsp(dof_handler_velocity.n_dofs(),\\n\\u00a0                                  dof_handler_pressure.n_dofs());\\n\\u00a0       DoFTools::make_sparsity_pattern(dof_handler_velocity,\\n\\u00a0                                       dof_handler_pressure,\\n\\u00a0                                       dsp);\\n\\u00a0       sparsity_pattern_pres_vel.copy_from(dsp);\\n\\u00a0     }\\n\\u00a0 \\n\\u00a0     InitGradPerTaskData per_task_data(0,\\n\\u00a0                                       fe_velocity.n_dofs_per_cell(),\\n\\u00a0                                       fe_pressure.n_dofs_per_cell());\\n\\u00a0     InitGradScratchData scratch_data(fe_velocity,\\n\\u00a0                                      fe_pressure,\\n\\u00a0                                      quadrature_velocity,\\n\\u00a0                                      update_gradients | update_JxW_values,\\n\\u00a0                                      update_values);\\n\\u00a0 \\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         pres_Diff[d].reinit(sparsity_pattern_pres_vel);\\n\\u00a0         per_task_data.d = d;\\n\\u00a0         WorkStream::run(\\n\\u00a0           IteratorPair(IteratorTuple(dof_handler_velocity.begin_active(),\\n\\u00a0                                      dof_handler_pressure.begin_active())),\\n\\u00a0           IteratorPair(IteratorTuple(dof_handler_velocity.end(),\\n\\u00a0                                      dof_handler_pressure.end())),\\n\\u00a0           *this,\\n\\u00a0           &NavierStokesProjection<dim>::assemble_one_cell_of_gradient,\\n\\u00a0           &NavierStokesProjection<dim>::copy_gradient_local_to_global,\\n\\u00a0           scratch_data,\\n\\u00a0           per_task_data);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::assemble_one_cell_of_gradient(\\n\\u00a0     const IteratorPair  &SI,\\n\\u00a0     InitGradScratchData &scratch,\\n\\u00a0     InitGradPerTaskData &data)\\n\\u00a0   {\\n\\u00a0     scratch.fe_val_vel.reinit(std::get<0>(*SI));\\n\\u00a0     scratch.fe_val_pres.reinit(std::get<1>(*SI));\\n\\u00a0 \\n\\u00a0     std::get<0>(*SI)->get_dof_indices(data.vel_local_dof_indices);\\n\\u00a0     std::get<1>(*SI)->get_dof_indices(data.pres_local_dof_indices);\\n\\u00a0 \\n\\u00a0     data.local_grad = 0.;\\n\\u00a0     for (unsigned int q = 0; q < scratch.nqp; ++q)\\n\\u00a0       {\\n\\u00a0         for (unsigned int i = 0; i < data.vel_dpc; ++i)\\n\\u00a0           for (unsigned int j = 0; j < data.pres_dpc; ++j)\\n\\u00a0             data.local_grad(i, j) +=\\n\\u00a0               -scratch.fe_val_vel.JxW(q) *\\n\\u00a0               scratch.fe_val_vel.shape_grad(i, q)[data.d] *\\n\\u00a0               scratch.fe_val_pres.shape_value(j, q);\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::copy_gradient_local_to_global(\\n\\u00a0     const InitGradPerTaskData &data)\\n\\u00a0   {\\n\\u00a0     for (unsigned int i = 0; i < data.vel_dpc; ++i)\\n\\u00a0       for (unsigned int j = 0; j < data.pres_dpc; ++j)\\n\\u00a0         pres_Diff[data.d].add(data.vel_local_dof_indices[i],\\n\\u00a0                               data.pres_local_dof_indices[j],\\n\\u00a0                               data.local_grad(i, j));\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nupdate_values@ update_valuesShape function values.Definition fe_update_flags.h:75\\nupdate_JxW_values@ update_JxW_valuesTransformed quadrature weights.Definition fe_update_flags.h:134\\nupdate_gradients@ update_gradientsShape function gradients.Definition fe_update_flags.h:81\\nWorkStream::runvoid run(const std::vector< std::vector< Iterator > > &colored_iterators, Worker worker, Copier copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const unsigned int queue_length=2 *MultithreadInfo::n_threads(), const unsigned int chunk_size=8)Definition work_stream.h:1272\\n NavierStokesProjection::run \\nThis is the time marching function, which starting at t_0 advances in time using the projection method with time step dt until T.\\nIts second parameter, verbose indicates whether the function should output information what it is doing at any given moment: for example, it will say whether we are working on the diffusion, projection substep; updating preconditioners etc. Rather than implementing this output using code like  if (verbose) std::cout << \\\"something\\\";\\n  we use the ConditionalOStream class to do that for us. That class takes an output stream and a condition that indicates whether the things you pass to it should be passed through to the given output stream, or should just be ignored. This way, above code simply becomes  verbose_cout << \\\"something\\\";\\n  and does the right thing in either case.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::run(const bool         verbose,\\n\\u00a0                                         const unsigned int output_interval)\\n\\u00a0   {\\n\\u00a0     ConditionalOStream verbose_cout(std::cout, verbose);\\n\\u00a0 \\n\\u00a0     const auto n_steps = static_cast<unsigned int>((T - t_0) / dt);\\n\\u00a0     vel_exact.set_time(2. * dt);\\n\\u00a0     output_results(1);\\n\\u00a0     for (unsigned int n = 2; n <= n_steps; ++n)\\n\\u00a0       {\\n\\u00a0         if (n % output_interval == 0)\\n\\u00a0           {\\n\\u00a0             verbose_cout << \\\"Plotting Solution\\\" << std::endl;\\n\\u00a0             output_results(n);\\n\\u00a0           }\\n\\u00a0         std::cout << \\\"Step = \\\" << n << \\\" Time = \\\" << (n * dt) << std::endl;\\n\\u00a0         verbose_cout << \\\"  Interpolating the velocity \\\" << std::endl;\\n\\u00a0 \\n\\u00a0         interpolate_velocity();\\n\\u00a0         verbose_cout << \\\"  Diffusion Step\\\" << std::endl;\\n\\u00a0         if (n % vel_update_prec == 0)\\n\\u00a0           verbose_cout << \\\"    With reinitialization of the preconditioner\\\"\\n\\u00a0                        << std::endl;\\n\\u00a0         diffusion_step((n % vel_update_prec == 0) || (n == 2));\\n\\u00a0         verbose_cout << \\\"  Projection Step\\\" << std::endl;\\n\\u00a0         projection_step((n == 2));\\n\\u00a0         verbose_cout << \\\"  Updating the Pressure\\\" << std::endl;\\n\\u00a0         update_pressure((n == 2));\\n\\u00a0         vel_exact.advance_time(dt);\\n\\u00a0       }\\n\\u00a0     output_results(n_steps);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::interpolate_velocity()\\n\\u00a0   {\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         u_star[d].equ(2., u_n[d]);\\n\\u00a0         u_star[d] -= u_n_minus_1[d];\\n\\u00a0       }\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nConditionalOStreamDefinition conditional_ostream.h:80\\nPhysics::Elasticity::Kinematics::dSymmetricTensor< 2, dim, Number > d(const Tensor< 2, dim, Number > &F, const Tensor< 2, dim, Number > &dF_dt)\\n NavierStokesProjection::diffusion_step\\nThe implementation of a diffusion step. Note that the expensive operation is the diffusion solve at the end of the function, which we have to do once for each velocity component. To accelerate things a bit, we allow to do this in parallel, using the Threads::new_task function which makes sure that the dim solves are all taken care of and are scheduled to available processors: if your machine has more than one processor core and no other parts of this program are using resources currently, then the diffusion solves will run in parallel. On the other hand, if your system has only one processor core then running things in parallel would be inefficient (since it leads, for example, to cache congestion) and things will be executed sequentially.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::diffusion_step(const bool reinit_prec)\\n\\u00a0   {\\n\\u00a0     pres_tmp.equ(-1., pres_n);\\n\\u00a0     pres_tmp.add(-4. / 3., phi_n, 1. / 3., phi_n_minus_1);\\n\\u00a0 \\n\\u00a0     assemble_advection_term();\\n\\u00a0 \\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         force[d] = 0.;\\n\\u00a0         v_tmp.equ(2. / dt, u_n[d]);\\n\\u00a0         v_tmp.add(-.5 / dt, u_n_minus_1[d]);\\n\\u00a0         vel_Mass.vmult_add(force[d], v_tmp);\\n\\u00a0 \\n\\u00a0         pres_Diff[d].vmult_add(force[d], pres_tmp);\\n\\u00a0         u_n_minus_1[d] = u_n[d];\\n\\u00a0 \\n\\u00a0         vel_it_matrix[d].copy_from(vel_Laplace_plus_Mass);\\n\\u00a0         vel_it_matrix[d].add(1., vel_Advection);\\n\\u00a0 \\n\\u00a0         vel_exact.set_component(d);\\n\\u00a0         boundary_values.clear();\\n\\u00a0         for (const auto &boundary_id : boundary_ids)\\n\\u00a0           {\\n\\u00a0             switch (boundary_id)\\n\\u00a0               {\\n\\u00a0                 case 1:\\n\\u00a0                   VectorTools::interpolate_boundary_values(\\n\\u00a0                     dof_handler_velocity,\\n\\u00a0                     boundary_id,\\n\\u00a0                     Functions::ZeroFunction<dim>(),\\n\\u00a0                     boundary_values);\\n\\u00a0                   break;\\n\\u00a0                 case 2:\\n\\u00a0                   VectorTools::interpolate_boundary_values(dof_handler_velocity,\\n\\u00a0                                                            boundary_id,\\n\\u00a0                                                            vel_exact,\\n\\u00a0                                                            boundary_values);\\n\\u00a0                   break;\\n\\u00a0                 case 3:\\n\\u00a0                   if (d != 0)\\n\\u00a0                     VectorTools::interpolate_boundary_values(\\n\\u00a0                       dof_handler_velocity,\\n\\u00a0                       boundary_id,\\n\\u00a0                       Functions::ZeroFunction<dim>(),\\n\\u00a0                       boundary_values);\\n\\u00a0                   break;\\n\\u00a0                 case 4:\\n\\u00a0                   VectorTools::interpolate_boundary_values(\\n\\u00a0                     dof_handler_velocity,\\n\\u00a0                     boundary_id,\\n\\u00a0                     Functions::ZeroFunction<dim>(),\\n\\u00a0                     boundary_values);\\n\\u00a0                   break;\\n\\u00a0                 default:\\n\\u00a0                   DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0               }\\n\\u00a0           }\\n\\u00a0         MatrixTools::apply_boundary_values(boundary_values,\\n\\u00a0                                            vel_it_matrix[d],\\n\\u00a0                                            u_n[d],\\n\\u00a0                                            force[d]);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0     Threads::TaskGroup<void> tasks;\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         if (reinit_prec)\\n\\u00a0           prec_velocity[d].initialize(vel_it_matrix[d],\\n\\u00a0                                       SparseILU<double>::AdditionalData(\\n\\u00a0                                         vel_diag_strength, vel_off_diagonals));\\n\\u00a0         tasks += Threads::new_task(\\n\\u00a0           &NavierStokesProjection<dim>::diffusion_component_solve, *this, d);\\n\\u00a0       }\\n\\u00a0     tasks.join_all();\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void\\n\\u00a0   NavierStokesProjection<dim>::diffusion_component_solve(const unsigned int d)\\n\\u00a0   {\\n\\u00a0     SolverControl solver_control(vel_max_its, vel_eps * force[d].l2_norm());\\n\\u00a0     SolverGMRES<Vector<double>> gmres(\\n\\u00a0       solver_control,\\n\\u00a0       SolverGMRES<Vector<double>>::AdditionalData(vel_Krylov_size));\\n\\u00a0     gmres.solve(vel_it_matrix[d], u_n[d], force[d], prec_velocity[d]);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nFunctions::ZeroFunctionDefinition function.h:510\\nSolverControlDefinition solver_control.h:67\\nSolverGMRESDefinition solver_gmres.h:353\\nSparseILU::AdditionalDatatypename SparseLUDecomposition< number >::AdditionalData AdditionalDataDefinition sparse_ilu.h:79\\nThreads::TaskGroupDefinition thread_management.h:1373\\nThreads::new_taskTask< RT > new_task(const std::function< RT()> &function)Definition thread_management.h:1153\\nDEAL_II_NOT_IMPLEMENTED#define DEAL_II_NOT_IMPLEMENTED()Definition exceptions.h:1814\\nAdaptationStrategies::Refinement::l2_normstd::vector< value_type > l2_norm(const typename ::Triangulation< dim, spacedim >::cell_iterator &parent, const value_type parent_value)\\nFunctionsDefinition flow_function.h:28\\nMatrixTools::apply_boundary_valuesvoid apply_boundary_values(const std::map< types::global_dof_index, number > &boundary_values, SparseMatrix< number > &matrix, Vector< number > &solution, Vector< number > &right_hand_side, const bool eliminate_columns=true)Definition matrix_tools.cc:75\\nVectorToolsDefinition vector_tools.h:302\\nVectorTools::interpolate_boundary_valuesvoid interpolate_boundary_values(const Mapping< dim, spacedim > &mapping, const DoFHandler< dim, spacedim > &dof, const std::map< types::boundary_id, const Function< spacedim, number > * > &function_map, std::map< types::global_dof_index, number > &boundary_values, const ComponentMask &component_mask={})\\n NavierStokesProjection::assemble_advection_term \\nThe following few functions deal with assembling the advection terms, which is the part of the system matrix for the diffusion step that changes at every time step. As mentioned above, we will run the assembly loop over all cells in parallel, using the WorkStream class and other facilities as described in the documentation topic on Parallel computing with multiple processors accessing shared memory.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::assemble_advection_term()\\n\\u00a0   {\\n\\u00a0     vel_Advection = 0.;\\n\\u00a0     AdvectionPerTaskData data(fe_velocity.n_dofs_per_cell());\\n\\u00a0     AdvectionScratchData scratch(fe_velocity,\\n\\u00a0                                  quadrature_velocity,\\n\\u00a0                                  update_values | update_JxW_values |\\n\\u00a0                                    update_gradients);\\n\\u00a0     WorkStream::run(\\n\\u00a0       dof_handler_velocity.begin_active(),\\n\\u00a0       dof_handler_velocity.end(),\\n\\u00a0       *this,\\n\\u00a0       &NavierStokesProjection<dim>::assemble_one_cell_of_advection,\\n\\u00a0       &NavierStokesProjection<dim>::copy_advection_local_to_global,\\n\\u00a0       scratch,\\n\\u00a0       data);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::assemble_one_cell_of_advection(\\n\\u00a0     const typename DoFHandler<dim>::active_cell_iterator &cell,\\n\\u00a0     AdvectionScratchData                                 &scratch,\\n\\u00a0     AdvectionPerTaskData                                 &data)\\n\\u00a0   {\\n\\u00a0     scratch.fe_val.reinit(cell);\\n\\u00a0     cell->get_dof_indices(data.local_dof_indices);\\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         scratch.fe_val.get_function_values(u_star[d], scratch.u_star_tmp);\\n\\u00a0         for (unsigned int q = 0; q < scratch.nqp; ++q)\\n\\u00a0           scratch.u_star_local[q][d] = scratch.u_star_tmp[q];\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     for (unsigned int d = 0; d < dim; ++d)\\n\\u00a0       {\\n\\u00a0         scratch.fe_val.get_function_gradients(u_star[d], scratch.grad_u_star);\\n\\u00a0         for (unsigned int q = 0; q < scratch.nqp; ++q)\\n\\u00a0           {\\n\\u00a0             if (d == 0)\\n\\u00a0               scratch.u_star_tmp[q] = 0.;\\n\\u00a0             scratch.u_star_tmp[q] += scratch.grad_u_star[q][d];\\n\\u00a0           }\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     data.local_advection = 0.;\\n\\u00a0     for (unsigned int q = 0; q < scratch.nqp; ++q)\\n\\u00a0       for (unsigned int i = 0; i < scratch.dpc; ++i)\\n\\u00a0         for (unsigned int j = 0; j < scratch.dpc; ++j)\\n\\u00a0           data.local_advection(i, j) += (scratch.u_star_local[q] *            \\n\\u00a0                                            scratch.fe_val.shape_grad(j, q) *  \\n\\u00a0                                            scratch.fe_val.shape_value(i, q)   \\n\\u00a0                                          +                                    \\n\\u00a0                                          0.5 *                                \\n\\u00a0                                            scratch.u_star_tmp[q] *            \\n\\u00a0                                            scratch.fe_val.shape_value(i, q) * \\n\\u00a0                                            scratch.fe_val.shape_value(j, q))  \\n\\u00a0                                         * scratch.fe_val.JxW(q);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::copy_advection_local_to_global(\\n\\u00a0     const AdvectionPerTaskData &data)\\n\\u00a0   {\\n\\u00a0     for (unsigned int i = 0; i < fe_velocity.n_dofs_per_cell(); ++i)\\n\\u00a0       for (unsigned int j = 0; j < fe_velocity.n_dofs_per_cell(); ++j)\\n\\u00a0         vel_Advection.add(data.local_dof_indices[i],\\n\\u00a0                           data.local_dof_indices[j],\\n\\u00a0                           data.local_advection(i, j));\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\n NavierStokesProjection::projection_step\\nThis implements the projection step:\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::projection_step(const bool reinit_prec)\\n\\u00a0   {\\n\\u00a0     pres_iterative.copy_from(pres_Laplace);\\n\\u00a0 \\n\\u00a0     pres_tmp = 0.;\\n\\u00a0     for (unsigned d = 0; d < dim; ++d)\\n\\u00a0       pres_Diff[d].Tvmult_add(pres_tmp, u_n[d]);\\n\\u00a0 \\n\\u00a0     phi_n_minus_1 = phi_n;\\n\\u00a0 \\n\\u00a0     static std::map<types::global_dof_index, double> bval;\\n\\u00a0     if (reinit_prec)\\n\\u00a0       VectorTools::interpolate_boundary_values(dof_handler_pressure,\\n\\u00a0                                                3,\\n\\u00a0                                                Functions::ZeroFunction<dim>(),\\n\\u00a0                                                bval);\\n\\u00a0 \\n\\u00a0     MatrixTools::apply_boundary_values(bval, pres_iterative, phi_n, pres_tmp);\\n\\u00a0 \\n\\u00a0     if (reinit_prec)\\n\\u00a0       prec_pres_Laplace.initialize(pres_iterative,\\n\\u00a0                                    SparseILU<double>::AdditionalData(\\n\\u00a0                                      vel_diag_strength, vel_off_diagonals));\\n\\u00a0 \\n\\u00a0     SolverControl solvercontrol(vel_max_its, vel_eps * pres_tmp.l2_norm());\\n\\u00a0     SolverCG<Vector<double>> cg(solvercontrol);\\n\\u00a0     cg.solve(pres_iterative, phi_n, pres_tmp, prec_pres_Laplace);\\n\\u00a0 \\n\\u00a0     phi_n *= 1.5 / dt;\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\nSolverCGDefinition solver_cg.h:179\\n NavierStokesProjection::update_pressure \\nThis is the pressure update step of the projection method. It implements the standard formulation of the method, that is  \\n\\\\[ p^{n+1} = p^n +\\n   \\\\phi^{n+1}, \\\\]\\n\\n or the rotational form, which is  \\n\\\\[ p^{n+1} = p^n +\\n   \\\\phi^{n+1} - \\\\frac{1}{Re} \\\\nabla\\\\cdot u^{n+1}. \\\\]\\n\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::update_pressure(const bool reinit_prec)\\n\\u00a0   {\\n\\u00a0     pres_n_minus_1 = pres_n;\\n\\u00a0     switch (type)\\n\\u00a0       {\\n\\u00a0         case RunTimeParameters::Method::standard:\\n\\u00a0           pres_n += phi_n;\\n\\u00a0           break;\\n\\u00a0         case RunTimeParameters::Method::rotational:\\n\\u00a0           if (reinit_prec)\\n\\u00a0             prec_mass.initialize(pres_Mass);\\n\\u00a0           pres_n = pres_tmp;\\n\\u00a0           prec_mass.solve(pres_n);\\n\\u00a0           pres_n.sadd(1. / Re, 1., pres_n_minus_1);\\n\\u00a0           pres_n += phi_n;\\n\\u00a0           break;\\n\\u00a0         default:\\n\\u00a0           DEAL_II_NOT_IMPLEMENTED();\\n\\u00a0       };\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n NavierStokesProjection::output_results \\nThis method plots the current solution. The main difficulty is that we want to create a single output file that contains the data for all velocity components, the pressure, and also the vorticity of the flow. On the other hand, velocities and the pressure live on separate DoFHandler objects, and so can't be written to the same file using a single DataOut object. As a consequence, we have to work a bit harder to get the various pieces of data into a single DoFHandler object, and then use that to drive graphical output.\\nWe will not elaborate on this process here, but rather refer to step-32, where a similar procedure is used (and is documented) to create a joint DoFHandler object for all variables.\\nLet us also note that we here compute the vorticity as a scalar quantity in a separate function, using the \\\\(L^2\\\\) projection of the quantity \\\\(\\\\text{curl} u\\\\) onto the finite element space used for the components of the velocity. In principle, however, we could also have computed it as a pointwise quantity from the velocity, and do so through the DataPostprocessor mechanism discussed in step-29 and step-33.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::output_results(const unsigned int step)\\n\\u00a0   {\\n\\u00a0     assemble_vorticity((step == 1));\\n\\u00a0     const FESystem<dim> joint_fe(fe_velocity ^ dim, fe_pressure, fe_velocity);\\n\\u00a0     DoFHandler<dim>     joint_dof_handler(triangulation);\\n\\u00a0     joint_dof_handler.distribute_dofs(joint_fe);\\n\\u00a0     Assert(joint_dof_handler.n_dofs() ==\\n\\u00a0              ((dim + 1) * dof_handler_velocity.n_dofs() +\\n\\u00a0               dof_handler_pressure.n_dofs()),\\n\\u00a0            ExcInternalError());\\n\\u00a0     Vector<double> joint_solution(joint_dof_handler.n_dofs());\\n\\u00a0     std::vector<types::global_dof_index> loc_joint_dof_indices(\\n\\u00a0       joint_fe.n_dofs_per_cell()),\\n\\u00a0       loc_vel_dof_indices(fe_velocity.n_dofs_per_cell()),\\n\\u00a0       loc_pres_dof_indices(fe_pressure.n_dofs_per_cell());\\n\\u00a0     typename DoFHandler<dim>::active_cell_iterator\\n\\u00a0       joint_cell = joint_dof_handler.begin_active(),\\n\\u00a0       joint_endc = joint_dof_handler.end(),\\n\\u00a0       vel_cell   = dof_handler_velocity.begin_active(),\\n\\u00a0       pres_cell  = dof_handler_pressure.begin_active();\\n\\u00a0     for (; joint_cell != joint_endc; ++joint_cell, ++vel_cell, ++pres_cell)\\n\\u00a0       {\\n\\u00a0         joint_cell->get_dof_indices(loc_joint_dof_indices);\\n\\u00a0         vel_cell->get_dof_indices(loc_vel_dof_indices);\\n\\u00a0         pres_cell->get_dof_indices(loc_pres_dof_indices);\\n\\u00a0         for (unsigned int i = 0; i < joint_fe.n_dofs_per_cell(); ++i)\\n\\u00a0           switch (joint_fe.system_to_base_index(i).first.first)\\n\\u00a0             {\\n\\u00a0               case 0:\\n\\u00a0                 Assert(joint_fe.system_to_base_index(i).first.second < dim,\\n\\u00a0                        ExcInternalError());\\n\\u00a0                 joint_solution(loc_joint_dof_indices[i]) =\\n\\u00a0                   u_n[joint_fe.system_to_base_index(i).first.second](\\n\\u00a0                     loc_vel_dof_indices[joint_fe.system_to_base_index(i)\\n\\u00a0                                           .second]);\\n\\u00a0                 break;\\n\\u00a0               case 1:\\n\\u00a0                 Assert(joint_fe.system_to_base_index(i).first.second == 0,\\n\\u00a0                        ExcInternalError());\\n\\u00a0                 joint_solution(loc_joint_dof_indices[i]) =\\n\\u00a0                   pres_n(loc_pres_dof_indices[joint_fe.system_to_base_index(i)\\n\\u00a0                                                 .second]);\\n\\u00a0                 break;\\n\\u00a0               case 2:\\n\\u00a0                 Assert(joint_fe.system_to_base_index(i).first.second == 0,\\n\\u00a0                        ExcInternalError());\\n\\u00a0                 joint_solution(loc_joint_dof_indices[i]) = rot_u(\\n\\u00a0                   loc_vel_dof_indices[joint_fe.system_to_base_index(i).second]);\\n\\u00a0                 break;\\n\\u00a0               default:\\n\\u00a0                 DEAL_II_ASSERT_UNREACHABLE();\\n\\u00a0             }\\n\\u00a0       }\\n\\u00a0     std::vector<std::string> joint_solution_names(dim, \\\"v\\\");\\n\\u00a0     joint_solution_names.emplace_back(\\\"p\\\");\\n\\u00a0     joint_solution_names.emplace_back(\\\"rot_u\\\");\\n\\u00a0     DataOut<dim> data_out;\\n\\u00a0     data_out.attach_dof_handler(joint_dof_handler);\\n\\u00a0     std::vector<DataComponentInterpretation::DataComponentInterpretation>\\n\\u00a0       component_interpretation(\\n\\u00a0         dim + 2, DataComponentInterpretation::component_is_part_of_vector);\\n\\u00a0     component_interpretation[dim] =\\n\\u00a0       DataComponentInterpretation::component_is_scalar;\\n\\u00a0     component_interpretation[dim + 1] =\\n\\u00a0       DataComponentInterpretation::component_is_scalar;\\n\\u00a0     data_out.add_data_vector(joint_solution,\\n\\u00a0                              joint_solution_names,\\n\\u00a0                              DataOut<dim>::type_dof_data,\\n\\u00a0                              component_interpretation);\\n\\u00a0     data_out.build_patches(deg + 1);\\n\\u00a0     std::ofstream output(\\\"solution-\\\" + Utilities::int_to_string(step, 5) +\\n\\u00a0                          \\\".vtk\\\");\\n\\u00a0     data_out.write_vtk(output);\\n\\u00a0   }\\n\\u00a0 \\n\\u00a0 \\n\\u00a0 \\nDataOut_DoFData::attach_dof_handlervoid attach_dof_handler(const DoFHandler< dim, spacedim > &)\\nDataOutDefinition data_out.h:147\\nFESystemDefinition fe_system.h:208\\nDEAL_II_ASSERT_UNREACHABLE#define DEAL_II_ASSERT_UNREACHABLE()Definition exceptions.h:1897\\nDataComponentInterpretation::component_is_scalar@ component_is_scalarDefinition data_component_interpretation.h:52\\nDataComponentInterpretation::component_is_part_of_vector@ component_is_part_of_vectorDefinition data_component_interpretation.h:58\\nUtilities::int_to_stringstd::string int_to_string(const unsigned int value, const unsigned int digits=numbers::invalid_unsigned_int)Definition utilities.cc:470\\nFollowing is the helper function that computes the vorticity by projecting the term \\\\(\\\\text{curl} u\\\\) onto the finite element space used for the components of the velocity. The function is only called whenever we generate graphical output, so not very often, and as a consequence we didn't bother parallelizing it using the WorkStream concept as we do for the other assembly functions. That should not be overly complicated, however, if needed. Moreover, the implementation that we have here only works for 2d, so we bail if that is not the case.\\n\\u00a0   template <int dim>\\n\\u00a0   void NavierStokesProjection<dim>::assemble_vorticity(const bool reinit_prec)\\n\\u00a0   {\\n\\u00a0     Assert(dim == 2, ExcNotImplemented());\\n\\u00a0     if (reinit_prec)\\n\\u00a0       prec_vel_mass.initialize(vel_Mass);\\n\\u00a0 \\n\\u00a0     FEValues<dim>      fe_val_vel(fe_velocity,\\n\\u00a0                              quadrature_velocity,\\n\\u00a0                              update_gradients | update_JxW_values |\\n\\u00a0                                update_values);\\n\\u00a0     const unsigned int dpc = fe_velocity.n_dofs_per_cell(),\\n\\u00a0                        nqp = quadrature_velocity.size();\\n\\u00a0     std::vector<types::global_dof_index> ldi(dpc);\\n\\u00a0     Vector<double>                       loc_rot(dpc);\\n\\u00a0 \\n\\u00a0     std::vector<Tensor<1, dim>> grad_u1(nqp), grad_u2(nqp);\\n\\u00a0     rot_u = 0.;\\n\\u00a0 \\n\\u00a0     for (const auto &cell : dof_handler_velocity.active_cell_iterators())\\n\\u00a0       {\\n\\u00a0         fe_val_vel.reinit(cell);\\n\\u00a0         cell->get_dof_indices(ldi);\\n\\u00a0         fe_val_vel.get_function_gradients(u_n[0], grad_u1);\\n\\u00a0         fe_val_vel.get_function_gradients(u_n[1], grad_u2);\\n\\u00a0         loc_rot = 0.;\\n\\u00a0         for (unsigned int q = 0; q < nqp; ++q)\\n\\u00a0           for (unsigned int i = 0; i < dpc; ++i)\\n\\u00a0             loc_rot(i) += (grad_u2[q][0] - grad_u1[q][1]) * \\n\\u00a0                           fe_val_vel.shape_value(i, q) *    \\n\\u00a0                           fe_val_vel.JxW(q);\\n\\u00a0 \\n\\u00a0         for (unsigned int i = 0; i < dpc; ++i)\\n\\u00a0           rot_u(ldi[i]) += loc_rot(i);\\n\\u00a0       }\\n\\u00a0 \\n\\u00a0     prec_vel_mass.solve(rot_u);\\n\\u00a0   }\\n\\u00a0 } // namespace Step35\\n\\u00a0 \\n\\u00a0 \\n The main function \\nThe main function looks very much like in all the other tutorial programs, so there is little to comment on here:\\n\\u00a0 int main()\\n\\u00a0 {\\n\\u00a0   try\\n\\u00a0     {\\n\\u00a0       using namespace Step35;\\n\\u00a0 \\n\\u00a0       RunTimeParameters::Data_Storage data;\\n\\u00a0       data.read_data(\\\"parameter-file.prm\\\");\\n\\u00a0 \\n\\u00a0       deallog.depth_console(data.verbose ? 2 : 0);\\n\\u00a0 \\n\\u00a0       NavierStokesProjection<2> test(data);\\n\\u00a0       test.run(data.verbose, data.output_interval);\\n\\u00a0     }\\n\\u00a0   catch (std::exception &exc)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Exception on processing: \\\" << std::endl\\n\\u00a0                 << exc.what() << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   catch (...)\\n\\u00a0     {\\n\\u00a0       std::cerr << std::endl\\n\\u00a0                 << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       std::cerr << \\\"Unknown exception!\\\" << std::endl\\n\\u00a0                 << \\\"Aborting!\\\" << std::endl\\n\\u00a0                 << \\\"----------------------------------------------------\\\"\\n\\u00a0                 << std::endl;\\n\\u00a0       return 1;\\n\\u00a0     }\\n\\u00a0   std::cout << \\\"----------------------------------------------------\\\"\\n\\u00a0             << std::endl\\n\\u00a0             << \\\"Apparently everything went fine!\\\" << std::endl\\n\\u00a0             << \\\"Don't forget to brush your teeth :-)\\\" << std::endl\\n\\u00a0             << std::endl;\\n\\u00a0   return 0;\\n\\u00a0 }\\nLogStream::depth_consoleunsigned int depth_console(const unsigned int n)Definition logstream.cc:349\\ndeallogLogStream deallogDefinition logstream.cc:36\\n Results\\nRe = 100 \\nWe run the code with the following parameter-file.prm, which can be found in the same directory as the source:   # First a global definition\\n  # the type of method we want to use\\n  set Method_Form = rotational\\n\\n  subsection Physical data\\n    # In this subsection we declare the physical data\\n    # The initial and final time, and the Reynolds number\\n    set initial_time = 0.\\n    set final_time   = 25.\\n    set Reynolds     = 100\\n  end\\n\\n  subsection Time step data\\n    # In this subsection we declare the data that is to be used for time discretization,\\n    # i.e. the time step dt\\n    set dt = 5e-3\\n  end\\n\\n  subsection Space discretization\\n    # In this subsection we declare the data that is relevant to the space discretization\\n    # we set the number of global refines the triangulation must have\\n    # and the degree k of the pair Q_(k+1)--Q_k of velocity--pressure finite element spaces\\n    set n_of_refines = 3\\n    set pressure_fe_degree = 1\\n  end\\n\\n  subsection Data solve velocity\\n    # In this section we declare the parameters that are going to control the solution process\\n    # for the velocity.\\n    set max_iterations = 1000  # maximal number of iterations that GMRES must make\\n    set eps            = 1e-6  # stopping criterion\\n    set Krylov_size    = 30    # size of the Krylov subspace to be used in GMRES\\n    set off_diagonals  = 60    # number of off diagonals that ILU must compute\\n    set diag_strength  = 0.01  # diagonal strengthening value\\n    set update_prec    = 10    # this number indicates how often the preconditioner must be updated\\n  end\\n\\n  #The output frequency\\n  set output = 50\\n\\n  #Finally we set the verbosity level\\n  set verbose = false\\nSince the verbose parameter is set to false, we do not get any kind of output besides the number of the time step the program is currently working on. If we were to set it to true we would get information on what the program is doing and how many steps each iterative process had to make to converge, etc.\\nLet us plot the obtained results for \\\\(t=1,5,12,20,25\\\\) (i.e. time steps 200, 1000, 2400, 4000, and 5000), where in the left column we show the vorticity and in the right the velocity field:\\n\\n\\n  \\n\\n  \\n\\n  \\n\\n  \\n\\n  \\n\\nThe images show nicely the development and extension of a vortex chain behind the obstacles, with the sign of the vorticity indicating whether this is a left or right turning vortex.\\nRe = 500 \\nWe can change the Reynolds number, \\\\(Re\\\\), in the parameter file to a value of \\\\(500\\\\). Doing so, and reducing the time step somewhat as well, yields the following images at times \\\\(t=20,40\\\\):\\n\\n\\n  \\n\\n  \\n\\nFor this larger Reynolds number, we observe unphysical oscillations, especially for the vorticity. The discretization scheme has now difficulties in correctly resolving the flow, which should still be laminar and well-organized. These phenomena are typical of discretization schemes that lack robustness in under-resolved scenarios, where under-resolved means that the Reynolds number computed with the mesh size instead of the physical dimensions of the geometry is large. We look at a zoom at the region behind the obstacle, and the mesh size we have there:\\n\\nWe can easily test our hypothesis by re-running the simulation with one more mesh refinement set in the parameter file :\\n\\nIndeed, the vorticity field now looks much smoother. While we can expect that further refining the mesh will suppress the remaining oscillations as well, one should take measures to obtain a robust scheme in the limit of coarse resolutions, as described below.\\n Possibilities for extensions \\nThis program can be extended in the following directions: \\n\\nAdaptive mesh refinement: As we have seen, we computed everything on a single fixed mesh. Using adaptive mesh refinement can lead to increased accuracy while not significantly increasing the computational time.\\n\\n\\n\\nAdaptive time-stepping: Although there apparently is currently no theory about projection methods with variable time step, practice shows that they perform very well.\\n\\n\\n\\nHigh Reynolds numbers: As we can see from the results, increasing the Reynolds number changes significantly the behavior of the discretization scheme. Using well-known stabilization techniques we could be able to compute the flow in this, or many other problems, when the Reynolds number is very large and where computational costs demand spatial resolutions for which the flow is only marginally resolved, especially for 3D turbulent flows.\\n\\n\\n\\nVariable density incompressible flows: There are projection-like methods for the case of incompressible flows with variable density. Such flows play a role if fluids of different density mix, for example fresh water and salt water, or alcohol and water.\\n\\n\\n\\nCompressible Navier-Stokes equations: These equations are relevant for cases where velocities are high enough so that the fluid becomes compressible, but not fast enough that we get into a regime where viscosity becomes negligible and the Navier-Stokes equations need to be replaced by the hyperbolic Euler equations of gas dynamics. Compressibility starts to become a factor if the velocity becomes greater than about one third of the speed of sound, so it is not a factor for almost all terrestrial vehicles. On the other hand, commercial jetliners fly at about 85 per cent of the speed of sound, and flow over the wings becomes significantly supersonic, a regime in which the compressible Navier-Stokes equations are not applicable any more either. There are significant applications for the range in between, however, such as for small aircraft or the fast trains in many European and East Asian countries. \\n\\n The plain program\\n/* ------------------------------------------------------------------------\\n *\\n * SPDX-License-Identifier: LGPL-2.1-or-later\\n * Copyright (C) 2009 - 2024 by the deal.II authors\\n *\\n * This file is part of the deal.II library.\\n *\\n * Part of the source code is dual licensed under Apache-2.0 WITH\\n * LLVM-exception OR LGPL-2.1-or-later. Detailed license information\\n * governing the source code and code contributions can be found in\\n * LICENSE.md and CONTRIBUTING.md at the top level directory of deal.II.\\n *\\n * ------------------------------------------------------------------------\\n *\\n * Author: Abner Salgado, Texas A&M University 2009\\n */\\n \\n \\n \\n#include <deal.II/base/parameter_handler.h>\\n#include <deal.II/base/point.h>\\n#include <deal.II/base/function.h>\\n#include <deal.II/base/quadrature_lib.h>\\n#include <deal.II/base/multithread_info.h>\\n#include <deal.II/base/thread_management.h>\\n#include <deal.II/base/work_stream.h>\\n#include <deal.II/base/parallel.h>\\n#include <deal.II/base/utilities.h>\\n#include <deal.II/base/conditional_ostream.h>\\n \\n#include <deal.II/lac/vector.h>\\n#include <deal.II/lac/sparse_matrix.h>\\n#include <deal.II/lac/dynamic_sparsity_pattern.h>\\n#include <deal.II/lac/solver_cg.h>\\n#include <deal.II/lac/precondition.h>\\n#include <deal.II/lac/solver_gmres.h>\\n#include <deal.II/lac/sparse_ilu.h>\\n#include <deal.II/lac/sparse_direct.h>\\n#include <deal.II/lac/affine_constraints.h>\\n \\n#include <deal.II/grid/tria.h>\\n#include <deal.II/grid/grid_generator.h>\\n#include <deal.II/grid/grid_refinement.h>\\n#include <deal.II/grid/grid_in.h>\\n \\n#include <deal.II/dofs/dof_handler.h>\\n#include <deal.II/dofs/dof_tools.h>\\n#include <deal.II/dofs/dof_renumbering.h>\\n \\n#include <deal.II/fe/fe_q.h>\\n#include <deal.II/fe/fe_values.h>\\n#include <deal.II/fe/fe_tools.h>\\n#include <deal.II/fe/fe_system.h>\\n \\n#include <deal.II/numerics/matrix_creator.h>\\n#include <deal.II/numerics/matrix_tools.h>\\n#include <deal.II/numerics/vector_tools.h>\\n#include <deal.II/numerics/data_out.h>\\n \\n#include <fstream>\\n#include <cmath>\\n#include <iostream>\\n \\nnamespace Step35\\n{\\n using namespace dealii;\\n \\n namespace RunTimeParameters\\n  {\\n enum class Method\\n    {\\n      standard,\\n      rotational\\n    };\\n \\n class Data_Storage\\n    {\\n public:\\n      Data_Storage();\\n \\n void read_data(const std::string &filename);\\n \\n      Method form;\\n \\n double dt;\\n double initial_time;\\n double final_time;\\n \\n double Reynolds;\\n \\n unsigned int n_global_refines;\\n \\n unsigned int pressure_degree;\\n \\n unsigned int vel_max_iterations;\\n unsigned int vel_Krylov_size;\\n unsigned int vel_off_diagonals;\\n unsigned int vel_update_prec;\\n double       vel_eps;\\n double       vel_diag_strength;\\n \\n bool         verbose;\\n unsigned int output_interval;\\n \\n protected:\\n ParameterHandler prm;\\n    };\\n \\n    Data_Storage::Data_Storage()\\n      : form(Method::rotational)\\n      , dt(5e-4)\\n      , initial_time(0.)\\n      , final_time(1.)\\n      , Reynolds(1.)\\n      , n_global_refines(0)\\n      , pressure_degree(1)\\n      , vel_max_iterations(1000)\\n      , vel_Krylov_size(30)\\n      , vel_off_diagonals(60)\\n      , vel_update_prec(15)\\n      , vel_eps(1e-12)\\n      , vel_diag_strength(0.01)\\n      , verbose(true)\\n      , output_interval(15)\\n    {\\n      prm.declare_entry(\\\"Method_Form\\\",\\n \\\"rotational\\\",\\n Patterns::Selection(\\\"rotational|standard\\\"),\\n \\\" Used to select the type of method that we are going \\\"\\n \\\"to use. \\\");\\n      prm.enter_subsection(\\\"Physical data\\\");\\n      {\\n        prm.declare_entry(\\\"initial_time\\\",\\n \\\"0.\\\",\\n Patterns::Double(0.),\\n \\\" The initial time of the simulation. \\\");\\n        prm.declare_entry(\\\"final_time\\\",\\n \\\"1.\\\",\\n Patterns::Double(0.),\\n \\\" The final time of the simulation. \\\");\\n        prm.declare_entry(\\\"Reynolds\\\",\\n \\\"1.\\\",\\n Patterns::Double(0.),\\n \\\" The Reynolds number. \\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.enter_subsection(\\\"Time step data\\\");\\n      {\\n        prm.declare_entry(\\\"dt\\\",\\n \\\"5e-4\\\",\\n Patterns::Double(0.),\\n \\\" The time step size. \\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.enter_subsection(\\\"Space discretization\\\");\\n      {\\n        prm.declare_entry(\\\"n_of_refines\\\",\\n \\\"0\\\",\\n Patterns::Integer(0, 15),\\n \\\" The number of global refines we do on the mesh. \\\");\\n        prm.declare_entry(\\\"pressure_fe_degree\\\",\\n \\\"1\\\",\\n Patterns::Integer(1, 5),\\n \\\" The polynomial degree for the pressure space. \\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.enter_subsection(\\\"Data solve velocity\\\");\\n      {\\n        prm.declare_entry(\\n \\\"max_iterations\\\",\\n \\\"1000\\\",\\n Patterns::Integer(1, 1000),\\n \\\" The maximal number of iterations GMRES must make. \\\");\\n        prm.declare_entry(\\\"eps\\\",\\n \\\"1e-12\\\",\\n Patterns::Double(0.),\\n \\\" The stopping criterion. \\\");\\n        prm.declare_entry(\\\"Krylov_size\\\",\\n \\\"30\\\",\\n Patterns::Integer(1),\\n \\\" The size of the Krylov subspace to be used. \\\");\\n        prm.declare_entry(\\\"off_diagonals\\\",\\n \\\"60\\\",\\n Patterns::Integer(0),\\n \\\" The number of off-diagonal elements ILU must \\\"\\n \\\"compute. \\\");\\n        prm.declare_entry(\\\"diag_strength\\\",\\n \\\"0.01\\\",\\n Patterns::Double(0.),\\n \\\" Diagonal strengthening coefficient. \\\");\\n        prm.declare_entry(\\\"update_prec\\\",\\n \\\"15\\\",\\n Patterns::Integer(1),\\n \\\" This number indicates how often we need to \\\"\\n \\\"update the preconditioner\\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.declare_entry(\\\"verbose\\\",\\n \\\"true\\\",\\n Patterns::Bool(),\\n \\\" This indicates whether the output of the solution \\\"\\n \\\"process should be verbose. \\\");\\n \\n      prm.declare_entry(\\\"output_interval\\\",\\n \\\"1\\\",\\n Patterns::Integer(1),\\n \\\" This indicates between how many time steps we print \\\"\\n \\\"the solution. \\\");\\n    }\\n \\n \\n \\n void Data_Storage::read_data(const std::string &filename)\\n    {\\n      std::ifstream file(filename);\\n AssertThrow(file, ExcFileNotOpen(filename));\\n \\n      prm.parse_input(file);\\n \\n if (prm.get(\\\"Method_Form\\\") == std::string(\\\"rotational\\\"))\\n        form = Method::rotational;\\n else\\n        form = Method::standard;\\n \\n      prm.enter_subsection(\\\"Physical data\\\");\\n      {\\n        initial_time = prm.get_double(\\\"initial_time\\\");\\n        final_time   = prm.get_double(\\\"final_time\\\");\\n        Reynolds     = prm.get_double(\\\"Reynolds\\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.enter_subsection(\\\"Time step data\\\");\\n      {\\n        dt = prm.get_double(\\\"dt\\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.enter_subsection(\\\"Space discretization\\\");\\n      {\\n        n_global_refines = prm.get_integer(\\\"n_of_refines\\\");\\n        pressure_degree  = prm.get_integer(\\\"pressure_fe_degree\\\");\\n      }\\n      prm.leave_subsection();\\n \\n      prm.enter_subsection(\\\"Data solve velocity\\\");\\n      {\\n        vel_max_iterations = prm.get_integer(\\\"max_iterations\\\");\\n        vel_eps            = prm.get_double(\\\"eps\\\");\\n        vel_Krylov_size    = prm.get_integer(\\\"Krylov_size\\\");\\n        vel_off_diagonals  = prm.get_integer(\\\"off_diagonals\\\");\\n        vel_diag_strength  = prm.get_double(\\\"diag_strength\\\");\\n        vel_update_prec    = prm.get_integer(\\\"update_prec\\\");\\n      }\\n      prm.leave_subsection();\\n \\n      verbose = prm.get_bool(\\\"verbose\\\");\\n \\n      output_interval = prm.get_integer(\\\"output_interval\\\");\\n    }\\n  } // namespace RunTimeParameters\\n \\n \\n \\n \\n namespace EquationData\\n  {\\n template <int dim>\\n class MultiComponentFunction : public Function<dim>\\n    {\\n public:\\n      MultiComponentFunction(const double initial_time = 0.);\\n void set_component(const unsigned int d);\\n \\n protected:\\n unsigned int comp;\\n    };\\n \\n template <int dim>\\n    MultiComponentFunction<dim>::MultiComponentFunction(\\n const double initial_time)\\n      : Function<dim>(1, initial_time)\\n      , comp(0)\\n    {}\\n \\n \\n template <int dim>\\n void MultiComponentFunction<dim>::set_component(const unsigned int d)\\n    {\\n Assert(d < dim, ExcIndexRange(d, 0, dim));\\n      comp = d;\\n    }\\n \\n \\n template <int dim>\\n class Velocity : public MultiComponentFunction<dim>\\n    {\\n public:\\n      Velocity(const double initial_time = 0.0);\\n \\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override;\\n \\n virtual void value_list(const std::vector<Point<dim>> &points,\\n                              std::vector<double>           &values,\\n const unsigned int component = 0) const override;\\n    };\\n \\n \\n template <int dim>\\n    Velocity<dim>::Velocity(const double initial_time)\\n      : MultiComponentFunction<dim>(initial_time)\\n    {}\\n \\n \\n template <int dim>\\n void Velocity<dim>::value_list(const std::vector<Point<dim>> &points,\\n                                   std::vector<double>           &values,\\n const unsigned int) const\\n {\\n const unsigned int n_points = points.size();\\n AssertDimension(values.size(), n_points);\\n for (unsigned int i = 0; i < n_points; ++i)\\n        values[i] = Velocity<dim>::value(points[i]);\\n    }\\n \\n \\n template <int dim>\\n double Velocity<dim>::value(const Point<dim> &p, const unsigned int) const\\n {\\n if (this->comp == 0)\\n        {\\n const double Um = 1.5;\\n const double H  = 4.1;\\n return 4. * Um * p[1] * (H - p[1]) / (H * H);\\n        }\\n else\\n return 0.;\\n    }\\n \\n \\n \\n template <int dim>\\n class Pressure : public Function<dim>\\n    {\\n public:\\n      Pressure(const double initial_time = 0.0);\\n \\n virtual double value(const Point<dim>  &p,\\n const unsigned int component = 0) const override;\\n \\n virtual void value_list(const std::vector<Point<dim>> &points,\\n                              std::vector<double>           &values,\\n const unsigned int component = 0) const override;\\n    };\\n \\n template <int dim>\\n    Pressure<dim>::Pressure(const double initial_time)\\n      : Function<dim>(1, initial_time)\\n    {}\\n \\n \\n template <int dim>\\n double Pressure<dim>::value(const Point<dim>  &p,\\n const unsigned int component) const\\n {\\n      (void)component;\\n AssertIndexRange(component, 1);\\n return 25. - p[0];\\n    }\\n \\n template <int dim>\\n void Pressure<dim>::value_list(const std::vector<Point<dim>> &points,\\n                                   std::vector<double>           &values,\\n const unsigned int component) const\\n {\\n      (void)component;\\n AssertIndexRange(component, 1);\\n const unsigned int n_points = points.size();\\n AssertDimension(values.size(), n_points);\\n for (unsigned int i = 0; i < n_points; ++i)\\n        values[i] = Pressure<dim>::value(points[i]);\\n    }\\n  } // namespace EquationData\\n \\n \\n \\n \\n template <int dim>\\n class NavierStokesProjection\\n  {\\n public:\\n    NavierStokesProjection(const RunTimeParameters::Data_Storage &data);\\n \\n void run(const bool verbose = false, const unsigned int n_plots = 10);\\n \\n protected:\\n    RunTimeParameters::Method type;\\n \\n const unsigned int deg;\\n const double       dt;\\n const double       t_0;\\n const double       T;\\n const double       Re;\\n \\n    EquationData::Velocity<dim>               vel_exact;\\n    std::map<types::global_dof_index, double> boundary_values;\\n    std::vector<types::boundary_id>           boundary_ids;\\n \\n Triangulation<dim> triangulation;\\n \\n const FE_Q<dim> fe_velocity;\\n const FE_Q<dim> fe_pressure;\\n \\n DoFHandler<dim> dof_handler_velocity;\\n DoFHandler<dim> dof_handler_pressure;\\n \\n const QGauss<dim> quadrature_pressure;\\n const QGauss<dim> quadrature_velocity;\\n \\n SparsityPattern sparsity_pattern_velocity;\\n SparsityPattern sparsity_pattern_pressure;\\n SparsityPattern sparsity_pattern_pres_vel;\\n \\n SparseMatrix<double> vel_Laplace_plus_Mass;\\n SparseMatrix<double> vel_it_matrix[dim];\\n SparseMatrix<double> vel_Mass;\\n SparseMatrix<double> vel_Laplace;\\n SparseMatrix<double> vel_Advection;\\n SparseMatrix<double> pres_Laplace;\\n SparseMatrix<double> pres_Mass;\\n SparseMatrix<double> pres_Diff[dim];\\n SparseMatrix<double> pres_iterative;\\n \\n Vector<double> pres_n;\\n Vector<double> pres_n_minus_1;\\n Vector<double> phi_n;\\n Vector<double> phi_n_minus_1;\\n Vector<double> u_n[dim];\\n Vector<double> u_n_minus_1[dim];\\n Vector<double> u_star[dim];\\n Vector<double> force[dim];\\n Vector<double> v_tmp;\\n Vector<double> pres_tmp;\\n Vector<double> rot_u;\\n \\n SparseILU<double>   prec_velocity[dim];\\n SparseILU<double>   prec_pres_Laplace;\\n SparseDirectUMFPACK prec_mass;\\n SparseDirectUMFPACK prec_vel_mass;\\n \\n DeclException2(ExcInvalidTimeStep,\\n double,\\n double,\\n                   << \\\" The time step \\\" << arg1 << \\\" is out of range.\\\"\\n                   << std::endl\\n                   << \\\" The permitted range is (0,\\\" << arg2 << ']');\\n \\n void create_triangulation_and_dofs(const unsigned int n_refines);\\n \\n void initialize();\\n \\n void interpolate_velocity();\\n \\n void diffusion_step(const bool reinit_prec);\\n \\n void projection_step(const bool reinit_prec);\\n \\n void update_pressure(const bool reinit_prec);\\n \\n private:\\n unsigned int vel_max_its;\\n unsigned int vel_Krylov_size;\\n unsigned int vel_off_diagonals;\\n unsigned int vel_update_prec;\\n double       vel_eps;\\n double       vel_diag_strength;\\n \\n void initialize_velocity_matrices();\\n \\n void initialize_pressure_matrices();\\n \\n using IteratorTuple =\\n      std::tuple<typename DoFHandler<dim>::active_cell_iterator,\\n typename DoFHandler<dim>::active_cell_iterator>;\\n \\n using IteratorPair = SynchronousIterators<IteratorTuple>;\\n \\n void initialize_gradient_operator();\\n \\n struct InitGradPerTaskData\\n    {\\n unsigned int d;\\n unsigned int                         vel_dpc;\\n unsigned int                         pres_dpc;\\n FullMatrix<double>                   local_grad;\\n      std::vector<types::global_dof_index> vel_local_dof_indices;\\n      std::vector<types::global_dof_index> pres_local_dof_indices;\\n \\n      InitGradPerTaskData(const unsigned int dd,\\n const unsigned int vdpc,\\n const unsigned int pdpc)\\n        : d(dd)\\n        , vel_dpc(vdpc)\\n        , pres_dpc(pdpc)\\n        , local_grad(vdpc, pdpc)\\n        , vel_local_dof_indices(vdpc)\\n        , pres_local_dof_indices(pdpc)\\n      {}\\n    };\\n \\n struct InitGradScratchData\\n    {\\n unsigned int  nqp;\\n FEValues<dim> fe_val_vel;\\n FEValues<dim> fe_val_pres;\\n      InitGradScratchData(const FE_Q<dim>   &fe_v,\\n const FE_Q<dim>   &fe_p,\\n const QGauss<dim> &quad,\\n const UpdateFlags  flags_v,\\n const UpdateFlags  flags_p)\\n        : nqp(quad.size())\\n        , fe_val_vel(fe_v, quad, flags_v)\\n        , fe_val_pres(fe_p, quad, flags_p)\\n      {}\\n      InitGradScratchData(const InitGradScratchData &data)\\n        : nqp(data.nqp)\\n        , fe_val_vel(data.fe_val_vel.get_fe(),\\n                     data.fe_val_vel.get_quadrature(),\\n                     data.fe_val_vel.get_update_flags())\\n        , fe_val_pres(data.fe_val_pres.get_fe(),\\n                      data.fe_val_pres.get_quadrature(),\\n                      data.fe_val_pres.get_update_flags())\\n      {}\\n    };\\n \\n void assemble_one_cell_of_gradient(const IteratorPair  &SI,\\n                                       InitGradScratchData &scratch,\\n                                       InitGradPerTaskData &data);\\n \\n void copy_gradient_local_to_global(const InitGradPerTaskData &data);\\n \\n void assemble_advection_term();\\n \\n struct AdvectionPerTaskData\\n    {\\n FullMatrix<double>                   local_advection;\\n      std::vector<types::global_dof_index> local_dof_indices;\\n      AdvectionPerTaskData(const unsigned int dpc)\\n        : local_advection(dpc, dpc)\\n        , local_dof_indices(dpc)\\n      {}\\n    };\\n \\n struct AdvectionScratchData\\n    {\\n unsigned int                nqp;\\n unsigned int                dpc;\\n      std::vector<Point<dim>>     u_star_local;\\n      std::vector<Tensor<1, dim>> grad_u_star;\\n      std::vector<double>         u_star_tmp;\\n FEValues<dim>               fe_val;\\n      AdvectionScratchData(const FE_Q<dim>   &fe,\\n const QGauss<dim> &quad,\\n const UpdateFlags  flags)\\n        : nqp(quad.size())\\n        , dpc(fe.n_dofs_per_cell())\\n        , u_star_local(nqp)\\n        , grad_u_star(nqp)\\n        , u_star_tmp(nqp)\\n        , fe_val(fe, quad, flags)\\n      {}\\n \\n      AdvectionScratchData(const AdvectionScratchData &data)\\n        : nqp(data.nqp)\\n        , dpc(data.dpc)\\n        , u_star_local(nqp)\\n        , grad_u_star(nqp)\\n        , u_star_tmp(nqp)\\n        , fe_val(data.fe_val.get_fe(),\\n                 data.fe_val.get_quadrature(),\\n                 data.fe_val.get_update_flags())\\n      {}\\n    };\\n \\n void assemble_one_cell_of_advection(\\n const typename DoFHandler<dim>::active_cell_iterator &cell,\\n      AdvectionScratchData                                 &scratch,\\n      AdvectionPerTaskData                                 &data);\\n \\n void copy_advection_local_to_global(const AdvectionPerTaskData &data);\\n \\n void diffusion_component_solve(const unsigned int d);\\n \\n void output_results(const unsigned int step);\\n \\n void assemble_vorticity(const bool reinit_prec);\\n  };\\n \\n \\n \\n \\n template <int dim>\\n  NavierStokesProjection<dim>::NavierStokesProjection(\\n const RunTimeParameters::Data_Storage &data)\\n    : type(data.form)\\n    , deg(data.pressure_degree)\\n    , dt(data.dt)\\n    , t_0(data.initial_time)\\n    , T(data.final_time)\\n    , Re(data.Reynolds)\\n    , vel_exact(data.initial_time)\\n    , fe_velocity(deg + 1)\\n    , fe_pressure(deg)\\n    , dof_handler_velocity(triangulation)\\n    , dof_handler_pressure(triangulation)\\n    , quadrature_pressure(deg + 1)\\n    , quadrature_velocity(deg + 2)\\n    , vel_max_its(data.vel_max_iterations)\\n    , vel_Krylov_size(data.vel_Krylov_size)\\n    , vel_off_diagonals(data.vel_off_diagonals)\\n    , vel_update_prec(data.vel_update_prec)\\n    , vel_eps(data.vel_eps)\\n    , vel_diag_strength(data.vel_diag_strength)\\n  {\\n if (deg < 1)\\n      std::cout\\n        << \\\" WARNING: The chosen pair of finite element spaces is not stable.\\\"\\n        << std::endl\\n        << \\\" The obtained results will be nonsense\\\" << std::endl;\\n \\n AssertThrow(!((dt <= 0.) || (dt > .5 * T)), ExcInvalidTimeStep(dt, .5 * T));\\n \\n    create_triangulation_and_dofs(data.n_global_refines);\\n    initialize();\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::create_triangulation_and_dofs(\\n const unsigned int n_refines)\\n  {\\n GridIn<dim> grid_in;\\n    grid_in.attach_triangulation(triangulation);\\n \\n    {\\n      std::string   filename = \\\"nsbench2.inp\\\";\\n      std::ifstream file(filename);\\n Assert(file, ExcFileNotOpen(filename));\\n      grid_in.read_ucd(file);\\n    }\\n \\n    std::cout << \\\"Number of refines = \\\" << n_refines << std::endl;\\n triangulation.refine_global(n_refines);\\n    std::cout << \\\"Number of active cells: \\\" << triangulation.n_active_cells()\\n              << std::endl;\\n \\n    boundary_ids = triangulation.get_boundary_ids();\\n \\n    dof_handler_velocity.distribute_dofs(fe_velocity);\\n DoFRenumbering::boost::Cuthill_McKee(dof_handler_velocity);\\n    dof_handler_pressure.distribute_dofs(fe_pressure);\\n DoFRenumbering::boost::Cuthill_McKee(dof_handler_pressure);\\n \\n    initialize_velocity_matrices();\\n    initialize_pressure_matrices();\\n    initialize_gradient_operator();\\n \\n    pres_n.reinit(dof_handler_pressure.n_dofs());\\n    pres_n_minus_1.reinit(dof_handler_pressure.n_dofs());\\n    phi_n.reinit(dof_handler_pressure.n_dofs());\\n    phi_n_minus_1.reinit(dof_handler_pressure.n_dofs());\\n    pres_tmp.reinit(dof_handler_pressure.n_dofs());\\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        u_n[d].reinit(dof_handler_velocity.n_dofs());\\n        u_n_minus_1[d].reinit(dof_handler_velocity.n_dofs());\\n        u_star[d].reinit(dof_handler_velocity.n_dofs());\\n        force[d].reinit(dof_handler_velocity.n_dofs());\\n      }\\n    v_tmp.reinit(dof_handler_velocity.n_dofs());\\n    rot_u.reinit(dof_handler_velocity.n_dofs());\\n \\n    std::cout << \\\"dim (X_h) = \\\" << (dof_handler_velocity.n_dofs() * dim) \\n              << std::endl                                               \\n              << \\\"dim (M_h) = \\\" << dof_handler_pressure.n_dofs()         \\n              << std::endl                                               \\n              << \\\"Re        = \\\" << Re << std::endl                       \\n              << std::endl;\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::initialize()\\n  {\\n    vel_Laplace_plus_Mass = 0.;\\n    vel_Laplace_plus_Mass.add(1. / Re, vel_Laplace);\\n    vel_Laplace_plus_Mass.add(1.5 / dt, vel_Mass);\\n \\n    EquationData::Pressure<dim> pres(t_0);\\n VectorTools::interpolate(dof_handler_pressure, pres, pres_n_minus_1);\\n    pres.advance_time(dt);\\n VectorTools::interpolate(dof_handler_pressure, pres, pres_n);\\n    phi_n         = 0.;\\n    phi_n_minus_1 = 0.;\\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        vel_exact.set_time(t_0);\\n        vel_exact.set_component(d);\\n VectorTools::interpolate(dof_handler_velocity,\\n                                 vel_exact,\\n                                 u_n_minus_1[d]);\\n        vel_exact.advance_time(dt);\\n VectorTools::interpolate(dof_handler_velocity, vel_exact, u_n[d]);\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::initialize_velocity_matrices()\\n  {\\n    {\\n DynamicSparsityPattern dsp(dof_handler_velocity.n_dofs(),\\n                                 dof_handler_velocity.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler_velocity, dsp);\\n      sparsity_pattern_velocity.copy_from(dsp);\\n    }\\n    vel_Laplace_plus_Mass.reinit(sparsity_pattern_velocity);\\n for (unsigned int d = 0; d < dim; ++d)\\n      vel_it_matrix[d].reinit(sparsity_pattern_velocity);\\n    vel_Mass.reinit(sparsity_pattern_velocity);\\n    vel_Laplace.reinit(sparsity_pattern_velocity);\\n    vel_Advection.reinit(sparsity_pattern_velocity);\\n \\n MatrixCreator::create_mass_matrix(dof_handler_velocity,\\n                                      quadrature_velocity,\\n                                      vel_Mass);\\n MatrixCreator::create_laplace_matrix(dof_handler_velocity,\\n                                         quadrature_velocity,\\n                                         vel_Laplace);\\n  }\\n \\n template <int dim>\\n void NavierStokesProjection<dim>::initialize_pressure_matrices()\\n  {\\n    {\\n DynamicSparsityPattern dsp(dof_handler_pressure.n_dofs(),\\n                                 dof_handler_pressure.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler_pressure, dsp);\\n      sparsity_pattern_pressure.copy_from(dsp);\\n    }\\n \\n    pres_Laplace.reinit(sparsity_pattern_pressure);\\n    pres_iterative.reinit(sparsity_pattern_pressure);\\n    pres_Mass.reinit(sparsity_pattern_pressure);\\n \\n MatrixCreator::create_laplace_matrix(dof_handler_pressure,\\n                                         quadrature_pressure,\\n                                         pres_Laplace);\\n MatrixCreator::create_mass_matrix(dof_handler_pressure,\\n                                      quadrature_pressure,\\n                                      pres_Mass);\\n  }\\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::initialize_gradient_operator()\\n  {\\n    {\\n DynamicSparsityPattern dsp(dof_handler_velocity.n_dofs(),\\n                                 dof_handler_pressure.n_dofs());\\n DoFTools::make_sparsity_pattern(dof_handler_velocity,\\n                                      dof_handler_pressure,\\n                                      dsp);\\n      sparsity_pattern_pres_vel.copy_from(dsp);\\n    }\\n \\n    InitGradPerTaskData per_task_data(0,\\n                                      fe_velocity.n_dofs_per_cell(),\\n                                      fe_pressure.n_dofs_per_cell());\\n    InitGradScratchData scratch_data(fe_velocity,\\n                                     fe_pressure,\\n                                     quadrature_velocity,\\n update_gradients | update_JxW_values,\\n update_values);\\n \\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        pres_Diff[d].reinit(sparsity_pattern_pres_vel);\\n        per_task_data.d = d;\\n WorkStream::run(\\n          IteratorPair(IteratorTuple(dof_handler_velocity.begin_active(),\\n                                     dof_handler_pressure.begin_active())),\\n          IteratorPair(IteratorTuple(dof_handler_velocity.end(),\\n                                     dof_handler_pressure.end())),\\n          *this,\\n          &NavierStokesProjection<dim>::assemble_one_cell_of_gradient,\\n          &NavierStokesProjection<dim>::copy_gradient_local_to_global,\\n          scratch_data,\\n          per_task_data);\\n      }\\n  }\\n \\n template <int dim>\\n void NavierStokesProjection<dim>::assemble_one_cell_of_gradient(\\n const IteratorPair  &SI,\\n    InitGradScratchData &scratch,\\n    InitGradPerTaskData &data)\\n  {\\n    scratch.fe_val_vel.reinit(std::get<0>(*SI));\\n    scratch.fe_val_pres.reinit(std::get<1>(*SI));\\n \\n    std::get<0>(*SI)->get_dof_indices(data.vel_local_dof_indices);\\n    std::get<1>(*SI)->get_dof_indices(data.pres_local_dof_indices);\\n \\n    data.local_grad = 0.;\\n for (unsigned int q = 0; q < scratch.nqp; ++q)\\n      {\\n for (unsigned int i = 0; i < data.vel_dpc; ++i)\\n for (unsigned int j = 0; j < data.pres_dpc; ++j)\\n            data.local_grad(i, j) +=\\n              -scratch.fe_val_vel.JxW(q) *\\n              scratch.fe_val_vel.shape_grad(i, q)[data.d] *\\n              scratch.fe_val_pres.shape_value(j, q);\\n      }\\n  }\\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::copy_gradient_local_to_global(\\n const InitGradPerTaskData &data)\\n  {\\n for (unsigned int i = 0; i < data.vel_dpc; ++i)\\n for (unsigned int j = 0; j < data.pres_dpc; ++j)\\n        pres_Diff[data.d].add(data.vel_local_dof_indices[i],\\n                              data.pres_local_dof_indices[j],\\n                              data.local_grad(i, j));\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::run(const bool         verbose,\\n const unsigned int output_interval)\\n  {\\n ConditionalOStream verbose_cout(std::cout, verbose);\\n \\n const auto n_steps = static_cast<unsigned int>((T - t_0) / dt);\\n    vel_exact.set_time(2. * dt);\\n    output_results(1);\\n for (unsigned int n = 2; n <= n_steps; ++n)\\n      {\\n if (n % output_interval == 0)\\n          {\\n            verbose_cout << \\\"Plotting Solution\\\" << std::endl;\\n            output_results(n);\\n          }\\n        std::cout << \\\"Step = \\\" << n << \\\" Time = \\\" << (n * dt) << std::endl;\\n        verbose_cout << \\\"  Interpolating the velocity \\\" << std::endl;\\n \\n        interpolate_velocity();\\n        verbose_cout << \\\"  Diffusion Step\\\" << std::endl;\\n if (n % vel_update_prec == 0)\\n          verbose_cout << \\\"    With reinitialization of the preconditioner\\\"\\n                       << std::endl;\\n        diffusion_step((n % vel_update_prec == 0) || (n == 2));\\n        verbose_cout << \\\"  Projection Step\\\" << std::endl;\\n        projection_step((n == 2));\\n        verbose_cout << \\\"  Updating the Pressure\\\" << std::endl;\\n        update_pressure((n == 2));\\n        vel_exact.advance_time(dt);\\n      }\\n    output_results(n_steps);\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::interpolate_velocity()\\n  {\\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        u_star[d].equ(2., u_n[d]);\\n        u_star[d] -= u_n_minus_1[d];\\n      }\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::diffusion_step(const bool reinit_prec)\\n  {\\n    pres_tmp.equ(-1., pres_n);\\n    pres_tmp.add(-4. / 3., phi_n, 1. / 3., phi_n_minus_1);\\n \\n    assemble_advection_term();\\n \\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        force[d] = 0.;\\n        v_tmp.equ(2. / dt, u_n[d]);\\n        v_tmp.add(-.5 / dt, u_n_minus_1[d]);\\n        vel_Mass.vmult_add(force[d], v_tmp);\\n \\n        pres_Diff[d].vmult_add(force[d], pres_tmp);\\n        u_n_minus_1[d] = u_n[d];\\n \\n        vel_it_matrix[d].copy_from(vel_Laplace_plus_Mass);\\n        vel_it_matrix[d].add(1., vel_Advection);\\n \\n        vel_exact.set_component(d);\\n        boundary_values.clear();\\n for (const auto &boundary_id : boundary_ids)\\n          {\\n switch (boundary_id)\\n              {\\n case 1:\\n VectorTools::interpolate_boundary_values(\\n                    dof_handler_velocity,\\n                    boundary_id,\\n Functions::ZeroFunction<dim>(),\\n                    boundary_values);\\n break;\\n case 2:\\n VectorTools::interpolate_boundary_values(dof_handler_velocity,\\n                                                           boundary_id,\\n                                                           vel_exact,\\n                                                           boundary_values);\\n break;\\n case 3:\\n if (d != 0)\\n VectorTools::interpolate_boundary_values(\\n                      dof_handler_velocity,\\n                      boundary_id,\\n Functions::ZeroFunction<dim>(),\\n                      boundary_values);\\n break;\\n case 4:\\n VectorTools::interpolate_boundary_values(\\n                    dof_handler_velocity,\\n                    boundary_id,\\n Functions::ZeroFunction<dim>(),\\n                    boundary_values);\\n break;\\n default:\\n DEAL_II_NOT_IMPLEMENTED();\\n              }\\n          }\\n MatrixTools::apply_boundary_values(boundary_values,\\n                                           vel_it_matrix[d],\\n                                           u_n[d],\\n                                           force[d]);\\n      }\\n \\n \\n Threads::TaskGroup<void> tasks;\\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n if (reinit_prec)\\n          prec_velocity[d].initialize(vel_it_matrix[d],\\n SparseILU<double>::AdditionalData(\\n                                        vel_diag_strength, vel_off_diagonals));\\n        tasks += Threads::new_task(\\n          &NavierStokesProjection<dim>::diffusion_component_solve, *this, d);\\n      }\\n    tasks.join_all();\\n  }\\n \\n \\n \\n template <int dim>\\n void\\n  NavierStokesProjection<dim>::diffusion_component_solve(const unsigned int d)\\n  {\\n SolverControl solver_control(vel_max_its, vel_eps * force[d].l2_norm());\\n SolverGMRES<Vector<double>> gmres(\\n      solver_control,\\n SolverGMRES<Vector<double>>::AdditionalData(vel_Krylov_size));\\n    gmres.solve(vel_it_matrix[d], u_n[d], force[d], prec_velocity[d]);\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::assemble_advection_term()\\n  {\\n    vel_Advection = 0.;\\n    AdvectionPerTaskData data(fe_velocity.n_dofs_per_cell());\\n    AdvectionScratchData scratch(fe_velocity,\\n                                 quadrature_velocity,\\n update_values | update_JxW_values |\\n update_gradients);\\n WorkStream::run(\\n      dof_handler_velocity.begin_active(),\\n      dof_handler_velocity.end(),\\n      *this,\\n      &NavierStokesProjection<dim>::assemble_one_cell_of_advection,\\n      &NavierStokesProjection<dim>::copy_advection_local_to_global,\\n      scratch,\\n      data);\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::assemble_one_cell_of_advection(\\n const typename DoFHandler<dim>::active_cell_iterator &cell,\\n    AdvectionScratchData                                 &scratch,\\n    AdvectionPerTaskData                                 &data)\\n  {\\n    scratch.fe_val.reinit(cell);\\n    cell->get_dof_indices(data.local_dof_indices);\\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        scratch.fe_val.get_function_values(u_star[d], scratch.u_star_tmp);\\n for (unsigned int q = 0; q < scratch.nqp; ++q)\\n          scratch.u_star_local[q][d] = scratch.u_star_tmp[q];\\n      }\\n \\n for (unsigned int d = 0; d < dim; ++d)\\n      {\\n        scratch.fe_val.get_function_gradients(u_star[d], scratch.grad_u_star);\\n for (unsigned int q = 0; q < scratch.nqp; ++q)\\n          {\\n if (d == 0)\\n              scratch.u_star_tmp[q] = 0.;\\n            scratch.u_star_tmp[q] += scratch.grad_u_star[q][d];\\n          }\\n      }\\n \\n    data.local_advection = 0.;\\n for (unsigned int q = 0; q < scratch.nqp; ++q)\\n for (unsigned int i = 0; i < scratch.dpc; ++i)\\n for (unsigned int j = 0; j < scratch.dpc; ++j)\\n          data.local_advection(i, j) += (scratch.u_star_local[q] *            \\n                                           scratch.fe_val.shape_grad(j, q) *  \\n                                           scratch.fe_val.shape_value(i, q)   \\n                                         +                                    \\n                                         0.5 *                                \\n                                           scratch.u_star_tmp[q] *            \\n                                           scratch.fe_val.shape_value(i, q) * \\n                                           scratch.fe_val.shape_value(j, q))  \\n                                        * scratch.fe_val.JxW(q);\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::copy_advection_local_to_global(\\n const AdvectionPerTaskData &data)\\n  {\\n for (unsigned int i = 0; i < fe_velocity.n_dofs_per_cell(); ++i)\\n for (unsigned int j = 0; j < fe_velocity.n_dofs_per_cell(); ++j)\\n        vel_Advection.add(data.local_dof_indices[i],\\n                          data.local_dof_indices[j],\\n                          data.local_advection(i, j));\\n  }\\n \\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::projection_step(const bool reinit_prec)\\n  {\\n    pres_iterative.copy_from(pres_Laplace);\\n \\n    pres_tmp = 0.;\\n for (unsigned d = 0; d < dim; ++d)\\n      pres_Diff[d].Tvmult_add(pres_tmp, u_n[d]);\\n \\n    phi_n_minus_1 = phi_n;\\n \\n static std::map<types::global_dof_index, double> bval;\\n if (reinit_prec)\\n VectorTools::interpolate_boundary_values(dof_handler_pressure,\\n                                               3,\\n Functions::ZeroFunction<dim>(),\\n                                               bval);\\n \\n MatrixTools::apply_boundary_values(bval, pres_iterative, phi_n, pres_tmp);\\n \\n if (reinit_prec)\\n      prec_pres_Laplace.initialize(pres_iterative,\\n SparseILU<double>::AdditionalData(\\n                                     vel_diag_strength, vel_off_diagonals));\\n \\n SolverControl solvercontrol(vel_max_its, vel_eps * pres_tmp.l2_norm());\\n SolverCG<Vector<double>> cg(solvercontrol);\\n    cg.solve(pres_iterative, phi_n, pres_tmp, prec_pres_Laplace);\\n \\n    phi_n *= 1.5 / dt;\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::update_pressure(const bool reinit_prec)\\n  {\\n    pres_n_minus_1 = pres_n;\\n switch (type)\\n      {\\n case RunTimeParameters::Method::standard:\\n          pres_n += phi_n;\\n break;\\n case RunTimeParameters::Method::rotational:\\n if (reinit_prec)\\n            prec_mass.initialize(pres_Mass);\\n          pres_n = pres_tmp;\\n          prec_mass.solve(pres_n);\\n          pres_n.sadd(1. / Re, 1., pres_n_minus_1);\\n          pres_n += phi_n;\\n break;\\n default:\\n DEAL_II_NOT_IMPLEMENTED();\\n      };\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::output_results(const unsigned int step)\\n  {\\n    assemble_vorticity((step == 1));\\n const FESystem<dim> joint_fe(fe_velocity ^ dim, fe_pressure, fe_velocity);\\n DoFHandler<dim>     joint_dof_handler(triangulation);\\n    joint_dof_handler.distribute_dofs(joint_fe);\\n Assert(joint_dof_handler.n_dofs() ==\\n             ((dim + 1) * dof_handler_velocity.n_dofs() +\\n              dof_handler_pressure.n_dofs()),\\n           ExcInternalError());\\n Vector<double> joint_solution(joint_dof_handler.n_dofs());\\n    std::vector<types::global_dof_index> loc_joint_dof_indices(\\n      joint_fe.n_dofs_per_cell()),\\n      loc_vel_dof_indices(fe_velocity.n_dofs_per_cell()),\\n      loc_pres_dof_indices(fe_pressure.n_dofs_per_cell());\\n typename DoFHandler<dim>::active_cell_iterator\\n      joint_cell = joint_dof_handler.begin_active(),\\n      joint_endc = joint_dof_handler.end(),\\n      vel_cell   = dof_handler_velocity.begin_active(),\\n      pres_cell  = dof_handler_pressure.begin_active();\\n for (; joint_cell != joint_endc; ++joint_cell, ++vel_cell, ++pres_cell)\\n      {\\n        joint_cell->get_dof_indices(loc_joint_dof_indices);\\n        vel_cell->get_dof_indices(loc_vel_dof_indices);\\n        pres_cell->get_dof_indices(loc_pres_dof_indices);\\n for (unsigned int i = 0; i < joint_fe.n_dofs_per_cell(); ++i)\\n switch (joint_fe.system_to_base_index(i).first.first)\\n            {\\n case 0:\\n Assert(joint_fe.system_to_base_index(i).first.second < dim,\\n                       ExcInternalError());\\n                joint_solution(loc_joint_dof_indices[i]) =\\n                  u_n[joint_fe.system_to_base_index(i).first.second](\\n                    loc_vel_dof_indices[joint_fe.system_to_base_index(i)\\n                                          .second]);\\n break;\\n case 1:\\n Assert(joint_fe.system_to_base_index(i).first.second == 0,\\n                       ExcInternalError());\\n                joint_solution(loc_joint_dof_indices[i]) =\\n                  pres_n(loc_pres_dof_indices[joint_fe.system_to_base_index(i)\\n                                                .second]);\\n break;\\n case 2:\\n Assert(joint_fe.system_to_base_index(i).first.second == 0,\\n                       ExcInternalError());\\n                joint_solution(loc_joint_dof_indices[i]) = rot_u(\\n                  loc_vel_dof_indices[joint_fe.system_to_base_index(i).second]);\\n break;\\n default:\\n DEAL_II_ASSERT_UNREACHABLE();\\n            }\\n      }\\n    std::vector<std::string> joint_solution_names(dim, \\\"v\\\");\\n    joint_solution_names.emplace_back(\\\"p\\\");\\n    joint_solution_names.emplace_back(\\\"rot_u\\\");\\n DataOut<dim> data_out;\\n    data_out.attach_dof_handler(joint_dof_handler);\\n    std::vector<DataComponentInterpretation::DataComponentInterpretation>\\n      component_interpretation(\\n        dim + 2, DataComponentInterpretation::component_is_part_of_vector);\\n    component_interpretation[dim] =\\n DataComponentInterpretation::component_is_scalar;\\n    component_interpretation[dim + 1] =\\n DataComponentInterpretation::component_is_scalar;\\n    data_out.add_data_vector(joint_solution,\\n                             joint_solution_names,\\n DataOut<dim>::type_dof_data,\\n                             component_interpretation);\\n    data_out.build_patches(deg + 1);\\n    std::ofstream output(\\\"solution-\\\" + Utilities::int_to_string(step, 5) +\\n \\\".vtk\\\");\\n    data_out.write_vtk(output);\\n  }\\n \\n \\n \\n template <int dim>\\n void NavierStokesProjection<dim>::assemble_vorticity(const bool reinit_prec)\\n  {\\n Assert(dim == 2, ExcNotImplemented());\\n if (reinit_prec)\\n      prec_vel_mass.initialize(vel_Mass);\\n \\n FEValues<dim>      fe_val_vel(fe_velocity,\\n                             quadrature_velocity,\\n update_gradients | update_JxW_values |\\n update_values);\\n const unsigned int dpc = fe_velocity.n_dofs_per_cell(),\\n                       nqp = quadrature_velocity.size();\\n    std::vector<types::global_dof_index> ldi(dpc);\\n Vector<double>                       loc_rot(dpc);\\n \\n    std::vector<Tensor<1, dim>> grad_u1(nqp), grad_u2(nqp);\\n    rot_u = 0.;\\n \\n for (const auto &cell : dof_handler_velocity.active_cell_iterators())\\n      {\\n        fe_val_vel.reinit(cell);\\n        cell->get_dof_indices(ldi);\\n        fe_val_vel.get_function_gradients(u_n[0], grad_u1);\\n        fe_val_vel.get_function_gradients(u_n[1], grad_u2);\\n        loc_rot = 0.;\\n for (unsigned int q = 0; q < nqp; ++q)\\n for (unsigned int i = 0; i < dpc; ++i)\\n            loc_rot(i) += (grad_u2[q][0] - grad_u1[q][1]) * \\n                          fe_val_vel.shape_value(i, q) *    \\n                          fe_val_vel.JxW(q);\\n \\n for (unsigned int i = 0; i < dpc; ++i)\\n          rot_u(ldi[i]) += loc_rot(i);\\n      }\\n \\n    prec_vel_mass.solve(rot_u);\\n  }\\n} // namespace Step35\\n \\n \\n \\nint main()\\n{\\n try\\n    {\\n using namespace Step35;\\n \\n      RunTimeParameters::Data_Storage data;\\n      data.read_data(\\\"parameter-file.prm\\\");\\n \\n deallog.depth_console(data.verbose ? 2 : 0);\\n \\n      NavierStokesProjection<2> test(data);\\n      test.run(data.verbose, data.output_interval);\\n    }\\n catch (std::exception &exc)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Exception on processing: \\\" << std::endl\\n                << exc.what() << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n catch (...)\\n    {\\n      std::cerr << std::endl\\n                << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n      std::cerr << \\\"Unknown exception!\\\" << std::endl\\n                << \\\"Aborting!\\\" << std::endl\\n                << \\\"----------------------------------------------------\\\"\\n                << std::endl;\\n return 1;\\n    }\\n  std::cout << \\\"----------------------------------------------------\\\"\\n            << std::endl\\n            << \\\"Apparently everything went fine!\\\" << std::endl\\n            << \\\"Don't forget to brush your teeth :-)\\\" << std::endl\\n            << std::endl;\\n return 0;\\n}\\naffine_constraints.h\\npoint.h\\nDataOutInterface::write_vtkvoid write_vtk(std::ostream &out) constDefinition data_out_base.cc:7681\\nDataOut_DoFData::add_data_vectorvoid add_data_vector(const VectorType &data, const std::vector< std::string > &names, const DataVectorType type=type_automatic, const std::vector< DataComponentInterpretation::DataComponentInterpretation > &data_component_interpretation={})Definition data_out_dof_data.h:1069\\nDataOut::build_patchesvirtual void build_patches(const unsigned int n_subdivisions=0)Definition data_out.cc:1062\\nGridIn::read_ucdvoid read_ucd(std::istream &in, const bool apply_all_indicators_to_manifolds=false)Definition grid_in.cc:914\\nThreads::TaskGroup::join_allvoid join_all() constDefinition thread_management.h:1431\\nconditional_ostream.h\\ndof_handler.h\\ndof_renumbering.h\\ndof_tools.h\\ndynamic_sparsity_pattern.h\\nfe_values.h\\nfe_q.h\\nfe_system.h\\nfe_tools.h\\nfunction.h\\ngrid_refinement.h\\ntria.h\\ngrid_generator.h\\ngrid_in.h\\nparallel.h\\nutilities.h\\nmatrix_creator.h\\nmatrix_tools.h\\nmultithread_info.h\\nPhysics::Elasticity::Kinematics::eSymmetricTensor< 2, dim, Number > e(const Tensor< 2, dim, Number > &F)\\nWorkStream::internal::tbb_no_coloring::runvoid run(const Iterator &begin, const std_cxx20::type_identity_t< Iterator > &end, Worker worker, Copier copier, const ScratchData &sample_scratch_data, const CopyData &sample_copy_data, const unsigned int queue_length, const unsigned int chunk_size)Definition work_stream.h:471\\ninternal::reinitvoid reinit(MatrixBlock< MatrixType > &v, const BlockSparsityPattern &p)Definition matrix_block.h:617\\ndata_out.h\\nparameter_handler.h\\nprecondition.h\\nquadrature_lib.h\\nsolver_cg.h\\nsolver_gmres.h\\nsparse_direct.h\\nsparse_ilu.h\\nsparse_matrix.h\\nthread_management.h\\nvector.h\\nvector_tools.h\\nwork_stream.h\\n \\n\\n\\n\\n\\nGenerated by\\u00a0 1.11.0\\n\\n\\n\\n\\n\", \"type\": \"Document\"}}]"